import javax.microedition.io.Connection;
import javax.microedition.io.InputConnection;
import javax.microedition.io.OutputConnection;
import javax.microedition.io.ContentConnection;
import javax.microedition.io.Connector;
import javax.microedition.rms.RecordEnumeration;
import javax.microedition.rms.RecordComparator;
import javax.microedition.rms.RecordFilter;
import java.util.Stack;
import java.io.ByteArrayOutputStream;
import javax.microedition.io.ConnectionNotFoundException;
import javax.microedition.rms.RecordStoreException;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.Random;
import java.io.ByteArrayInputStream;
import javax.microedition.lcdui.CommandListener;
import java.io.OutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.DataInput;
import javax.microedition.lcdui.Displayable;
import javax.microedition.lcdui.Font;
import javax.microedition.io.SocketConnection;
import javax.microedition.lcdui.Graphics;
import java.io.DataInputStream;
import javax.microedition.io.file.FileConnection;
import javax.microedition.rms.RecordStore;
import javax.microedition.lcdui.Command;
import javax.microedition.io.HttpConnection;
import javax.microedition.lcdui.Image;
import java.util.Enumeration;
import java.io.DataOutputStream;
import java.util.Hashtable;
import javax.microedition.lcdui.TextBox;
import javax.microedition.lcdui.Display;
import java.util.Vector;

// 
// Decompiled by Procyon v0.6-prerelease
// 

public final class Code implements J, Runnable
{
    private B B;
    private boolean a;
    private Vector Code;
    private static boolean e;
    private static boolean i;
    private long Z;
    private byte[] Code;
    private static Object I;
    private static boolean g;
    public static Display Code;
    private static long d;
    private boolean d;
    private static long I;
    private static boolean Y;
    private static boolean aJ;
    private static Code[] I;
    private boolean aI;
    public static boolean I;
    private static boolean al;
    private static boolean Q;
    private a I;
    private boolean B;
    private static Code[] Code;
    private static boolean[] Code;
    private static TextBox Code;
    private boolean C;
    private static char[][] Code;
    private int C;
    private static int d;
    private static int aj;
    private B a;
    private Hashtable J;
    private int a;
    private int[] w;
    private static J[] Code;
    private static int[] i;
    private int[] x;
    private static Hashtable C;
    private static int[] C;
    private byte[] f;
    private static J Code;
    private boolean b;
    public static boolean J;
    private static int R;
    private static int bu;
    private static Code A;
    private static boolean f;
    public static int Z;
    public static int[] Code;
    private static int[] f;
    private String c;
    private static int i;
    private static int aC;
    private static int aX;
    private DataOutputStream Code;
    private J I;
    private int b;
    private static int bz;
    private static int s;
    private Code F;
    private static Code f;
    private static int e;
    private Code L;
    private static int k;
    private a Code;
    public static Code Z;
    private static int f;
    private static String g;
    private Enumeration Code;
    private static String k;
    private static String f;
    public static Code J;
    private static Object Z;
    private static String Z;
    private static String i;
    private byte Code;
    private byte I;
    private int[] I;
    private static Object[] Code;
    private static byte[][] Code;
    private static short[] Code;
    private static B Z;
    private static Vector I;
    private static int[] e;
    private static int z;
    private static int[] c;
    private static int[] q;
    private static boolean u;
    private static int[][] Code;
    private static int[] d;
    private boolean c;
    private static int[] A;
    private static byte[] u;
    private static int c;
    private static byte[] d;
    private static RuntimeException Code;
    private static char Code;
    private static Code c;
    private static long Code;
    private static Code e;
    private static Z Code;
    private static byte[] C;
    private Hashtable B;
    private static int j;
    private Code C;
    private static byte[] c;
    private static int[] Z;
    private static Code z;
    private static byte[] e;
    private static Vector Z;
    private static byte[][] I;
    private static Object Code;
    private static int bt;
    private static int g;
    private static Hashtable c;
    private static char[] I;
    private static byte[] I;
    private static byte[] Z;
    private static int[] b;
    private static byte[] B;
    private static byte[] J;
    private static int[] J;
    private static int[] B;
    private static B Code;
    private static B I;
    private static Code E;
    private static B J;
    private int[][] J;
    private int[] y;
    private int[] z;
    private int[] v;
    private Code t;
    private static int[] n;
    private static Image Code;
    private static Object J;
    private static Code B;
    private static int S;
    private static Code x;
    private static Code M;
    private static int h;
    private static int x;
    private static int l;
    private static boolean j;
    private static boolean k;
    private static int m;
    private static int n;
    private static int o;
    private static int p;
    private static int[] a;
    private static int q;
    private static int Q;
    private static int r;
    private static int aA;
    private static int bs;
    private static int t;
    private static int u;
    private static int v;
    private static int w;
    private static int[] s;
    private static int y;
    private static boolean s;
    private static int A;
    private static boolean v;
    private static int aJ;
    private static byte[] s;
    private static int D;
    private static byte[] t;
    private static boolean D;
    private static boolean W;
    private static int W;
    private static boolean n;
    private static int O;
    private static int E;
    private static int[] D;
    private Code v;
    private static int ao;
    private static Code a;
    private static int cf;
    private Code K;
    private static int F;
    private static boolean E;
    private static int G;
    private static boolean P;
    private static boolean G;
    private static boolean H;
    private static int H;
    private static int K;
    private static int L;
    private static int M;
    private static int N;
    private static short[] I;
    private static int aK;
    private static int aB;
    private static int P;
    private static Code p;
    private static byte J;
    private static int ah;
    public static int Code;
    private static byte b;
    private static byte a;
    private static byte c;
    private static int cc;
    private static int T;
    private static long a;
    private static long b;
    private static int am;
    private static boolean T;
    private static boolean O;
    private static int U;
    private static boolean X;
    private static boolean U;
    private static boolean V;
    private static boolean ak;
    private static int V;
    public static String Code;
    private static int ak;
    private static int X;
    private static boolean aa;
    public static String I;
    private static int Y;
    private static int aa;
    private static int ab;
    private static boolean ab;
    private static String B;
    private static int ac;
    private static int ad;
    private static String C;
    private static int bj;
    private static int ae;
    private static String l;
    private static int ap;
    private static String a;
    private static boolean ac;
    private static int ar;
    private static boolean ae;
    private static boolean af;
    private static boolean an;
    private static int af;
    private boolean w;
    private static int an;
    private static boolean S;
    private static boolean ag;
    private static int ag;
    private static boolean ad;
    private static boolean ai;
    private static int ai;
    private static int bY;
    private static int al;
    private static boolean p;
    private static int aq;
    private static boolean at;
    private static boolean as;
    private static int as;
    private static int at;
    private static boolean aw;
    private int az;
    private static int au;
    private static boolean au;
    private static int av;
    private static int aw;
    private static int ci;
    private static boolean ay;
    private static int aD;
    private static int ay;
    private static int ax;
    private static int ch;
    private static Code b;
    public static Code Code;
    private static boolean h;
    private static f Code;
    private static Code d;
    private static Code D;
    private static Integer Code;
    public static boolean Code;
    private static boolean av;
    public static int I;
    private static int aE;
    private static int aF;
    private static int aG;
    private static int aH;
    private static int aI;
    private int[][] I;
    private boolean y;
    private static C Code;
    private Object[] I;
    private Code s;
    private static String J;
    public static int J;
    private static boolean l;
    private static boolean R;
    private static boolean m;
    private static byte[] k;
    private static boolean r;
    private static boolean F;
    private static boolean A;
    private static byte[] m;
    private static byte[] r;
    private static byte[] q;
    private static boolean o;
    public static Code I;
    private static Hashtable Code;
    private static Hashtable I;
    private boolean L;
    private static byte[] a;
    private static int[] o;
    private int bk;
    private static byte[] b;
    private static boolean q;
    private static int aL;
    private static int aM;
    private static int aN;
    private static int aO;
    private static int aP;
    private static int aQ;
    private static int aR;
    private static int aS;
    private static int aT;
    private static int aU;
    private long B;
    private static int aV;
    private static int aW;
    private static int aY;
    private static B[] Z;
    private String m;
    private static byte[] i;
    private long C;
    private static long c;
    private static int aZ;
    private static int ba;
    private static int bv;
    private static int ce;
    private static byte[] l;
    private int[] h;
    private static int bb;
    private static int cd;
    private static int bc;
    private static int bd;
    private static int[] l;
    private static int be;
    private static int bf;
    private static int bg;
    public static int B;
    private static boolean t;
    private char[] Code;
    private static Hashtable a;
    private byte[] h;
    private static int[] j;
    private static Code y;
    private static byte[] n;
    private static int bE;
    private String b;
    private int[] g;
    private static int bW;
    private String n;
    private String d;
    private Code h;
    private static String h;
    private Code g;
    private String[] Code;
    private Code n;
    private byte[] g;
    private Code G;
    private Code H;
    private static long J;
    private Code m;
    private static a Z;
    private short[][] Code;
    private static Hashtable b;
    private J a;
    private boolean bh;
    private B[] Code;
    private int bh;
    private Code O;
    private B[] I;
    private Code i;
    private static B[] J;
    private Code j;
    private static short[] J;
    private Code N;
    private static Hashtable Z;
    private Code k;
    private static Vector J;
    private static String e;
    private Code l;
    private static int bi;
    private int bl;
    private int bm;
    private int bn;
    private int bo;
    private int bp;
    private int bq;
    private int br;
    private static Code o;
    public static Browser Code;
    private HttpConnection Code;
    private Thread[] Code;
    private Command[] Code;
    private RecordStore Code;
    private static int[] m;
    private boolean x;
    private static int[] k;
    private Code q;
    private static byte Z;
    private FileConnection Code;
    private static B C;
    private static byte C;
    private static int[] p;
    private static boolean z;
    private static byte B;
    private DataInputStream Code;
    private DataInputStream I;
    private DataOutputStream I;
    private J Z;
    private J B;
    private J J;
    private Object[] Z;
    private Code r;
    private Graphics Code;
    private Code u;
    private static boolean K;
    private static Vector B;
    private static J C;
    private boolean M;
    private static boolean ah;
    private static boolean ap;
    private static int bw;
    private static Code w;
    private boolean N;
    private static int cg;
    private static boolean aB;
    private static int bx;
    private static int by;
    private static int bA;
    private static int bB;
    private static int bC;
    private static int bU;
    private static int bD;
    private static int bF;
    private static int bG;
    private static int bH;
    private static int bI;
    private static int bV;
    private static int ca;
    private static int bJ;
    private static int bK;
    private static int bL;
    private static int cb;
    private static byte[] j;
    private static boolean aj;
    private static String[] I;
    private static int bM;
    private static String j;
    private byte[][] Z;
    private static long e;
    private static boolean am;
    private static String[] Z;
    private static boolean ao;
    private static int bZ;
    private static int bN;
    private static int bO;
    private static int bP;
    private static int bQ;
    private static int bR;
    private static int bS;
    private static int bT;
    private static byte[] o;
    private static int bX;
    private static byte[] p;
    private static boolean aq;
    private static boolean ar;
    private static boolean ax;
    private static boolean az;
    private static boolean aA;
    private static boolean aC;
    public static boolean Z;
    private static boolean aD;
    private Code[] Z;
    private boolean aE;
    private boolean aF;
    private boolean aG;
    private boolean aH;
    private boolean aK;
    private boolean aL;
    private boolean aM;
    private boolean aN;
    private boolean aO;
    private SocketConnection Code;
    private boolean aP;
    private Code[] J;
    private boolean aQ;
    private static short[] Z;
    private static int[] r;
    private int[] t;
    private int[] u;
    private String q;
    private int cj;
    private int ck;
    private int cl;
    private int cm;
    private int cn;
    private int co;
    private int cp;
    private int cq;
    private int cr;
    private boolean bi;
    private int cs;
    private Font Code;
    private int[][] Z;
    private byte[][] J;
    private byte[][] B;
    private short[] B;
    private Code[] B;
    private int ct;
    private int cu;
    private int cv;
    private int cw;
    private boolean aR;
    private boolean aS;
    private boolean aT;
    private boolean aU;
    private boolean aV;
    private boolean aW;
    private boolean aX;
    private boolean aY;
    private boolean aZ;
    private boolean ba;
    private String o;
    private String p;
    private String r;
    private int cA;
    private int cx;
    private int cy;
    private int cz;
    private J b;
    private int cB;
    private int cC;
    private int cD;
    private int cE;
    private int cF;
    private int cG;
    private int cH;
    private int cI;
    private int cJ;
    private int cK;
    private boolean bb;
    private boolean bc;
    private boolean bd;
    private boolean be;
    private boolean bf;
    private boolean bg;
    
    private void H() {
        Code.p = new Code('\0', false);
        Code.Code = new f();
        (Code.Code = new J[6])[0] = Code(64, 0, 8);
        Code.Code[1] = Code(64, 1, 8);
        Code.Code[2] = Code(64, 0, 0);
        Code.Code[3] = Code(64, 1, 0);
        Code.Code[4] = Code(64, 0, 16);
        Code.Code[5] = Code(64, 1, 16);
        if ((Code.i = Code.Code.getAppProperty("OM-UA")) == null) {
            Code.i = Code.Code.getAppProperty("DOWNLOADED_WITH_USER_AGENT");
        }
        final String s = (Code.i == null) ? "" : Code.i.toLowerCase();
        final String g;
        final String s2 = ((g = g("microedition.platform")) == null) ? "" : g.toLowerCase();
        final String g2;
        final String s3 = ((g2 = g("device.model")) == null) ? "" : g2.toLowerCase();
        final int numAlphaLevels;
        Code.V = ((numAlphaLevels = Code.Code.numAlphaLevels()) > 2);
        Code.O = Code.Code.hasPointerEvents();
        Code.Code.hasPointerMotionEvents();
        Code.az = (g("microedition.io.file.FileConnection.version") != null);
        Code.cc = Code.Code.checkPermission("javax.microedition.io.Connector.file.read");
        Code.cd = Code.Code.checkPermission("javax.microedition.io.Connector.file.write");
        if (s.indexOf("lg/ku800/") >= 0) {
            Code.az = false;
        }
        if (s2.startsWith("vs")) {
            Code.B = 8;
        }
        if (s2.indexOf("nokia") >= 0 || s2.equals("siemens_sx1") || s2.equals("sendo x") || s2.equals("panasonic x700")) {
            Code.B = 0;
        }
        else if (b("com.siemens.mp.lcdui.Image")) {
            Code.B = 2;
        }
        else if (b("com.motorola.phonebook.PhoneBookRecord") || b("com.motorola.Dialer") || b("com.motorola.phone.Dialer") || b("com.motorola.graphics.j3d.Light") || b("com.motorola.lwt.ComponentScreen") || b("com.motorola.game.GameScreen") || b("com.motorola.funlight.FunLight") || b("com.motorola.multimedia.Lighting") || b("com.motorola.io.ConnectorEvent") || b("com.motorola.extensions.ScalableJPGImage") || g("batterylevel") != null || g("BatteryLevel") != null || b("com.mot.iden.multimedia.Lighting")) {
            Code.B = 1;
        }
        else if (s2.indexOf("sonyericsson") >= 0 || s2.equals("symbian os") || g("com.sonyericsson.IMEI") != null || g("com.sonyericsson.imei") != null) {
            Code.B = 3;
        }
        else if (b("com.samsung.util.AudioClip") || b("com.samsung.util.LCDLight") || b("com.samsung.util.SM") || b("com.samsung.util.SMS") || b("com.samsung.util.Vibration") || s3.startsWith("sgh")) {
            Code.B = 4;
        }
        else if ("rolltech java".equals(s3)) {
            Code.B = 13;
        }
        else if (s2.startsWith("zte-")) {
            Code.B = 14;
        }
        final boolean b = b("com.jblend.util.Case");
        g("microedition.profiles");
        final int width = ((Displayable)Code.Code).getWidth();
        final int height = ((Displayable)Code.Code).getHeight();
        final int numColors = Code.Code.numColors();
        final String g3;
        final boolean b2 = (g3 = g("microedition.configuration")) != null && g3.indexOf("CLDC-1.1") >= 0;
        switch (Code.B) {
            case 3: {
                if (s2.indexOf("t270") < 0 && s2.indexOf("t280") < 0) {
                    Code.R = true;
                }
                Code.J = -2;
                if (s2.indexOf("symbian") >= 0) {
                    Code.J = 0;
                    break;
                }
                if (s2.indexOf("p910") >= 0) {
                    Code.J = 0;
                    break;
                }
                if (s2.indexOf("m600") >= 0 || s2.indexOf("p1") >= 0 || s2.indexOf("p9") >= 0) {
                    Code.J = 2;
                    break;
                }
                if (b("com.sonyericsson.iapinfo.AccessPointEvent")) {
                    Code.J = -3;
                    break;
                }
                break;
            }
            case 0: {
                Code.J = -4;
                if (s2.indexOf("e61") >= 0 || s2.indexOf("e62") >= 0 || s2.indexOf("e63") >= 0 || s2.indexOf("e71") >= 0 || s2.indexOf("e72") >= 0 || s2.startsWith("nokia9300/") || s2.startsWith("nokia9300i/") || s2.startsWith("nokia9500/") || s2.startsWith("nokiac3-00/")) {
                    Code.J = 2;
                    Code.R = true;
                    Code.Code = "rtyfghvbnmuj";
                    Code.I = "1234567890*#";
                    Code.Z = true;
                }
                else if (s2.indexOf("n97") >= 0) {
                    Code.J = 2;
                    Code.R = true;
                    Code.Code = "qwertyuiopjh";
                    Code.I = "1234567890*#";
                    Code.Z = true;
                }
                else if (s2.indexOf("e55") >= 0) {
                    Code.J = 5;
                    Code.R = true;
                    Code.Code = "ertyuidfghjkcvbnm ";
                    Code.I = "112233445566778890";
                    Code.Z = true;
                }
                if (s2.startsWith("nokian") || s2.startsWith("nokiae") || g("com.nokia.mid.ui.version") != null || s2.startsWith("nokia6124") || s2.startsWith("nokia6120") || s2.startsWith("nokia6121") || s2.startsWith("nokia5700") || s2.startsWith("nokia6110") || s2.startsWith("nokia5500")) {
                    Code.R = true;
                }
                if (s2.startsWith("nokiae90-1/")) {
                    Code.R = false;
                    Code.Z = true;
                }
                if (s2.startsWith("nokia301.")) {
                    Code.P = true;
                    break;
                }
                break;
            }
            case 1: {
                if (b("com.mot.iden.multimedia.Lighting")) {
                    Code.J = -6;
                    break;
                }
                Code.J = -5;
                break;
            }
            case 2: {
                Code.J = -7;
                if (s2.startsWith("sk6r")) {
                    Code.J = 0;
                    break;
                }
                break;
            }
            case 4: {
                Code.J = -8;
                break;
            }
            default: {
                Code.J = -1;
                if (s2.indexOf("sunmicrosystems_wtk") >= 0) {
                    Code.R = true;
                    break;
                }
                if (s2.startsWith("lg-kc550")) {
                    Code.bA = 0;
                    Code.R = true;
                    break;
                }
                if (s2.startsWith("lg-gt360") || s2.startsWith("lg-ks360")) {
                    Code.bA = 1;
                    break;
                }
                if (Code.B != 8 || !s2.startsWith("vs")) {
                    if (s2.indexOf("motoq") >= 0) {
                        Code.R = false;
                        Code.J = 2;
                    }
                    else {
                        if (s2.indexOf("palm treo 700w") >= 0) {
                            Code.R = true;
                            Code.J = 2;
                            break;
                        }
                        if (!b && !s2.equals("jbed-fastdac") && s2.indexOf("windows") < 0 && s2.indexOf("intent") < 0 && (!s2.equals("jbed") || height <= 128 || width <= 128)) {
                            break;
                        }
                        if (Code.O) {
                            Code.bA = 0;
                            break;
                        }
                    }
                    Code.bA = 1;
                    break;
                }
                break;
            }
        }
        if (b("com.sprintpcs.util.System") && Code.J == -1) {
            Code.J = -9;
            Code.R = true;
        }
        if (Code.B == 0) {
            if (width < 176) {
                Code.aq = true;
            }
            if (width <= 128) {
                Code.bC = (Code.bB = 13);
            }
            else if (width <= 176) {
                Code.bC = (Code.bB = 17);
            }
            else if (width <= 240) {
                Code.bC = (Code.bB = 22);
            }
            else {
                Code.bC = (Code.bB = 28);
            }
            if (width == 176) {
                Code.R = true;
                Code.ca = 150;
            }
            if (width == 240 && Code.O) {
                Code.ay = true;
            }
            if (s2.indexOf("3220") >= 0) {
                Code.ac = true;
            }
            if (s2.startsWith("nokia6260/")) {
                Code.ar = true;
            }
            if (s2.startsWith("nokia6600/")) {
                Code.ar = true;
            }
            if (s2.startsWith("nokia6620/")) {
                Code.ar = true;
            }
            if (s2.startsWith("nokia6630/")) {
                final String s4 = s2;
                final String s5 = "/6.03.40";
                final String s6 = s4;
                if (s4 != null && s6.indexOf(47) >= 0 && s5.indexOf(47) >= 0 && s6.substring(s6.indexOf(47)).compareTo(s5.substring(s5.indexOf(47))) < 0) {
                    Code.az = false;
                }
                Code.aC = true;
            }
            if (s2.startsWith("nokia6670/")) {
                Code.ar = true;
            }
            if (s2.startsWith("nokia6680/")) {
                Code.aA = true;
            }
            if (s2.startsWith("nokia7610/")) {
                Code.ar = true;
            }
            if (s2.startsWith("nokia7710/")) {
                Code.ar = true;
            }
            if (s2.startsWith("nokia9300/") || s2.startsWith("nokia9300i/")) {
                Code.ar = true;
            }
            if (s2.startsWith("nokia9500/")) {
                Code.ar = true;
            }
            if (s2.startsWith("nokian72/") || s2.startsWith("nokian70/") || s2.startsWith("nokian70-1/")) {
                Code.at = true;
            }
        }
        if (Code.B == 3) {
            if (width <= 176) {
                Code.aq = true;
            }
            Code.bB = -22;
            Code.bC = 22;
            if (s2.indexOf("p910") >= 0) {
                Code.ax = true;
                Code.as = true;
            }
            if (s2.indexOf("symbian") >= 0) {
                Code.as = true;
            }
            if (b("javax.wireless.messaging.MultipartMessage") && !b("javax.microedition.amms.GlobalManager")) {
                Code.cb = 2475;
            }
            if (s2.startsWith("sonyericssonp1") || s2.startsWith("sonyericssonm600")) {
                Code.Code = "ertyuidfghjkcxvbnm \ufffd\ufffc";
                Code.I = "1122334455667788990*#";
            }
            if (width <= 176) {
                Code.av = true;
            }
            if (s2.startsWith("sonyericssonm600") || s2.startsWith("sonyericssong608") || s2.startsWith("sonyericssong700") || s2.startsWith("sonyericssong900") || s2.startsWith("sonyericssong958") || s2.startsWith("sonyericssonw960") || s2.startsWith("sonyericssonp990") || s2.startsWith("sonyericssonp1c/") || s2.startsWith("sonyericssonp1i/")) {
                Code.at = true;
            }
            Code.au = true;
        }
        if (Code.B == 1) {
            Code.az = (Code.az && Code.cc != 0 && Code.cd != 0);
            Code.cb = 1024;
            if (s2.indexOf("symbian") >= 0) {
                Code.as = true;
            }
            if (b) {
                Code.V = false;
                Code.Code = "ertdfgxcv+zb";
                Code.I = "1234567890*#";
            }
            if (b("com.mot.iden.multimedia.Lighting")) {
                Code.ap = true;
                Code.T = true;
                Code.U = true;
            }
        }
        if (Code.B == 4) {
            Code.Y = false;
            if (s3.endsWith("sgh-gt-b2700") || s3.startsWith("sgh-g400") || s3.startsWith("gt-c5510") || s3.startsWith("m7500") || s2.startsWith("s7220") || s2.startsWith("s7350") || s2.startsWith("sgh-t469") || s2.startsWith("sgh-t559") || s2.startsWith("samsung-gt-s7350i/")) {
                Code.O = false;
            }
            if (s2.equals("j2me") && numAlphaLevels == 2 && b2 && width == 240 && height == 286 && numColors == 65536) {
                Code.S = true;
                Code.cb = 256;
            }
            if (s2.startsWith("samsung-c3530/") || s2.startsWith("samsung-b3310/")) {
                Code.aw = true;
            }
            if (width == 320 && height == 186 && numColors == 65536 && numAlphaLevels == 65536) {
                Code.al = true;
            }
            if ((width == 128 && height == 144) || (width == 176 && height == 204) || (width == 220 && height == 160)) {
                Code.ap = true;
            }
            if (s2.startsWith("sgh-p310") || s.indexOf("x820") >= 0 || s.indexOf("sghd830") >= 0) {
                Code.az = false;
            }
            if (s2.startsWith("samsung gt-c3510") || s2.startsWith("samsung gt-b3410") || s2.startsWith("samsung gt-b5722") || s2.startsWith("samsung sgh-d980")) {
                Code.O = true;
            }
        }
        if (s2.indexOf("sxg75") >= 0 || s2.indexOf("ef81") >= 0) {
            Code.ag = true;
            Code.B = 2;
        }
        else if (Code.B == 2) {
            Code.U = true;
            if (width < 176) {
                Code.aq = true;
            }
        }
        if (Code.B == 13 && "qwerty".equals(g("device.keypad"))) {
            Code.J = 2;
            Code.R = true;
            Code.aD = true;
            Code.J = true;
        }
        if (Code.B == 14 && (s2.startsWith("zte-p80") || s2.startsWith("zte-f160"))) {
            Code.O = false;
        }
        if (Code.B == -1) {
            if (s2.startsWith("windows ce")) {
                Code.ag = true;
                Code.aB = true;
            }
            if (b) {
                if ((s2.equals("j2me") && width == 320 && height == 186) || (width == 240 && height == 268) || (width == 320 && height == 250)) {
                    final J code = Code(64, 0, 8);
                    final J code2 = Code(64, 1, 8);
                    final J code3 = Code(64, 1, 16);
                    if (code2.I("Abcdefg") <= code.I("Abcdefg") && code2.I("Abcdefg") <= code3.I("Abcdefg")) {
                        Code.ao = true;
                        Code.I = new byte[6][2048];
                        for (int i = 0; i < 6; ++i) {
                            for (int j = 0; j < 2048; ++j) {
                                Code.I[i][j] = -1;
                            }
                        }
                    }
                }
            }
            else if (s2.equals("j2me")) {
                Code.ag = true;
            }
            if (s2.equals("jbed")) {
                Code.ae = true;
            }
            if (s2.equals("jbed-fastdac")) {
                Code.ag = true;
                Code.cb = 260;
            }
            if (s2.equals("jbed-fastbcc") && width == 240 && height == 325 && numColors == 65536 && numAlphaLevels == 256 && b2) {
                Code.ce = 2;
                Code.O = true;
            }
            if (s2.startsWith("lg-kc510") || s2.startsWith("lg-kc550") || s2.startsWith("lg-kf600") || s2.startsWith("lg-kf780")) {
                Code.O = false;
            }
            if (Code(s2, "lg", "kf700") || Code(s2, "lg", "u250") || Code(s2, "lg", "ku250") || Code(s2, "lg", "ku380") || s.indexOf("lg-ke800") >= 0 || s2.startsWith("sagem-my850c") || s2.startsWith("sagem-mc2007") || s.indexOf("sagem-my700x") >= 0 || s.indexOf("huawei-vf710") >= 0 || s.indexOf("samsung-sphm520") >= 0 || s.indexOf("samsung-plsm520") >= 0 || s.indexOf("sgh-z710") >= 0) {
                Code.az = false;
            }
            if (s.indexOf("t-mobile vairy touch ii/") >= 0) {
                Code.O = true;
            }
        }
        b("com.sprintpcs.util.System");
        Z("mc");
        Z("md");
        X();
        final String h;
        if (J(1).length() == 0 && (h = h()) != null) {
            Code(1, h, true);
        }
        if (c("s")) {
            for (int k = 0; k < Code.Z.length; ++k) {
                c(Code.Z[k]);
            }
        }
        if (Code.ag) {
            Code.af = false;
        }
        else {
            B code4 = null;
            final int n = 4;
            final boolean b3 = false;
            try {
                code4 = Code(n, b3);
            }
            finally {}
            if (code4 != null && code4.Code.getWidth() == 1) {
                Code.af = true;
            }
            else {
                Code.af = false;
            }
        }
        System.gc();
        Label_3359: {
            if (Code.ap) {
                Code.a = Runtime.getRuntime().freeMemory() * 10L / 8L;
            }
            else {
                if (Code.aq && Code.a > 0L) {
                    break Label_3359;
                }
                final Vector vector = new Vector(Code.ca);
                int n2 = 0;
                try {
                    System.gc();
                    while (vector.size() <= Code.ca) {
                        vector.addElement(new byte[8192]);
                        ++n2;
                    }
                }
                finally {}
                System.gc();
                Code.a = (n2 << 13) + 4;
            }
            if (Code.B == 0 && Code.ca >= 256 && Code.a < 2097152L) {
                Code.W = true;
            }
            C((int)Code.a);
        }
        ac();
        ab();
        final Font defaultFont;
        int face;
        if ((face = (defaultFont = Font.getDefaultFont()).getFace()) == 0) {
            face = 32;
        }
        int size;
        if ((size = defaultFont.getSize()) != 16 && size != 0 && size != 8) {
            size = 0;
        }
        c(face, defaultFont.getStyle(), size);
        if (!Code.ax) {
            Code.Code.setFullScreenMode(true);
        }
        if (System.getProperty("microedition.pim.version") != null && b("javax.microedition.pim.PIM") && Code.Code.checkPermission("javax.microedition.pim.ContactList.read") != 0) {
            Code.aa = true;
        }
        Code.p.J(this);
        Code.Code.setCurrent((Displayable)Code.Code);
    }
    
    private void z() {
        if (this.C) {
            byte[] code = null;
            final Code j = Code.J;
            final String c = this.c;
            final String b = this.b;
            try {
                code = j.Code(c, b);
            }
            finally {}
            Code.Code.I();
            int o = J(this.az);
            if (code != null) {
                final int i = I(code);
                Code.O = o;
                Z(code, i);
                o = Code.O;
            }
            else {
                Z((byte[])null, 0);
            }
            Code.Code.Code(o, 7);
            return;
        }
        if (this.b) {
            this.h.ah();
            return;
        }
        final int n = 0;
        final int n2 = 20;
        try {
            I(n, n2);
            final DataInputStream dataInputStream;
            (dataInputStream = new DataInputStream(Code("/a"))).readInt();
            Code.ao = dataInputStream.readUnsignedShort();
            int unsignedShort = dataInputStream.readUnsignedShort();
            int unsignedShort2 = dataInputStream.readUnsignedShort();
            final int unsignedShort3 = dataInputStream.readUnsignedShort();
            Code.d = new int[(Code.aq = unsignedShort + unsignedShort2) + unsignedShort3];
            while (unsignedShort2-- > 0) {
                Code.d[unsignedShort++] = dataInputStream.readInt();
            }
            Code.Z = new int[dataInputStream.readUnsignedByte()];
            for (int k = 0; k < Code.Z.length; ++k) {
                Code.Z[k] = dataInputStream.readUnsignedShort();
            }
            Code.o = Code.Z[1];
            Code.p = Code.Z[6];
            Code.q = Code.Z[7];
            Code.w = Code.Z[2];
            Code.u = Code.Z[9];
            Code.v = Code.Z[10];
            Code.r = Code.Z[12];
            Code.s = Code.Z[13];
            Code.t = Code.Z[14];
            g();
            Code.a = new int[dataInputStream.readUnsignedByte()];
            for (int l = 0; l < Code.a.length; ++l) {
                Code.a[l] = (dataInputStream.readUnsignedByte() << 16 | dataInputStream.readUnsignedShort());
            }
            Code.b = new int[dataInputStream.readUnsignedShort() << 2];
            for (int n3 = 0; n3 < Code.b.length; n3 += 4) {
                final int int1 = dataInputStream.readInt();
                Code.b[n3] = int1;
                Code.b[n3 + 1] = int1 + dataInputStream.readUnsignedShort();
                Code.b[n3 + 2] = dataInputStream.readUnsignedShort();
                Code.b[n3 + 3] = int1 + dataInputStream.readUnsignedShort();
            }
            Code.c = new int[dataInputStream.readUnsignedByte()];
            for (int n4 = 0; n4 < Code.c.length; ++n4) {
                Code.c[n4] = (dataInputStream.readUnsignedByte() << 16 | dataInputStream.readUnsignedShort());
            }
            Code.Code = new short[dataInputStream.readUnsignedByte()];
            for (int n5 = 0; n5 < Code.Code.length; ++n5) {
                Code.Code[n5] = dataInputStream.readShort();
            }
            final int n6 = dataInputStream.readUnsignedByte() << 16 | dataInputStream.readUnsignedShort();
            Code.G = (dataInputStream.readUnsignedByte() << 16 | dataInputStream.readUnsignedShort());
            Code.H = (dataInputStream.readUnsignedByte() << 16 | dataInputStream.readUnsignedShort());
            Code.K = (dataInputStream.readUnsignedByte() << 16 | dataInputStream.readUnsignedShort());
            dataInputStream.readFully(Code.I = new byte[Code.H + Code.K], 0, Code.I.length);
            u(Code.I.length * 100 / n6);
            Code.ai = 16384;
            Code.ak = 4;
            g(1);
            Code.al = 32768;
            Code.an = 4;
            Code.Y = b(2, -2);
            Code.aa = b(2, -2);
            Code.ab = b(2, -2);
            Code.ap = Code.al + 3;
            i(0);
            Code.ac = Code.R;
            final int b2 = b(3, Code.p);
            a(b2 - 2, Code.ad = b2);
            a(Code.ad + 1, Code.ac);
            a(Code.ad + 2, 0);
            int aq = Code.aq;
            int n7 = Code.H + Code.K;
            while (n7 < n6) {
                int n8 = dataInputStream.readByte() & 0xFF;
                ++n7;
                if (n8 == 255) {
                    n8 += dataInputStream.readUnsignedShort();
                    n7 += 2;
                }
                int n9;
                if (n8 == 0) {
                    n9 = Code.ad;
                }
                else {
                    i(n8);
                    dataInputStream.readFully(Code.Z, Code.S, n8);
                    a((n9 = b(3, Code.p)) - 2, n9);
                    a(n9 + 1, Code.R);
                    a(n9 + 2, J(Code.R, n8));
                }
                Code.d[aq++] = n9;
                u((n7 += n8) * 100 / n6);
            }
            Code.R = 0;
            if (Z(Code.ai) == null) {
                l(Code.ai >>> 14);
            }
            else {
                c(Code.ai >>> 14, Code.ai & 0x3FFF);
                Code.ai = (Code.ai >>> 14) + 1 << 14;
            }
            Code.ak = ((Code.aj = Code.ai) >>> 14) + 3;
            Code.ae = b(2, Code.Z[22]);
            final int n10;
            Code.am = (n10 = (Code.al >>> 15) + 1) << 15;
            Code.Code[n10] = Code.Code[n10 - 1];
            Code.Code[n10 - 1] = new int[Code.al & 0x7FFF];
            System.arraycopy(Code.Code[n10], 0, Code.Code[n10 - 1], 0, Code.al & 0x7FFF);
            final int am = Code.am;
            Z(Code(am), am & 0x7FFF, Code.al & 0x7FFF);
            Code.al = Code.am;
            a(Code.Y, b(16, -1));
            a(Code.aa, b(16, -1));
            a(Code.ab, b(16, -1));
            for (int n11 = 0; n11 < unsignedShort3; ++n11) {
                Code.V = Code.d[Code.aq + n11];
                h(Code.aa);
            }
            Code.V = 0;
            a(Code.ae, Code("Out of memory"));
            C(2, Code.bE);
            C(0, 0);
            final int n12 = 1;
            int n13;
            if (w() != 0) {
                w();
                n13 = 1;
            }
            else {
                n13 = 0;
            }
            C(n12, n13);
            if (!Code.X) {
                String s = B("resolution");
                if ("ri".equals(s)) {
                    s = C();
                }
                if ("hqvga".equals(s)) {
                    Code.W = true;
                }
                if ("true".equals(Code.Code.getAppProperty("OM-Low-Mem")) && Code.ab) {
                    Code.W = true;
                }
                Code.X = true;
            }
            C(3, (int)(Code.W ? 1 : 0));
            final int n14 = 4;
            x();
            C(n14, x());
            C(5, Code.ce);
            C(6, Code.bH);
            int n15;
            if (Code.J == 0 && !Code.O) {
                n15 = 3;
            }
            else if (Code.bA == 0 && Code.J != 0) {
                n15 = 2;
            }
            else {
                n15 = 1;
            }
            C(7, n15);
            C(8, (int)(Code.O ? 1 : 0));
            C(9, Code.bD);
            C(10, (int)((Code.R & true) ? 1 : 0));
            if (Code.bB != 0 || Code.bC != 0) {
                final int a;
                a(a = a(2, 48), Code.bB);
                a(a + 1, Code.bC);
                Code.d[Code.ao - 1] = a;
            }
            Code.an = (Code.am = true);
            C(12, (int)((s() < 0) ? 1 : 0));
            final int n16 = 13;
            int n17 = switch (s()) {
                case -9,  -8,  -3,  -2 -> 1;
                default -> 0;
            };
            C(n16, n17);
            final int n18 = 14;
            int n19 = switch (s()) {
                case -7,  -5,  -4,  -3,  -1 -> 35;
                default -> 42;
            };
            C(n18, n19);
            C(15, t());
            final int n20 = 16;
            int t = switch (s()) {
                case -2 -> 35;
                case -4,  -3 -> 48;
                default -> t();
            };
            C(n20, t);
            final int n21 = 17;
            int n22 = switch (s()) {
                case -3 -> 42;
                default -> 48;
            };
            C(n21, n22);
            C(11, (int)((C().equals("hqvga") ^ true) ? 1 : 0));
            Code.c.b(0);
            int n23 = 0;
            int n24 = 0;
            if (Code.c.b(57) == 0) {
                n23 = 1;
                n24 = (int)System.currentTimeMillis() + 200;
            }
            else {
                f();
                Code.Code = I();
            }
            Code.Code.repaint();
            int n25 = 1;
            int n26 = 0;
            int n27 = 0;
            while (!c()) {
                monitorenter(this);
                Code.f = false;
                Code.h = false;
                Label_1810: {
                    if (!Code.j) {
                        break Label_1810;
                    }
                    final f code2 = Code.Code;
                    try {
                        if (!code2.Code()) {
                            if (n25 != 0) {
                                n26 = 1;
                                Code.f = true;
                                Code.h = true;
                            }
                            else {
                                Code.j = false;
                                Code.f = true;
                            }
                        }
                        this.notifyAll();
                        if (n26 == 0) {
                            while (true) {
                                if (Code.f && !Code.h) {
                                    this.wait();
                                }
                                else {
                                    if (Code.aA >= 0 || Code.Code.I()) {
                                        break;
                                    }
                                    if (Code.j) {
                                        n26 = 1;
                                        break;
                                    }
                                    if (!Code.g) {
                                        if (Code.i && (n27 = Code.aB - (int)System.currentTimeMillis()) <= 0) {
                                            Code.i = false;
                                            Code.aA = 1;
                                            break;
                                        }
                                        if (n23 != 0 && (n27 = n24 - (int)System.currentTimeMillis()) <= 0) {
                                            Code.aA = 57;
                                            break;
                                        }
                                        if (n25 != 0 || Code.l || Code.m != Code.n) {
                                            n26 = 1;
                                            break;
                                        }
                                    }
                                    if (!Code.g && (Code.i || n23 != 0)) {
                                        this.wait(n27);
                                    }
                                    else {
                                        this.wait();
                                    }
                                }
                            }
                        }
                        Code.f = true;
                    }
                    finally {
                        monitorexit(this);
                    }
                }
                if (n26 != 0) {
                    n26 = 0;
                    n25 = 0;
                    this.m();
                }
                else {
                    n();
                    n25 = 1;
                    if (Code.aA == 57) {
                        if (Code.c.b(Code.aA) == 0) {
                            n23 = 1;
                            n24 = (int)System.currentTimeMillis() + 200;
                        }
                        else {
                            f();
                            Code.Code = I();
                            h(v(), Code.b.a());
                        }
                    }
                    else {
                        Code.c.b(Code.aA);
                    }
                }
                Code.aA = -1;
            }
        }
        finally {}
        Code.f = true;
        Code.h = false;
        Code((Object)this);
        final Enumeration elements = Code.Z.elements();
        while (elements.hasMoreElements()) {
            ((C)elements.nextElement()).I();
        }
        Code.Z.removeAllElements();
        Code.Code.Code();
    }
    
    private static void t(int i) {
        ++Code.av;
        Code.at = 0;
        Code.au = 0;
        Code.ay = ((i >= 0) ? i : 0);
        n(Code.aC);
        for (i = 1; i < Code.e.length; ++i) {
            if (Code.e[i] != 0) {
                n(Code.e[i]);
            }
        }
        n(Code.A);
        n(Code.L);
        n(Code.M);
        n(Code.N);
        n(Code.O);
        n(Code.P);
        n(Code.Q);
        n(Code.T);
        n(Code.U);
        n(Code.V);
        o(Code.R);
        o(Code.W);
        o(Code.X);
        Code(Code.J, 0, Code.D);
        Code(Code.d, 0, Code.ao);
        for (i = 0; i < Code.F; i += 5) {
            n(Code.C[i]);
        }
        i = (Code.ap & 0xFFFF8000) + Code.Code[Code.ap >>> 15].length;
        for (int j = Code.ap; j < i; j += l(j - 3) + 3) {
            n(j);
        }
        k();
        while (Code.ax >= 0) {
            int k = Code.ax;
            boolean b = false;
            Code.ax = -1;
            while (k >= 0) {
                final int ax;
                k = l((ax = k) - 2);
                final int l = l(ax);
                int m = l(ax + 1);
                int l2 = l(ax + 2);
                if (m != 0 && l(m - 2) == 0) {
                    m = 0;
                }
                if (l2 != 0 && l(l2 - 2) == 0) {
                    l2 = 0;
                }
                if (m != 0 || l2 != 0) {
                    if (l(l - 2) != 0) {
                        continue;
                    }
                    n(l);
                    k();
                    b = true;
                }
                else {
                    a(ax - 2, Code.ax);
                    Code.ax = ax;
                }
            }
            if (!b) {
                Code.ax = -1;
                break;
            }
        }
        p(Code.Y);
        p(Code.aa);
        p(Code.ab);
        k();
        int am = Code.am;
        int n = Code.am >>> 15;
    Label_0419:
        while (Code.Code[n] != null) {
            int n2 = 0;
            final int[] array = Code.Code[n];
            while (n2 + 3 <= 32768) {
                final int n3 = array[n2 + 3 - 3];
                final int n4;
                if ((n4 = array[n2 + 3 - 1]) == 0) {
                    ++n;
                    continue Label_0419;
                }
                if (array[n2 + 3 - 2] != 0) {
                    int n5 = n3;
                    if (n4 == Code.r || n4 == Code.s) {
                        n5 = array[n2 + 3] + 1;
                    }
                    if (am >>> 15 != am + 3 + n5 - 1 >> 15) {
                        am = (am >>> 15) + 1 << 15;
                    }
                    array[n2 + 3 - 2] = am + 3;
                    if ((n << 15) + n2 != am && Code(n4)) {
                        final int n6 = (n << 15) + n2 + 3;
                        final int code = am + 3;
                        final Object code2;
                        boolean b2;
                        boolean b4;
                        boolean b3;
                        if ((b2 = ((code2 = Code(n6)) instanceof Code)) && (b2 = ((Code)code2).bi) && (b3 = (b4 = (b2 = ((Code)code2).bh)))) {
                            if (((Code)code2).bg) {
                                b4 = (b3 = (b2 = false));
                            }
                            if (b3) {
                                if (((Code)code2).bf) {
                                    b2 = (b4 = false);
                                }
                                if (b4) {
                                    boolean b7;
                                    boolean b6;
                                    final boolean b5 = b6 = (b7 = (b2 = ((Code)code2).be));
                                    boolean b8;
                                    if ((b8 = b5) && b5) {
                                        if (((Code)code2).bd) {
                                            b6 = (b8 = (b7 = (b2 = false)));
                                        }
                                        if (b8 && b6) {
                                            if (((Code)code2).bc) {
                                                b2 = (b7 = false);
                                            }
                                            if (b7) {
                                                b2 = ((Code)code2).bb;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (b2) {
                            ((Code)code2).cF = code;
                        }
                        else {
                            boolean b9;
                            boolean b11;
                            boolean b10;
                            if ((b9 = (code2 instanceof Code)) && (b9 = ((Code)code2).bi) && (b10 = (b11 = (b9 = ((Code)code2).bh)))) {
                                if (((Code)code2).bg) {
                                    b11 = (b10 = (b9 = false));
                                }
                                if (b10) {
                                    if (((Code)code2).bf) {
                                        b9 = (b11 = false);
                                    }
                                    if (b11) {
                                        boolean b16;
                                        boolean b15;
                                        boolean b14;
                                        boolean b13;
                                        final boolean b12 = b13 = (b14 = (b15 = (b16 = (b9 = ((Code)code2).be))));
                                        boolean b17;
                                        if ((b17 = b12) && b12) {
                                            if (((Code)code2).bd) {
                                                b13 = (b17 = (b14 = (b15 = (b16 = (b9 = false)))));
                                            }
                                            if (b17 && b13) {
                                                if (((Code)code2).bc) {
                                                    b15 = (b14 = (b16 = (b9 = false)));
                                                }
                                                if (b14) {
                                                    if (((Code)code2).bb) {
                                                        b16 = (b15 = (b9 = false));
                                                    }
                                                    if (b15) {
                                                        if (((Code)code2).ba) {
                                                            b9 = (b16 = false);
                                                        }
                                                        boolean b34;
                                                        boolean b33;
                                                        boolean b32;
                                                        boolean b31;
                                                        boolean b30;
                                                        boolean b29;
                                                        boolean b28;
                                                        boolean b27;
                                                        boolean b26;
                                                        boolean b25;
                                                        boolean b24;
                                                        boolean b23;
                                                        boolean b22;
                                                        boolean b21;
                                                        boolean b20;
                                                        boolean b19;
                                                        boolean b18;
                                                        if (b16 && (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b25 = (b26 = (b27 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = ((Code)code2).aZ))))))))))))))))))) {
                                                            if (((Code)code2).aY) {
                                                                b19 = (b18 = (b20 = (b21 = (b22 = (b23 = (b24 = (b25 = (b26 = (b27 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false)))))))))))))))));
                                                            }
                                                            if (b18) {
                                                                if (((Code)code2).aX) {
                                                                    b20 = (b19 = (b21 = (b22 = (b23 = (b24 = (b25 = (b26 = (b27 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false))))))))))))))));
                                                                }
                                                                if (b19 && b20) {
                                                                    if (((Code)code2).aW) {
                                                                        b22 = (b21 = (b23 = (b24 = (b25 = (b26 = (b27 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false))))))))))))));
                                                                    }
                                                                    if (b21) {
                                                                        if (((Code)code2).aV) {
                                                                            b23 = (b22 = (b24 = (b25 = (b26 = (b27 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false)))))))))))));
                                                                        }
                                                                        if (b22) {
                                                                            if (((Code)code2).aU) {
                                                                                b24 = (b23 = (b25 = (b26 = (b27 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false))))))))))));
                                                                            }
                                                                            if (b23) {
                                                                                if (((Code)code2).aT) {
                                                                                    b25 = (b24 = (b26 = (b27 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false)))))))))));
                                                                                }
                                                                                if (b24) {
                                                                                    if (((Code)code2).aS) {
                                                                                        b26 = (b25 = (b27 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false))))))))));
                                                                                    }
                                                                                    if (b25) {
                                                                                        if (((Code)code2).aR) {
                                                                                            b27 = (b26 = (b28 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false)))))))));
                                                                                        }
                                                                                        if (b26) {
                                                                                            if (((Code)code2).aQ) {
                                                                                                b28 = (b27 = (b29 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false))))))));
                                                                                            }
                                                                                            if (b27) {
                                                                                                if (((Code)code2).aP) {
                                                                                                    b29 = (b28 = (b30 = (b31 = (b32 = (b33 = (b34 = (b9 = false)))))));
                                                                                                }
                                                                                                if (b28) {
                                                                                                    if (((Code)code2).aO) {
                                                                                                        b30 = (b29 = (b31 = (b32 = (b33 = (b34 = (b9 = false))))));
                                                                                                    }
                                                                                                    if (b29) {
                                                                                                        if (((Code)code2).aN) {
                                                                                                            b31 = (b30 = (b32 = (b33 = (b34 = (b9 = false)))));
                                                                                                        }
                                                                                                        if (b30) {
                                                                                                            if (((Code)code2).aM) {
                                                                                                                b32 = (b31 = (b33 = (b34 = (b9 = false))));
                                                                                                            }
                                                                                                            if (b31) {
                                                                                                                if (((Code)code2).aL) {
                                                                                                                    b33 = (b32 = (b34 = (b9 = false)));
                                                                                                                }
                                                                                                                if (b32) {
                                                                                                                    if (((Code)code2).aK) {
                                                                                                                        b34 = (b33 = (b9 = false));
                                                                                                                    }
                                                                                                                    if (b33 && b34) {
                                                                                                                        boolean b46;
                                                                                                                        boolean b45;
                                                                                                                        boolean b44;
                                                                                                                        boolean b43;
                                                                                                                        boolean b42;
                                                                                                                        boolean b41;
                                                                                                                        boolean b40;
                                                                                                                        boolean b39;
                                                                                                                        boolean b38;
                                                                                                                        boolean b37;
                                                                                                                        boolean b36;
                                                                                                                        final boolean b35 = b36 = (b37 = (b38 = (b39 = (b40 = (b41 = (b42 = (b43 = (b44 = (b45 = (b46 = (b9 = ((Code)code2).aI)))))))))));
                                                                                                                        boolean b47;
                                                                                                                        if ((b47 = b35) && b35) {
                                                                                                                            if (((Code)code2).aH) {
                                                                                                                                b36 = (b47 = (b37 = (b38 = (b39 = (b40 = (b41 = (b42 = (b43 = (b44 = (b45 = (b46 = (b9 = false))))))))))));
                                                                                                                            }
                                                                                                                            if (b47) {
                                                                                                                                if (((Code)code2).aG) {
                                                                                                                                    b37 = (b36 = (b38 = (b39 = (b40 = (b41 = (b42 = (b43 = (b44 = (b45 = (b46 = (b9 = false)))))))))));
                                                                                                                                }
                                                                                                                                if (b36) {
                                                                                                                                    if (((Code)code2).aF) {
                                                                                                                                        b38 = (b37 = (b39 = (b40 = (b41 = (b42 = (b43 = (b44 = (b45 = (b46 = (b9 = false))))))))));
                                                                                                                                    }
                                                                                                                                    if (b37 && b38) {
                                                                                                                                        if (((Code)code2).aE) {
                                                                                                                                            b40 = (b39 = (b41 = (b42 = (b43 = (b44 = (b45 = (b46 = (b9 = false))))))));
                                                                                                                                        }
                                                                                                                                        if (b39) {
                                                                                                                                            if (((Code)code2).N) {
                                                                                                                                                b41 = (b40 = (b42 = (b43 = (b44 = (b45 = (b46 = (b9 = false)))))));
                                                                                                                                            }
                                                                                                                                            if (b40) {
                                                                                                                                                if (((Code)code2).M) {
                                                                                                                                                    b42 = (b41 = (b43 = (b44 = (b45 = (b46 = (b9 = false))))));
                                                                                                                                                }
                                                                                                                                                if (b41) {
                                                                                                                                                    if (((Code)code2).L) {
                                                                                                                                                        b43 = (b42 = (b44 = (b45 = (b46 = (b9 = false)))));
                                                                                                                                                    }
                                                                                                                                                    if (b42) {
                                                                                                                                                        if (((Code)code2).y) {
                                                                                                                                                            b44 = (b43 = (b45 = (b46 = (b9 = false))));
                                                                                                                                                        }
                                                                                                                                                        if (b43) {
                                                                                                                                                            if (((Code)code2).x) {
                                                                                                                                                                b45 = (b44 = (b46 = (b9 = false)));
                                                                                                                                                            }
                                                                                                                                                            if (b44) {
                                                                                                                                                                if (((Code)code2).w) {
                                                                                                                                                                    b46 = (b45 = (b9 = false));
                                                                                                                                                                }
                                                                                                                                                                if (b45) {
                                                                                                                                                                    if (((Code)code2).a) {
                                                                                                                                                                        b9 = (b46 = false);
                                                                                                                                                                    }
                                                                                                                                                                    if (b46) {
                                                                                                                                                                        b9 = ((Code)code2).d;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (b9) {
                                ((Code)code2).bk = code;
                            }
                            else {
                                boolean b48;
                                if ((b48 = (code2 instanceof B)) && ((B)code2).I) {
                                    b48 = false;
                                }
                                if (b48) {
                                    ((B)code2).Code = code;
                                }
                            }
                        }
                    }
                    am += n5 + 3;
                }
                else if (Code(n4)) {
                    ++Code.aw;
                    final Object o;
                    boolean b49;
                    boolean b51;
                    boolean b50;
                    if ((b49 = ((o = Code.Code[array[n2 + 3]]) instanceof Code)) && (b49 = ((Code)o).bi) && (b50 = (b51 = (b49 = ((Code)o).bh)))) {
                        if (((Code)o).bg) {
                            b51 = (b50 = (b49 = false));
                        }
                        if (b50) {
                            if (((Code)o).bf) {
                                b49 = (b51 = false);
                            }
                            if (b51) {
                                boolean b54;
                                boolean b53;
                                final boolean b52 = b53 = (b54 = (b49 = ((Code)o).be));
                                boolean b55;
                                if ((b55 = b52) && b52) {
                                    if (((Code)o).bd) {
                                        b53 = (b55 = (b54 = (b49 = false)));
                                    }
                                    if (b55 && b53) {
                                        if (((Code)o).bc) {
                                            b49 = (b54 = false);
                                        }
                                        if (b54) {
                                            b49 = ((Code)o).bb;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (b49) {
                        ((Code)o).aC();
                    }
                    else {
                        boolean b56;
                        boolean b58;
                        boolean b57;
                        if ((b56 = (o instanceof Code)) && (b56 = ((Code)o).bi) && (b57 = (b58 = (b56 = ((Code)o).bh)))) {
                            if (((Code)o).bg) {
                                b58 = (b57 = (b56 = false));
                            }
                            if (b57) {
                                if (((Code)o).bf) {
                                    b56 = (b58 = false);
                                }
                                if (b58) {
                                    boolean b63;
                                    boolean b62;
                                    boolean b61;
                                    boolean b60;
                                    final boolean b59 = b60 = (b61 = (b62 = (b63 = (b56 = ((Code)o).be))));
                                    boolean b64;
                                    if ((b64 = b59) && b59) {
                                        if (((Code)o).bd) {
                                            b60 = (b64 = (b61 = (b62 = (b63 = (b56 = false)))));
                                        }
                                        if (b64 && b60) {
                                            if (((Code)o).bc) {
                                                b62 = (b61 = (b63 = (b56 = false)));
                                            }
                                            if (b61) {
                                                if (((Code)o).bb) {
                                                    b63 = (b62 = (b56 = false));
                                                }
                                                if (b62) {
                                                    if (((Code)o).ba) {
                                                        b56 = (b63 = false);
                                                    }
                                                    boolean b81;
                                                    boolean b80;
                                                    boolean b79;
                                                    boolean b78;
                                                    boolean b77;
                                                    boolean b76;
                                                    boolean b75;
                                                    boolean b74;
                                                    boolean b73;
                                                    boolean b72;
                                                    boolean b71;
                                                    boolean b70;
                                                    boolean b69;
                                                    boolean b68;
                                                    boolean b67;
                                                    boolean b66;
                                                    boolean b65;
                                                    if (b63 && (b65 = (b66 = (b67 = (b68 = (b69 = (b70 = (b71 = (b72 = (b73 = (b74 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = ((Code)o).aZ))))))))))))))))))) {
                                                        if (((Code)o).aY) {
                                                            b66 = (b65 = (b67 = (b68 = (b69 = (b70 = (b71 = (b72 = (b73 = (b74 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false)))))))))))))))));
                                                        }
                                                        if (b65) {
                                                            if (((Code)o).aX) {
                                                                b67 = (b66 = (b68 = (b69 = (b70 = (b71 = (b72 = (b73 = (b74 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false))))))))))))))));
                                                            }
                                                            if (b66 && b67) {
                                                                if (((Code)o).aW) {
                                                                    b69 = (b68 = (b70 = (b71 = (b72 = (b73 = (b74 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false))))))))))))));
                                                                }
                                                                if (b68) {
                                                                    if (((Code)o).aV) {
                                                                        b70 = (b69 = (b71 = (b72 = (b73 = (b74 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false)))))))))))));
                                                                    }
                                                                    if (b69) {
                                                                        if (((Code)o).aU) {
                                                                            b71 = (b70 = (b72 = (b73 = (b74 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false))))))))))));
                                                                        }
                                                                        if (b70) {
                                                                            if (((Code)o).aT) {
                                                                                b72 = (b71 = (b73 = (b74 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false)))))))))));
                                                                            }
                                                                            if (b71) {
                                                                                if (((Code)o).aS) {
                                                                                    b73 = (b72 = (b74 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false))))))))));
                                                                                }
                                                                                if (b72) {
                                                                                    if (((Code)o).aR) {
                                                                                        b74 = (b73 = (b75 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false)))))))));
                                                                                    }
                                                                                    if (b73) {
                                                                                        if (((Code)o).aQ) {
                                                                                            b75 = (b74 = (b76 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false))))))));
                                                                                        }
                                                                                        if (b74) {
                                                                                            if (((Code)o).aP) {
                                                                                                b76 = (b75 = (b77 = (b78 = (b79 = (b80 = (b81 = (b56 = false)))))));
                                                                                            }
                                                                                            if (b75) {
                                                                                                if (((Code)o).aO) {
                                                                                                    b77 = (b76 = (b78 = (b79 = (b80 = (b81 = (b56 = false))))));
                                                                                                }
                                                                                                if (b76) {
                                                                                                    if (((Code)o).aN) {
                                                                                                        b78 = (b77 = (b79 = (b80 = (b81 = (b56 = false)))));
                                                                                                    }
                                                                                                    if (b77) {
                                                                                                        if (((Code)o).aM) {
                                                                                                            b79 = (b78 = (b80 = (b81 = (b56 = false))));
                                                                                                        }
                                                                                                        if (b78) {
                                                                                                            if (((Code)o).aL) {
                                                                                                                b80 = (b79 = (b81 = (b56 = false)));
                                                                                                            }
                                                                                                            if (b79) {
                                                                                                                if (((Code)o).aK) {
                                                                                                                    b81 = (b80 = (b56 = false));
                                                                                                                }
                                                                                                                if (b80 && b81) {
                                                                                                                    boolean b93;
                                                                                                                    boolean b92;
                                                                                                                    boolean b91;
                                                                                                                    boolean b90;
                                                                                                                    boolean b89;
                                                                                                                    boolean b88;
                                                                                                                    boolean b87;
                                                                                                                    boolean b86;
                                                                                                                    boolean b85;
                                                                                                                    boolean b84;
                                                                                                                    boolean b83;
                                                                                                                    final boolean b82 = b83 = (b84 = (b85 = (b86 = (b87 = (b88 = (b89 = (b90 = (b91 = (b92 = (b93 = (b56 = ((Code)o).aI)))))))))));
                                                                                                                    boolean b94;
                                                                                                                    if ((b94 = b82) && b82) {
                                                                                                                        if (((Code)o).aH) {
                                                                                                                            b83 = (b94 = (b84 = (b85 = (b86 = (b87 = (b88 = (b89 = (b90 = (b91 = (b92 = (b93 = (b56 = false))))))))))));
                                                                                                                        }
                                                                                                                        if (b94) {
                                                                                                                            if (((Code)o).aG) {
                                                                                                                                b84 = (b83 = (b85 = (b86 = (b87 = (b88 = (b89 = (b90 = (b91 = (b92 = (b93 = (b56 = false)))))))))));
                                                                                                                            }
                                                                                                                            if (b83) {
                                                                                                                                if (((Code)o).aF) {
                                                                                                                                    b85 = (b84 = (b86 = (b87 = (b88 = (b89 = (b90 = (b91 = (b92 = (b93 = (b56 = false))))))))));
                                                                                                                                }
                                                                                                                                if (b84 && b85) {
                                                                                                                                    if (((Code)o).aE) {
                                                                                                                                        b87 = (b86 = (b88 = (b89 = (b90 = (b91 = (b92 = (b93 = (b56 = false))))))));
                                                                                                                                    }
                                                                                                                                    if (b86) {
                                                                                                                                        if (((Code)o).N) {
                                                                                                                                            b88 = (b87 = (b89 = (b90 = (b91 = (b92 = (b93 = (b56 = false)))))));
                                                                                                                                        }
                                                                                                                                        if (b87) {
                                                                                                                                            if (((Code)o).M) {
                                                                                                                                                b89 = (b88 = (b90 = (b91 = (b92 = (b93 = (b56 = false))))));
                                                                                                                                            }
                                                                                                                                            if (b88) {
                                                                                                                                                if (((Code)o).L) {
                                                                                                                                                    b90 = (b89 = (b91 = (b92 = (b93 = (b56 = false)))));
                                                                                                                                                }
                                                                                                                                                if (b89) {
                                                                                                                                                    if (((Code)o).y) {
                                                                                                                                                        b91 = (b90 = (b92 = (b93 = (b56 = false))));
                                                                                                                                                    }
                                                                                                                                                    if (b90) {
                                                                                                                                                        if (((Code)o).x) {
                                                                                                                                                            b92 = (b91 = (b93 = (b56 = false)));
                                                                                                                                                        }
                                                                                                                                                        if (b91) {
                                                                                                                                                            if (((Code)o).w) {
                                                                                                                                                                b93 = (b92 = (b56 = false));
                                                                                                                                                            }
                                                                                                                                                            if (b92) {
                                                                                                                                                                if (((Code)o).a) {
                                                                                                                                                                    b56 = (b93 = false);
                                                                                                                                                                }
                                                                                                                                                                if (b93) {
                                                                                                                                                                    b56 = ((Code)o).d;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (b56) {
                            ((Code)o).x();
                            Code.I.removeElement(o);
                            if (o == Code.d) {
                                Code.d = null;
                            }
                        }
                        else {
                            boolean b95;
                            if ((b95 = (o instanceof B)) && ((B)o).I) {
                                b95 = false;
                            }
                            if (b95) {
                                ((B)o).Code = 0;
                            }
                        }
                    }
                    if (o == Code.Code && Code.I == 0) {
                        Label_2392: {
                            if (!Code.au) {
                                break Label_2392;
                            }
                            final TextBox code3 = Code.Code;
                            final String string = "";
                            try {
                                code3.setString(string);
                                Code.Code.setMaxSize(1);
                                Code.Code = null;
                            }
                            finally {}
                        }
                    }
                    Code.Code[array[n2 + 3]] = null;
                }
                n2 += n3 + 3;
            }
            ++n;
        }
        int an;
        for (an = Code.an; Code.Code[an - 2] == null; --an) {}
        while (Code.Code[an - 2] != null) {
            ++an;
        }
        int n7 = an << 15;
        for (int an2 = Code.an; an2 < Code.Code.length && Code.Code[an2] != null; ++an2) {
            final int[] array2;
            if ((array2 = Code.Code[an2])[1] != 0) {
                array2[1] = n7 + 3;
                n7 += 32768;
            }
            else {
                Code.Code[an2] = null;
            }
        }
        int aj = Code.aj;
        int n8 = Code.aj >>> 14;
        Label_2536:
        while (Code.Code[n8] != null) {
            int n9 = 0;
            final byte[] array3 = Code.Code[n8];
            while (n9 + 6 <= 16384) {
                final int i2 = I(array3, n9 + 3);
                if (array3[n9] != 0 || array3[n9 + 1] != 0) {
                    if (aj >>> 14 != aj + 6 + i2 - 1 >> 14) {
                        aj = (aj >>> 14) + 1 << 14;
                    }
                    J(aj, array3, n9);
                    aj += i2 + 6;
                }
                else if (array3[n9 + 2] == 0) {
                    ++n8;
                    continue Label_2536;
                }
                n9 += i2 + 6;
            }
            ++n8;
        }
        int ak;
        for (ak = Code.ak; Code.Code[ak - 2] == null; --ak) {}
        while (Code.Code[ak - 2] != null) {
            ++ak;
        }
        int n10 = ak << 14;
        for (int ak2 = Code.ak; ak2 < Code.Code.length && Code.Code[ak2] != null; ++ak2) {
            final byte[] array4;
            if ((array4 = Code.Code[ak2])[0] != 0 || array4[1] != 0) {
                J(n10, array4, 0);
                n10 += 16384;
            }
            else {
                Code.Code[ak2] = null;
            }
        }
        Code.Z = null;
        Code.aC = n(Code.aC);
        for (int n11 = 1; n11 < Code.e.length; ++n11) {
            if (Code.e[n11] != 0) {
                Code.e[n11] = n(Code.e[n11]);
            }
        }
        s(Code.Y);
        s(Code.aa);
        s(Code.ab);
        Code.A = n(Code.A);
        Code.L = n(Code.L);
        Code.M = n(Code.M);
        Code.N = n(Code.N);
        Code.O = n(Code.O);
        Code.P = n(Code.P);
        Code.Q = n(Code.Q);
        Code.T = n(Code.T);
        Code.U = n(Code.U);
        Code.V = n(Code.V);
        Code.R = o(Code.R);
        Code.W = o(Code.W);
        Code.X = o(Code.X);
        I(Code.J, 0, Code.D);
        I(Code.d, 0, Code.ao);
        for (int n12 = 0; n12 < Code.F; n12 += 5) {
            Code.C[n12] = n(Code.C[n12]);
        }
        for (int ap = Code.ap; ap < i; ap += l(ap - 3) + 3) {
            s(ap);
        }
        i = Code.am >>> 15;
        Label_3062:
        while (Code.Code[i] != null) {
            int n13 = 0;
            for (int[] array5 = Code.Code[i]; n13 + 3 <= 32768; n13 += array5[n13 + 3 - 3] + 3) {
                if (array5[n13 + 3 - 1] == 0) {
                    ++i;
                    continue Label_3062;
                }
                if (array5[n13 + 3 - 2] != 0) {
                    s((i << 15) + n13 + 3);
                }
            }
            ++i;
        }
        int[] array6;
        for (i = Code.an; i < Code.Code.length; ++i) {
            if ((array6 = Code.Code[i]) != null && array6[1] != 0) {
                s((i << 15) + 3);
            }
        }
        Code.al = Code.am;
    Label_3492:
        for (i = Code.am >>> 15; Code.Code[i] != null; ++i) {
            int n14 = 0;
            final int[] array7 = Code.Code[i];
            while (n14 + 3 <= 32768) {
                if (array7[n14 + 3 - 1] == 0) {
                    if (n14 == 0 && (i << 15) - Code.al > 15000) {
                        while (Code.Code[i] != null) {
                            Code.Code[i++] = null;
                        }
                        break Label_3492;
                    }
                    break;
                }
                else {
                    final int n15 = array7[n14 + 3 - 3];
                    if (array7[n14 + 3 - 2] != 0) {
                        int n16 = n15;
                        final int n17;
                        if ((n17 = array7[n14 + 3 - 1]) == Code.r || n17 == Code.s) {
                            n16 = array7[n14 + 3] + 1;
                            array7[n14 + 3 - 3] = n16;
                        }
                        final int n18 = array7[n14 + 3 - 2] - 3;
                        array7[n14 + 3 - 2] = 0;
                        Code.al = n18 + 3 + n16;
                        if ((i << 15) + n14 != n18) {
                            System.arraycopy(array7, n14, Code(n18), n18 & 0x7FFF, n16 + 3);
                        }
                    }
                    n14 += n15 + 3;
                }
            }
            if (Code.al < (i << 15) + 32768) {
                if (Code.al < i << 15) {
                    Z(array7, 0, array7.length);
                }
                else {
                    Z(array7, Code.al & 0x7FFF, array7.length - (Code.al & 0x7FFF));
                }
            }
        }
        int[] array8;
        int n19;
        for (i = Code.an; i < Code.Code.length; ++i) {
            if ((array8 = Code.Code[i]) != null && (n19 = array8[1] >>> 15) != 0) {
                array8[1] = 0;
                Code.Code[i--] = Code.Code[n19];
                Code.Code[n19] = array8;
            }
        }
        Code.an = an;
        Code.ai = Code.aj;
    Label_3829:
        for (i = Code.aj >>> 14; Code.Code[i] != null; ++i) {
            int n20 = 0;
            final byte[] array9 = Code.Code[i];
            while (n20 + 6 <= 16384) {
                final int i3 = I(array9, n20 + 3);
                if (array9[n20] != 0 || array9[n20 + 1] != 0) {
                    final int i4;
                    final byte[] z = Z(i4 = I(array9, n20));
                    final int n21 = i4 & 0x3FFF;
                    z[n21 + 1] = (z[n21] = 0);
                    z[n21 + 2] = 1;
                    Code.ai = i4 + 6 + i3;
                    if ((i << 14) + n20 != i4) {
                        System.arraycopy(array9, n20 + 3, z, n21 + 3, i3 + 6 - 3);
                    }
                }
                else if (array9[n20 + 2] == 0) {
                    if (n20 == 0 && (i << 14) - Code.ai > 2000) {
                        while (Code.Code[i] != null) {
                            Code.Code[i++] = null;
                        }
                        break Label_3829;
                    }
                    break;
                }
                n20 += i3 + 6;
            }
            if (Code.ai < (i << 14) + 16384) {
                if (Code.ai < i << 14) {
                    c(array9, 0, array9.length);
                }
                else {
                    c(array9, Code.ai & 0x3FFF, array9.length - (Code.ai & 0x3FFF));
                }
            }
        }
        byte[] array10;
        int n22;
        for (i = Code.ak; i < Code.Code.length; ++i) {
            if ((array10 = Code.Code[i]) != null) {
                n22 = I(array10, 0) >>> 14;
                array10[1] = (array10[0] = 0);
                if (n22 != 0) {
                    Code.Code[i--] = Code.Code[n22];
                    Code.Code[n22] = array10;
                }
            }
        }
        Code.ak = ak;
        Label_3938: {
            if ((Code.al & 0x7FFF) < 22768) {
                break Label_3938;
            }
            final int n23 = Code.al + 32768;
            try {
                if (Code(n23) == null) {
                    g(Code.al + 32768 >>> 15);
                }
                if ((Code.ai & 0x3FFF) >= 15384 && Z(Code.ai + 16384) == null) {
                    l(Code.ai + 16384 >>> 14);
                }
            }
            finally {}
        }
    }
    
    private B Code(byte[] array, int n, int i, int n2, int height, int n3, final B[] array2, final boolean b) {
        if (n2 == 0 || height == 0 || n3 == 0) {
            return null;
        }
        B b2 = null;
        if (Code.ae && n != 0) {
            final byte[] array3 = new byte[i];
            System.arraycopy(array, n, array3, 0, i);
            array = array3;
            n = 0;
        }
        if (array[n] == 82 || array[n] == 67 || array[n] == 88) {
            if (array[n] == 88) {
                n2 = (array[n + 1] << 3 | (array[n + 2] >>> 5 & 0x7));
                height = ((array[n + 2] & 0x1F) << 6 | (array[n + 3] >>> 2 & 0x3F));
            }
            else {
                n2 = array[n + 1];
                height = array[n + 2];
            }
            final int[] array4 = new int[n2 * height];
            if (array[n] == 82) {
                for (n += 3, i = 0; i < n2 * height; ++i, n += 4) {
                    array4[i] = ((array[n] & 0xFF) << 24) + ((array[n + 1] & 0xFF) << 16) + ((array[n + 2] & 0xFF) << 8) + (array[n + 3] & 0xFF);
                }
            }
            else if (array[n] == 67) {
                final byte[] array5 = new byte[n2 * height << 1];
                final J n4;
                (n4 = new a()).Code(array5);
                n4.I(array, n + 3, i - 3);
                n4.read(null, 0, array5.length);
                for (int j = 0; j < n2 * height << 1; array4[j >> 1] = (n << 24) + (i << 16) + (((array5[++j] & 0xF0) >>> 4 | (array5[j] & 0xF0)) << 8) + ((array5[j] & 0xF) << 4 | (array5[j] & 0xF)), ++j) {
                    n = ((array5[j] & 0xF0) >>> 4 | (array5[j] & 0xF0));
                    i = ((array5[j] & 0xF) << 4 | (array5[j] & 0xF));
                }
            }
            else {
                final byte[] array6 = new byte[n2 * height * 3];
                final J n5;
                (n5 = new a()).Code(array6);
                n5.I(array, n + 4, i - 4);
                n5.read(null, 0, array6.length);
                int n6;
                int n7;
                for (int k = 0; k < n2 * height * 3; i = ((array6[k] << 6 & 0xF0) | (array6[++k] >> 2 & 0x3C)), n6 = ((array6[k] << 4 & 0xF0) | (array6[++k] >> 4 & 0xC)), n7 = (array6[k] & 0x3F) << 2, n |= n >> 6, i |= i >> 6, array4[k / 3] = (n << 24) + (i << 16) + ((n6 | n6 >> 6) << 8) + (n7 | n7 >> 6), ++k) {
                    n = (array6[k] & 0xFC);
                }
            }
            b2 = this.Code(array4, n2, height, true, b);
        }
        else if (Code.af || array[n] == -119) {
            int n8 = 0;
            final byte[] array7 = array;
            final int n9 = n;
            n = i;
            i = n9;
            final byte[] array8 = array7;
            final Image image = Image.createImage(array8, i, n);
            final int n10 = array8[i] + 119;
            i = ((n10 | -n10) >>> 31 ^ 0x1);
            B code = new B(image, (boolean)(i != 0));
            if (b) {
                final B b3 = code;
                i = b3.Code.getWidth();
                final int height2 = b3.Code.getHeight();
                final int[] array9 = new int[i * height2];
                b3.Code(array9, i, 0, 0, i, height2);
                code = this.Code(array9, i, height2, b3.Code, true);
            }
            b2 = code;
            if (n3 == 256) {
                height = b2.Code.getHeight();
                n2 = b2.Code.getWidth();
            }
            else if (n3 >= 0) {
                height = (b2.Code.getHeight() * n3 << 8) + 65535 >> 16;
                n2 = Math.max(1, b2.Code.getWidth() * height / b2.Code.getHeight());
            }
            if (b2.Code.getHeight() != height || b2.Code.getWidth() != n2) {
                if (array2 != null) {
                    array2[0] = b2;
                }
                if (m()) {
                    return null;
                }
                if (height > b2.Code.getHeight() || n2 > b2.Code.getWidth()) {
                    if (b2.Code) {
                        n8 = 2;
                    }
                    else {
                        n8 = 1;
                    }
                }
                b2 = b2.Code(0, 0, b2.Code.getWidth(), b2.Code.getHeight(), n2, height, 0, 0, 0, 0, n8, b2.Code);
            }
        }
        else {
            if (n3 == -1) {
                final int[] array10 = new int[3];
                final byte[] array11 = array;
                final int n11 = n;
                final byte[] array12 = array11;
                if (Code.ae && n11 != 0) {
                    final int[] array13 = array10;
                    final int n12 = 0;
                    final int[] array14 = array10;
                    final int n13 = 1;
                    final int[] array15 = array10;
                    final int n14 = 2;
                    final int n15 = 0;
                    array15[n14] = n15;
                    array13[n12] = (array14[n13] = n15);
                    Code.bY = 0;
                    Code.bZ = 0;
                }
                else if ((i >= 4 && array12[n11] == 82) || array12[n11] == 67 || array12[n11] == 88) {
                    if (array12[n11] == 88) {
                        array10[0] = (array12[n11 + 1] << 3 | (array12[n11 + 2] >>> 5 & 0x7) * ((array12[n11 + 2] & 0x1F) << 6) | (array12[n11 + 3] >>> 2 & 0x3F) * Code.Z);
                    }
                    else {
                        array10[0] = array12[n11 + 1] * array12[n11 + 2] * Code.Z;
                    }
                    array10[1] = (array10[2] = array10[0]);
                    Code.bY = 0;
                    Code.bZ = 0;
                }
                else {
                    int by = 0;
                    int bz = 0;
                    if (i >= 23 && array12[n11] == -119) {
                        by = Code(array12, n11 + 16);
                        bz = Code(array12, n11 + 20);
                    }
                    else if (array12[n11] == -1 && array12[n11 + 1] == -40) {
                        int n16 = 2;
                        while (n16 < i && array12[n11 + n16] == -1) {
                            ++n16;
                            if (array12[n11 + n16] != -1) {
                                if (array12[n11 + n16] == 0) {
                                    break;
                                }
                                if (array12[n11 + n16] == 1 || (array12[n11 + n16] >= -48 && array12[n11 + n16] <= -41)) {
                                    ++n16;
                                }
                                else {
                                    if (array12[n11 + n16] == -64 || array12[n11 + n16] == -62) {
                                        by = B(array12, n11 + n16 + 6);
                                        bz = B(array12, n11 + n16 + 4);
                                        break;
                                    }
                                    n16 = ++n16 + B(array12, n11 + n16);
                                }
                            }
                        }
                    }
                    array10[1] = by * bz * Code.Z;
                    Code.bY = by;
                    Code.bZ = bz;
                    array10[0] = (array10[2] = array10[1]);
                }
                n3 = Code.bY;
                final int bz2 = Code.bZ;
                if (n3 <= 0) {
                    return null;
                }
                n3 = Math.max(Math.min(256, (n2 << 8) / n3), Math.min(256, (height << 8) / bz2));
            }
            final Code code2 = new Code(false, '\0');
            if (n3 == 256) {
                if (code2.Code(array, n, i, 0, false) == 0 && code2.bm != 0 && code2.bk != 0) {
                    if (code2.bm < n2 || code2.bk < height) {
                        b2 = this.Code(code2.x, code2.bm, code2.bk, n2, height, 1);
                    }
                    else {
                        b2 = this.Code(code2.x, code2.bm, code2.bk, false, b);
                    }
                }
            }
            else {
                if (m()) {
                    return null;
                }
                final int code3;
                final int n17 = (code3 = code2.Code(array, n, i, 0, (boolean)(1 != 0))) >> 16;
                final int n18 = code3 & 0xFFFF;
                int n19;
                for (n19 = 3; 256 >> n19 <= n3; --n19) {}
                if (n17 >> n19 == 0 || n18 >> n19 == 0) {
                    return null;
                }
                if (code2.Code(array, n, i, n19, false) == 0) {
                    if (n2 == -1 || height == -1) {
                        height = (n18 * n3 << 8) + 65535 >> 16;
                        n2 = (n17 * n3 << 8) + 65535 >> 16;
                    }
                    int n20 = 0;
                    if (code2.bm < n2 || code2.bk < height) {
                        n20 = 1;
                    }
                    b2 = this.Code(code2.x, code2.bm, code2.bk, n2, height, n20);
                }
            }
        }
        if (b2 != null && b2.Code.getHeight() == 0) {
            throw new OutOfMemoryError("");
        }
        return b2;
    }
    
    private synchronized boolean v() {
        final B[] array = this.aE ? this.N.Code : this.N.I;
        final int n = this.aE ? 256 : this.H();
        for (int n2 = 0, i = 0; i < this.N.az; ++i, n2 += 6) {
            if (array[i] == null) {
                final int n3 = n2;
                if ((this.N.h[n3 + 2] & Integer.MIN_VALUE) == 0x0 && this.c(n3) && this.b(this.N.h[n3 + 1])) {
                    boolean b = this.aR && this.N.h[n2 + 5] == 0;
                    if (this.N.C > 0) {
                        final int n4 = this.N.h[n2 + 1];
                        final int n5 = n;
                        final int n6 = this.N.h[n2 + 5] >>> 16;
                        final int n7 = this.N.h[n2 + 5] & 0xFFFF;
                        final int[] a = Code.A;
                        final int n8 = n7;
                        final int n9 = n6;
                        final int n10 = n5;
                        final int n11 = n4;
                        final byte[] f = this.f;
                        final int n12 = n11 + 2;
                        final int b2 = B(this.f, n11);
                        final int n13 = n10;
                        final int n14 = (n9 == 0) ? -1 : n9;
                        final int by = (n8 == 0) ? -1 : n8;
                        final int bz = n14;
                        final int n15 = n13;
                        final int n16 = b2;
                        final int n17 = n12;
                        final byte[] array2 = f;
                        final boolean b3 = bz != -1 && by != -1;
                        if (Code.ae && n17 != 0) {
                            final int[] array3 = a;
                            final int n18 = 0;
                            final int[] array4 = a;
                            final int n19 = 1;
                            final int[] array5 = a;
                            final int n20 = 2;
                            final int n21 = 0;
                            array5[n20] = n21;
                            array3[n18] = (array4[n19] = n21);
                            Code.bY = 0;
                            Code.bZ = 0;
                        }
                        else if ((n16 >= 4 && array2[n17] == 82) || array2[n17] == 67 || array2[n17] == 88) {
                            if (array2[n17] == 88) {
                                a[0] = (array2[n17 + 1] << 3 | (array2[n17 + 2] >>> 5 & 0x7) * ((array2[n17 + 2] & 0x1F) << 6) | (array2[n17 + 3] >>> 2 & 0x3F) * Code.Z);
                            }
                            else {
                                a[0] = array2[n17 + 1] * array2[n17 + 2] * Code.Z;
                            }
                            a[1] = (a[2] = a[0]);
                            Code.bY = 0;
                            Code.bZ = 0;
                        }
                        else {
                            int n22 = 0;
                            int n23 = 0;
                            int n24 = 0;
                            if (n16 >= 23 && array2[n17] == -119) {
                                n22 = Code(array2, n17 + 16);
                                n23 = Code(array2, n17 + 20);
                            }
                            else if (array2[n17] == -1 && array2[n17 + 1] == -40) {
                                int n25 = 2;
                                while (n25 < n16 && array2[n17 + n25] == -1) {
                                    ++n25;
                                    if (array2[n17 + n25] != -1) {
                                        if (array2[n17 + n25] == 0) {
                                            break;
                                        }
                                        if (array2[n17 + n25] == 1 || (array2[n17 + n25] >= -48 && array2[n17 + n25] <= -41)) {
                                            ++n25;
                                        }
                                        else {
                                            if (array2[n17 + n25] == -64 || array2[n17 + n25] == -62) {
                                                n22 = B(array2, n17 + n25 + 6);
                                                n23 = B(array2, n17 + n25 + 4);
                                                break;
                                            }
                                            n25 = ++n25 + B(array2, n17 + n25);
                                        }
                                    }
                                }
                                final int n26 = b3 ? ((by << 8) / n22) : n15;
                                if (!Code.af && n26 < 256) {
                                    for (n24 = 8; 256 / n24 <= n26; n24 /= 2) {}
                                }
                            }
                            Code.bY = by;
                            Code.bZ = bz;
                            a[1] = by * bz * Code.Z;
                            if (n15 != 256) {
                                a[0] = ((by * n15 - 1) / 256 + 1) * ((bz * n15 - 1) / 256 + 1) * Code.Z;
                                if (n24 > 0) {
                                    a[2] = a[0] + n22 * n23 * Code.Z / n24;
                                }
                                else {
                                    a[2] = a[0] + a[1];
                                }
                            }
                            else {
                                a[0] = (a[2] = a[1]);
                            }
                        }
                        if (!this.N.I(Code.A[2])) {
                            final int[] h = this.N.h;
                            final int n27 = n2 + 2;
                            h[n27] |= Integer.MIN_VALUE;
                            this.R(n2);
                            continue;
                        }
                        if (b && n != 256 && !this.N.I(Code.A[0] + Code.A[1])) {
                            b = false;
                        }
                    }
                    final Code m = Code.M;
                    final int n28 = this.N.h[n2];
                    final int n29 = this.N.h[n2 + 1];
                    final int n30 = n;
                    final int n31 = this.N.h[n2 + 2] & 0x3FFFFFFF;
                    final int n32 = this.N.h[n2 + 3];
                    final int n33 = this.N.h[n2 + 5] >>> 16;
                    final int n34 = this.N.h[n2 + 5] & 0xFFFF;
                    final boolean c = b;
                    final int bk = n34;
                    final int br = n33;
                    final int bl = n32;
                    final int c2 = n31;
                    final int bm = n30;
                    final int bh = n29;
                    final int bn = n28;
                    final Code code = m;
                    m.aM = true;
                    code.bn = bn;
                    code.bh = bh;
                    code.bm = bm;
                    code.C = c2;
                    code.bl = bl;
                    code.bk = bk;
                    code.br = br;
                    code.c = c;
                    return true;
                }
            }
        }
        return false;
    }
    
    private void ad() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: getfield        Code.L:Z
        //     4: ifeq            778
        //     7: aload_0        
        //     8: dup            
        //     9: astore_1       
        //    10: getfield        Code.a:Z
        //    13: ifeq            48
        //    16: aload_1        
        //    17: getfield        Code.I:Ljava/io/DataOutputStream;
        //    20: invokevirtual   java/io/OutputStream.close:()V
        //    23: goto            27
        //    26: pop            
        //    27: aload_1        
        //    28: getfield        Code.I:Ljava/io/DataInputStream;
        //    31: invokevirtual   java/io/InputStream.close:()V
        //    34: goto            38
        //    37: pop            
        //    38: aload_1        
        //    39: getfield        Code.B:LJ;
        //    42: invokeinterface J.close:()V
        //    47: return         
        //    48: aload_1        
        //    49: invokespecial   Code.p:()Z
        //    52: ifne            777
        //    55: aload_1        
        //    56: getfield        Code.c:Z
        //    59: ifeq            170
        //    62: aload_1        
        //    63: astore_2       
        //    64: bipush          8
        //    66: newarray        B
        //    68: astore_3       
        //    69: aload_2        
        //    70: invokespecial   Code.Code:()La;
        //    73: dup            
        //    74: astore          4
        //    76: invokevirtual   a.Z:()Z
        //    79: ifeq            139
        //    82: aload           4
        //    84: invokevirtual   a.C:()I
        //    87: istore          5
        //    89: aload           4
        //    91: iconst_0       
        //    92: invokevirtual   a.Z:(I)V
        //    95: aload_3        
        //    96: iconst_0       
        //    97: iload           5
        //    99: aload           4
        //   101: invokevirtual   a.Z:()I
        //   104: iconst_0       
        //   105: invokestatic    Code.Code:([BIIII)V
        //   108: aload_2        
        //   109: aload_3        
        //   110: iconst_0       
        //   111: bipush          8
        //   113: invokespecial   Code.b:([BII)V
        //   116: aload_2        
        //   117: aload_3        
        //   118: bipush          8
        //   120: invokespecial   Code.I:([BI)V
        //   123: iload           5
        //   125: bipush          7
        //   127: if_icmpne       69
        //   130: aload_2        
        //   131: aload           4
        //   133: invokespecial   Code.Z:(La;)V
        //   136: goto            69
        //   139: aload           4
        //   141: invokevirtual   a.Code:()Z
        //   144: ifne            69
        //   147: aload_2        
        //   148: sipush          10000
        //   151: invokespecial   Code.L:(I)V
        //   154: aload_2        
        //   155: aload           4
        //   157: aload_2        
        //   158: aload           4
        //   160: iconst_0       
        //   161: invokespecial   Code.Code:(La;I)[B
        //   164: invokespecial   Code.Code:(La;[B)V
        //   167: goto            69
        //   170: aload_1        
        //   171: getfield        Code.r:LCode;
        //   174: invokespecial   Code.t:()V
        //   177: aload_1        
        //   178: getfield        Code.r:LCode;
        //   181: aload_1        
        //   182: invokespecial   Code.I:(LCode;)I
        //   185: dup            
        //   186: istore_2       
        //   187: ifge            518
        //   190: bipush          15
        //   192: newarray        B
        //   194: dup            
        //   195: astore_3       
        //   196: iconst_0       
        //   197: iconst_1       
        //   198: bastore        
        //   199: aload_3        
        //   200: iconst_1       
        //   201: iconst_2       
        //   202: bastore        
        //   203: aload_3        
        //   204: iconst_2       
        //   205: iconst_0       
        //   206: bastore        
        //   207: aload_1        
        //   208: getfield        Code.r:LCode;
        //   211: getfield        Code.h:[B
        //   214: invokestatic    Code.Code:([B)LCode;
        //   217: pop            
        //   218: aload_1        
        //   219: getfield        Code.r:LCode;
        //   222: getfield        Code.h:[B
        //   225: iconst_0       
        //   226: aload_1        
        //   227: getfield        Code.r:LCode;
        //   230: getfield        Code.g:[B
        //   233: iconst_0       
        //   234: bipush          8
        //   236: invokestatic    java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
        //   239: aload_1        
        //   240: getfield        Code.r:LCode;
        //   243: getfield        Code.g:[B
        //   246: iconst_0       
        //   247: aload_3        
        //   248: iconst_3       
        //   249: bipush          8
        //   251: invokestatic    java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
        //   254: aload_1        
        //   255: getfield        Code.r:LCode;
        //   258: getfield        Code.I:[I
        //   261: iconst_0       
        //   262: iaload         
        //   263: aload_3        
        //   264: bipush          11
        //   266: invokestatic    Code.Z:(I[BI)V
        //   269: aload_1        
        //   270: sipush          30000
        //   273: invokespecial   Code.L:(I)V
        //   276: aload_1        
        //   277: aconst_null    
        //   278: aload_3        
        //   279: invokespecial   Code.Code:(La;[B)V
        //   282: goto            293
        //   285: astore_2       
        //   286: aload_1        
        //   287: invokespecial   Code.Code:()La;
        //   290: pop            
        //   291: aload_2        
        //   292: athrow         
        //   293: aload_1        
        //   294: iconst_0       
        //   295: iconst_5       
        //   296: invokespecial   Code.i:(II)V
        //   299: aload_1        
        //   300: getfield        Code.g:[B
        //   303: iconst_0       
        //   304: baload         
        //   305: iconst_2       
        //   306: if_icmpeq       334
        //   309: aload_1        
        //   310: aconst_null    
        //   311: invokespecial   Code.Code:(La;)Z
        //   314: ifne            777
        //   317: aload_1        
        //   318: iconst_1       
        //   319: putfield        Code.bl:I
        //   322: aload_1        
        //   323: invokespecial   Code.Code:()La;
        //   326: pop            
        //   327: aload_1        
        //   328: iconst_1       
        //   329: iconst_0       
        //   330: invokespecial   Code.Code:(ZI)V
        //   333: return         
        //   334: aload_1        
        //   335: invokespecial   Code.T:()V
        //   338: aload_1        
        //   339: astore_3       
        //   340: getstatic       Code.I:Ljava/lang/Object;
        //   343: dup            
        //   344: astore          4
        //   346: monitorenter   
        //   347: getstatic       Code.E:Z
        //   350: ifeq            459
        //   353: iconst_0       
        //   354: putstatic       Code.E:Z
        //   357: iconst_0       
        //   358: putstatic       Code.D:Z
        //   361: aload_3        
        //   362: getfield        Code.Code:[Ljava/lang/String;
        //   365: aload_3        
        //   366: getfield        Code.I:B
        //   369: aaload         
        //   370: astore          5
        //   372: aconst_null    
        //   373: astore          6
        //   375: aload           5
        //   377: bipush          59
        //   379: invokevirtual   java/lang/String.indexOf:(I)I
        //   382: iflt            399
        //   385: aload           5
        //   387: aload           5
        //   389: bipush          59
        //   391: invokevirtual   java/lang/String.indexOf:(I)I
        //   394: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //   397: astore          6
        //   399: aload_3        
        //   400: invokevirtual   Code.I:()Z
        //   403: ifeq            418
        //   406: aload_3        
        //   407: getfield        Code.I:B
        //   410: aload           6
        //   412: invokestatic    Code.Code:(BLjava/lang/String;)V
        //   415: goto            427
        //   418: aload_3        
        //   419: getfield        Code.I:B
        //   422: aload           6
        //   424: invokestatic    Code.I:(BLjava/lang/String;)V
        //   427: aload_3        
        //   428: getfield        Code.d:Z
        //   431: ifeq            449
        //   434: invokestatic    Code.r:()Z
        //   437: ifeq            449
        //   440: invokestatic    Code.q:()V
        //   443: getstatic       Code.bw:I
        //   446: invokestatic    Code.G:(I)V
        //   449: iconst_m1      
        //   450: putstatic       Code.Z:B
        //   453: ldc_w           "md"
        //   456: invokestatic    Code.I:(Ljava/lang/String;)V
        //   459: aload           4
        //   461: monitorexit    
        //   462: goto            471
        //   465: astore_2       
        //   466: aload           4
        //   468: monitorexit    
        //   469: aload_2        
        //   470: athrow         
        //   471: aload_1        
        //   472: getfield        Code.r:LCode;
        //   475: invokespecial   Code.h:()Z
        //   478: ifeq            499
        //   481: aload_1        
        //   482: getfield        Code.r:LCode;
        //   485: invokespecial   Code.s:()V
        //   488: iconst_1       
        //   489: invokestatic    Code.K:(I)V
        //   492: aload_1        
        //   493: iconst_1       
        //   494: iconst_0       
        //   495: invokespecial   Code.Code:(ZI)V
        //   498: return         
        //   499: aload_1        
        //   500: invokevirtual   Code.I:()Z
        //   503: ifne            518
        //   506: aload_1        
        //   507: iconst_1       
        //   508: putfield        Code.x:Z
        //   511: aload_1        
        //   512: iconst_1       
        //   513: iconst_0       
        //   514: invokespecial   Code.Code:(ZI)V
        //   517: return         
        //   518: iload_2        
        //   519: ifge            538
        //   522: aload_1        
        //   523: getfield        Code.r:LCode;
        //   526: invokespecial   Code.t:()V
        //   529: aload_1        
        //   530: getfield        Code.r:LCode;
        //   533: aload_1        
        //   534: invokespecial   Code.I:(LCode;)I
        //   537: istore_2       
        //   538: aload_1        
        //   539: invokespecial   Code.Code:()La;
        //   542: astore_3       
        //   543: aload_1        
        //   544: ldc             240000
        //   546: invokespecial   Code.L:(I)V
        //   549: aload_1        
        //   550: aload_3        
        //   551: aload_1        
        //   552: aload_3        
        //   553: iload_2        
        //   554: invokespecial   Code.Code:(La;I)[B
        //   557: invokespecial   Code.Code:(La;[B)V
        //   560: aload_1        
        //   561: iconst_0       
        //   562: iconst_5       
        //   563: invokespecial   Code.i:(II)V
        //   566: aload_1        
        //   567: getfield        Code.g:[B
        //   570: iconst_0       
        //   571: baload         
        //   572: tableswitch {
        //                4: 596
        //                5: 628
        //          default: 731
        //        }
        //   596: aload_1        
        //   597: invokespecial   Code.T:()V
        //   600: aload_1        
        //   601: getfield        Code.r:LCode;
        //   604: invokespecial   Code.h:()Z
        //   607: ifeq            621
        //   610: aload_1        
        //   611: getfield        Code.r:LCode;
        //   614: invokespecial   Code.s:()V
        //   617: iconst_1       
        //   618: invokestatic    Code.K:(I)V
        //   621: aload_1        
        //   622: iconst_1       
        //   623: iconst_0       
        //   624: invokespecial   Code.Code:(ZI)V
        //   627: return         
        //   628: aload_1        
        //   629: invokestatic    java/lang/System.currentTimeMillis:()J
        //   632: putfield        Code.Z:J
        //   635: aload_1        
        //   636: getfield        Code.v:LCode;
        //   639: aload_1        
        //   640: getfield        Code.g:[B
        //   643: iconst_1       
        //   644: iconst_4       
        //   645: invokespecial   Code.d:([BII)V
        //   648: aload_1        
        //   649: getfield        Code.t:LCode;
        //   652: aload_1        
        //   653: getfield        Code.g:[B
        //   656: iconst_5       
        //   657: iconst_4       
        //   658: invokespecial   Code.C:([BII)V
        //   661: aload_1        
        //   662: getfield        Code.g:[B
        //   665: iconst_1       
        //   666: baload         
        //   667: aload_1        
        //   668: getfield        Code.g:[B
        //   671: iconst_5       
        //   672: baload         
        //   673: if_icmpne       724
        //   676: aload_1        
        //   677: getfield        Code.g:[B
        //   680: iconst_2       
        //   681: baload         
        //   682: aload_1        
        //   683: getfield        Code.g:[B
        //   686: bipush          6
        //   688: baload         
        //   689: if_icmpne       724
        //   692: aload_1        
        //   693: getfield        Code.g:[B
        //   696: iconst_3       
        //   697: baload         
        //   698: aload_1        
        //   699: getfield        Code.g:[B
        //   702: bipush          7
        //   704: baload         
        //   705: if_icmpne       724
        //   708: aload_1        
        //   709: getfield        Code.g:[B
        //   712: iconst_4       
        //   713: baload         
        //   714: aload_1        
        //   715: getfield        Code.g:[B
        //   718: bipush          8
        //   720: baload         
        //   721: if_icmpeq       751
        //   724: aload_1        
        //   725: iconst_1       
        //   726: iconst_0       
        //   727: invokespecial   Code.Code:(ZI)V
        //   730: return         
        //   731: aload_1        
        //   732: aload_3        
        //   733: invokespecial   Code.Code:(La;)Z
        //   736: ifne            777
        //   739: aload_1        
        //   740: iconst_1       
        //   741: putfield        Code.bl:I
        //   744: aload_1        
        //   745: iconst_1       
        //   746: iconst_0       
        //   747: invokespecial   Code.Code:(ZI)V
        //   750: return         
        //   751: aload_1        
        //   752: invokevirtual   Code.I:()Z
        //   755: ifeq            762
        //   758: aload_1        
        //   759: invokestatic    Code.Code:(Ljava/lang/Runnable;)V
        //   762: aload_1        
        //   763: iconst_0       
        //   764: invokevirtual   Code.Z:(Z)V
        //   767: return         
        //   768: pop            
        //   769: aload_1        
        //   770: iconst_1       
        //   771: iconst_0       
        //   772: invokespecial   Code.Code:(ZI)V
        //   775: return         
        //   776: pop            
        //   777: return         
        //   778: aload_0        
        //   779: dup            
        //   780: astore_1       
        //   781: getfield        Code.d:Z
        //   784: ifeq            1824
        //   787: aload_1        
        //   788: getfield        Code.I:[Ljava/lang/Object;
        //   791: bipush          53
        //   793: aaload         
        //   794: invokevirtual   java/lang/Object.toString:()Ljava/lang/String;
        //   797: ldc             "file://"
        //   799: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //   802: ifeq            839
        //   805: aload_1        
        //   806: getfield        Code.I:[Ljava/lang/Object;
        //   809: bipush          53
        //   811: aaload         
        //   812: invokevirtual   java/lang/Object.toString:()Ljava/lang/String;
        //   815: bipush          7
        //   817: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //   820: dup            
        //   821: astore_2       
        //   822: invokestatic    Code.J:(Ljava/lang/String;)I
        //   825: bipush          16
        //   827: if_icmpne       839
        //   830: aload_1        
        //   831: getfield        Code.C:LCode;
        //   834: aload_2        
        //   835: invokespecial   Code.J:(Ljava/lang/String;)V
        //   838: return         
        //   839: getstatic       Code.an:Z
        //   842: ifeq            889
        //   845: aload_1        
        //   846: getfield        Code.C:Z
        //   849: ifeq            889
        //   852: aload_1        
        //   853: getfield        Code.I:[Ljava/lang/Object;
        //   856: bipush          53
        //   858: aaload         
        //   859: checkcast       Ljava/lang/String;
        //   862: ldc_w           "odp:component"
        //   865: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //   868: ifeq            889
        //   871: aload_1        
        //   872: getfield        Code.C:LCode;
        //   875: aload_1        
        //   876: getfield        Code.I:[Ljava/lang/Object;
        //   879: bipush          53
        //   881: aaload         
        //   882: checkcast       Ljava/lang/String;
        //   885: invokespecial   Code.J:(Ljava/lang/String;)V
        //   888: return         
        //   889: aload_1        
        //   890: getfield        Code.Code:La;
        //   893: ifnonnull       904
        //   896: aload_1        
        //   897: iconst_1       
        //   898: invokespecial   Code.D:(I)V
        //   901: goto            915
        //   904: aload_1        
        //   905: getfield        Code.Code:La;
        //   908: invokevirtual   java/io/InputStream.close:()V
        //   911: goto            915
        //   914: pop            
        //   915: aload_1        
        //   916: getfield        Code.I:[Ljava/lang/Object;
        //   919: iconst_1       
        //   920: ldc_w           "microedition.configuration"
        //   923: invokestatic    Code.g:(Ljava/lang/String;)Ljava/lang/String;
        //   926: aastore        
        //   927: aload_1        
        //   928: getfield        Code.I:[Ljava/lang/Object;
        //   931: iconst_2       
        //   932: ldc_w           "microedition.profiles"
        //   935: invokestatic    Code.g:(Ljava/lang/String;)Ljava/lang/String;
        //   938: aastore        
        //   939: aload_1        
        //   940: getfield        Code.I:[Ljava/lang/Object;
        //   943: iconst_3       
        //   944: ldc_w           "microedition.platform"
        //   947: invokestatic    Code.g:(Ljava/lang/String;)Ljava/lang/String;
        //   950: aastore        
        //   951: aload_1        
        //   952: getfield        Code.I:[Ljava/lang/Object;
        //   955: iconst_4       
        //   956: ldc_w           "microedition.locale"
        //   959: invokestatic    Code.g:(Ljava/lang/String;)Ljava/lang/String;
        //   962: aastore        
        //   963: new             Ljava/lang/StringBuffer;
        //   966: dup            
        //   967: invokespecial   java/lang/StringBuffer.<init>:()V
        //   970: ldc             "Opera Mini/8.0.35626/hifi/hernskifers/"
        //   972: invokevirtual   java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
        //   975: invokestatic    Code.c:()Ljava/lang/String;
        //   978: invokevirtual   java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
        //   981: invokevirtual   java/lang/StringBuffer.toString:()Ljava/lang/String;
        //   984: astore_2       
        //   985: aload_1        
        //   986: getfield        Code.I:[Ljava/lang/Object;
        //   989: bipush          54
        //   991: aload_2        
        //   992: aastore        
        //   993: aload_1        
        //   994: getfield        Code.I:[Ljava/lang/Object;
        //   997: bipush          34
        //   999: ldc             "hernskifers"
        //  1001: aastore        
        //  1002: aload_1        
        //  1003: getfield        Code.I:[Ljava/lang/Object;
        //  1006: bipush          49
        //  1008: invokestatic    Code.d:()Ljava/lang/String;
        //  1011: aastore        
        //  1012: aload_1        
        //  1013: getfield        Code.I:[Ljava/lang/Object;
        //  1016: bipush          57
        //  1018: getstatic       Code.B:Ljava/lang/String;
        //  1021: ifnull          1054
        //  1024: getstatic       Code.B:Ljava/lang/String;
        //  1027: ldc             "-"
        //  1029: invokevirtual   java/lang/String.indexOf:(Ljava/lang/String;)I
        //  1032: iflt            1054
        //  1035: getstatic       Code.B:Ljava/lang/String;
        //  1038: getstatic       Code.B:Ljava/lang/String;
        //  1041: ldc             "-"
        //  1043: invokevirtual   java/lang/String.indexOf:(Ljava/lang/String;)I
        //  1046: iconst_1       
        //  1047: iadd           
        //  1048: invokevirtual   java/lang/String.substring:(I)Ljava/lang/String;
        //  1051: goto            1056
        //  1054: ldc             ""
        //  1056: aastore        
        //  1057: invokestatic    Code.y:()I
        //  1060: dup            
        //  1061: istore_2       
        //  1062: getstatic       Code.bI:I
        //  1065: if_icmpeq       1083
        //  1068: iload_2        
        //  1069: iconst_m1      
        //  1070: if_icmpeq       1083
        //  1073: iload_2        
        //  1074: putstatic       Code.bI:I
        //  1077: ldc_w           "md"
        //  1080: invokestatic    Code.I:(Ljava/lang/String;)V
        //  1083: getstatic       Code.bI:I
        //  1086: istore_2       
        //  1087: invokestatic    Code.z:()I
        //  1090: dup            
        //  1091: istore_3       
        //  1092: getstatic       Code.bJ:I
        //  1095: if_icmpeq       1113
        //  1098: iload_3        
        //  1099: iconst_m1      
        //  1100: if_icmpeq       1113
        //  1103: iload_3        
        //  1104: putstatic       Code.bJ:I
        //  1107: ldc_w           "md"
        //  1110: invokestatic    Code.I:(Ljava/lang/String;)V
        //  1113: getstatic       Code.bJ:I
        //  1116: istore_3       
        //  1117: iload_2        
        //  1118: iconst_m1      
        //  1119: if_icmpeq       1196
        //  1122: iload_3        
        //  1123: iconst_m1      
        //  1124: if_icmpeq       1196
        //  1127: iload_3        
        //  1128: invokestatic    java/lang/Integer.toString:(I)Ljava/lang/String;
        //  1131: astore_3       
        //  1132: aload_3        
        //  1133: invokevirtual   java/lang/String.length:()I
        //  1136: iconst_3       
        //  1137: if_icmpge       1163
        //  1140: new             Ljava/lang/StringBuffer;
        //  1143: dup            
        //  1144: invokespecial   java/lang/StringBuffer.<init>:()V
        //  1147: ldc             "0"
        //  1149: invokevirtual   java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
        //  1152: aload_3        
        //  1153: invokevirtual   java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
        //  1156: invokevirtual   java/lang/StringBuffer.toString:()Ljava/lang/String;
        //  1159: astore_3       
        //  1160: goto            1132
        //  1163: aload_1        
        //  1164: getfield        Code.I:[Ljava/lang/Object;
        //  1167: bipush          92
        //  1169: new             Ljava/lang/StringBuffer;
        //  1172: dup            
        //  1173: invokespecial   java/lang/StringBuffer.<init>:()V
        //  1176: iload_2        
        //  1177: invokestatic    java/lang/Integer.toString:(I)Ljava/lang/String;
        //  1180: invokevirtual   java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
        //  1183: ldc             "-"
        //  1185: invokevirtual   java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
        //  1188: aload_3        
        //  1189: invokevirtual   java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
        //  1192: invokevirtual   java/lang/StringBuffer.toString:()Ljava/lang/String;
        //  1195: aastore        
        //  1196: aload_1        
        //  1197: getfield        Code.I:[Ljava/lang/Object;
        //  1200: bipush          41
        //  1202: getstatic       Code.i:Ljava/lang/String;
        //  1205: aastore        
        //  1206: aload_1        
        //  1207: getfield        Code.I:[I
        //  1210: bipush          74
        //  1212: bipush          109
        //  1214: iastore        
        //  1215: aload_1        
        //  1216: getfield        Code.I:[I
        //  1219: bipush          75
        //  1221: ldc_w           "midlet"
        //  1224: iconst_0       
        //  1225: invokevirtual   java/lang/String.charAt:(I)C
        //  1228: iastore        
        //  1229: getstatic       Code.az:Z
        //  1232: istore_2       
        //  1233: aload_1        
        //  1234: getfield        Code.I:[I
        //  1237: bipush          24
        //  1239: dup2           
        //  1240: iaload         
        //  1241: getstatic       Code.V:Z
        //  1244: ineg           
        //  1245: iconst_2       
        //  1246: iadd           
        //  1247: iconst_4       
        //  1248: ior            
        //  1249: iload_2        
        //  1250: iconst_3       
        //  1251: ishl           
        //  1252: ior            
        //  1253: ldc             131072
        //  1255: ior            
        //  1256: ldc             134217728
        //  1258: ior            
        //  1259: sipush          4096
        //  1262: ior            
        //  1263: ldc             16777216
        //  1265: ior            
        //  1266: getstatic       Code.az:Z
        //  1269: bipush          15
        //  1271: ishl           
        //  1272: ior            
        //  1273: ldc             67108864
        //  1275: ior            
        //  1276: ldc             8388608
        //  1278: ior            
        //  1279: ldc             1048576
        //  1281: ior            
        //  1282: ldc             262144
        //  1284: ior            
        //  1285: ior            
        //  1286: iastore        
        //  1287: aload_1        
        //  1288: getfield        Code.I:[I
        //  1291: bipush          43
        //  1293: dup2           
        //  1294: iaload         
        //  1295: ldc             1090699312
        //  1297: aload_1        
        //  1298: getfield        Code.C:LCode;
        //  1301: getfield        Code.C:LCode;
        //  1304: ifnonnull       1313
        //  1307: sipush          4096
        //  1310: goto            1314
        //  1313: iconst_0       
        //  1314: ior            
        //  1315: ldc             1048576
        //  1317: ior            
        //  1318: ldc             2097152
        //  1320: ior            
        //  1321: getstatic       Code.aa:Z
        //  1324: ifeq            1330
        //  1327: ldc             134217728
        //  1329: ior            
        //  1330: invokestatic    Code.w:()I
        //  1333: ifne            1341
        //  1336: ldc             67108864
        //  1338: goto            1342
        //  1341: iconst_0       
        //  1342: ior            
        //  1343: ior            
        //  1344: iastore        
        //  1345: invokestatic    Code.C:()Ljava/lang/String;
        //  1348: ldc             "hqvga"
        //  1350: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //  1353: ifne            1368
        //  1356: aload_1        
        //  1357: getfield        Code.I:[I
        //  1360: bipush          109
        //  1362: dup2           
        //  1363: iaload         
        //  1364: bipush          96
        //  1366: ior            
        //  1367: iastore        
        //  1368: aload_1        
        //  1369: getfield        Code.I:[I
        //  1372: bipush          25
        //  1374: invokestatic    Code.v:()I
        //  1377: iastore        
        //  1378: aload_1        
        //  1379: getfield        Code.I:[I
        //  1382: bipush          26
        //  1384: getstatic       Code.b:LCode;
        //  1387: invokevirtual   Code.a:()I
        //  1390: iastore        
        //  1391: aload_1        
        //  1392: getfield        Code.I:[I
        //  1395: bipush          47
        //  1397: iconst_0       
        //  1398: iastore        
        //  1399: aload_1        
        //  1400: getfield        Code.I:[I
        //  1403: bipush          48
        //  1405: iconst_0       
        //  1406: iastore        
        //  1407: aload_1        
        //  1408: getfield        Code.I:[Ljava/lang/Object;
        //  1411: bipush          22
        //  1413: getstatic       Code.a:J
        //  1416: getstatic       Code.b:J
        //  1419: lsub           
        //  1420: invokestatic    java/lang/String.valueOf:(J)Ljava/lang/String;
        //  1423: aastore        
        //  1424: aload_1        
        //  1425: getfield        Code.I:[I
        //  1428: bipush          58
        //  1430: invokestatic    java/lang/System.currentTimeMillis:()J
        //  1433: ldc2_w          1000
        //  1436: ldiv           
        //  1437: l2i            
        //  1438: iastore        
        //  1439: aload_1        
        //  1440: getfield        Code.I:[Ljava/lang/Object;
        //  1443: bipush          59
        //  1445: invokestatic    java/util/TimeZone.getDefault:()Ljava/util/TimeZone;
        //  1448: invokestatic    java/util/Calendar.getInstance:(Ljava/util/TimeZone;)Ljava/util/Calendar;
        //  1451: invokevirtual   java/util/Calendar.getTimeZone:()Ljava/util/TimeZone;
        //  1454: invokevirtual   java/util/TimeZone.getID:()Ljava/lang/String;
        //  1457: aastore        
        //  1458: aload_1        
        //  1459: getfield        Code.I:[I
        //  1462: bipush          61
        //  1464: getstatic       Code.aj:Z
        //  1467: iastore        
        //  1468: aload_1        
        //  1469: getfield        Code.I:[I
        //  1472: bipush          68
        //  1474: getstatic       Code.bj:I
        //  1477: iastore        
        //  1478: aload_1        
        //  1479: getfield        Code.I:[I
        //  1482: bipush          69
        //  1484: getstatic       Code.bi:I
        //  1487: iastore        
        //  1488: aload_1        
        //  1489: getfield        Code.I:[I
        //  1492: bipush          82
        //  1494: getstatic       Code.bF:I
        //  1497: iastore        
        //  1498: aload_1        
        //  1499: aload_1        
        //  1500: getfield        Code.I:[Ljava/lang/Object;
        //  1503: aload_1        
        //  1504: getfield        Code.I:[I
        //  1507: aload_1        
        //  1508: getfield        Code.I:[Ljava/lang/Object;
        //  1511: bipush          53
        //  1513: aaload         
        //  1514: checkcast       Ljava/lang/String;
        //  1517: aload_1        
        //  1518: getfield        Code.I:[Ljava/lang/Object;
        //  1521: bipush          38
        //  1523: aaload         
        //  1524: checkcast       Ljava/lang/String;
        //  1527: invokestatic    Code.Code:(Ljava/lang/String;Ljava/lang/String;)I
        //  1530: invokestatic    Code.Code:([Ljava/lang/Object;[II)La;
        //  1533: putfield        Code.Code:La;
        //  1536: aload_1        
        //  1537: getfield        Code.b:Z
        //  1540: ifne            1550
        //  1543: aload_1        
        //  1544: invokespecial   Code.A:()V
        //  1547: goto            1556
        //  1550: aload_1        
        //  1551: bipush          7
        //  1553: invokespecial   Code.D:(I)V
        //  1556: aload_1        
        //  1557: getfield        Code.Code:La;
        //  1560: invokevirtual   java/io/InputStream.close:()V
        //  1563: return         
        //  1564: pop            
        //  1565: aload_1        
        //  1566: iconst_5       
        //  1567: invokespecial   Code.D:(I)V
        //  1570: return         
        //  1571: pop            
        //  1572: aload_1        
        //  1573: getfield        Code.bl:I
        //  1576: iconst_5       
        //  1577: if_icmpge       1646
        //  1580: aload_1        
        //  1581: getfield        Code.C:LCode;
        //  1584: getfield        Code.C:LCode;
        //  1587: ifnull          1600
        //  1590: aload_1        
        //  1591: getfield        Code.I:[I
        //  1594: bipush          62
        //  1596: iaload         
        //  1597: ifne            1613
        //  1600: aload_1        
        //  1601: getfield        Code.I:[I
        //  1604: bipush          24
        //  1606: iaload         
        //  1607: ldc             131072
        //  1609: iand           
        //  1610: ifeq            1646
        //  1613: aload_1        
        //  1614: aconst_null    
        //  1615: invokespecial   Code.B:(LCode;)V
        //  1618: aload_1        
        //  1619: getfield        Code.I:[I
        //  1622: bipush          62
        //  1624: iconst_0       
        //  1625: iastore        
        //  1626: aload_1        
        //  1627: getfield        Code.I:[I
        //  1630: bipush          43
        //  1632: dup2           
        //  1633: iaload         
        //  1634: sipush          4096
        //  1637: ior            
        //  1638: iastore        
        //  1639: iconst_1       
        //  1640: putstatic       Code.F:Z
        //  1643: goto            787
        //  1646: aload_1        
        //  1647: getfield        Code.B:Z
        //  1650: ifne            1689
        //  1653: aload_1        
        //  1654: iconst_1       
        //  1655: putfield        Code.B:Z
        //  1658: aload_1        
        //  1659: getfield        Code.l:LCode;
        //  1662: invokevirtual   Code.I:()V
        //  1665: aload_1        
        //  1666: getfield        Code.l:LCode;
        //  1669: iconst_1       
        //  1670: invokespecial   Code.J:(Z)V
        //  1673: iconst_3       
        //  1674: invokestatic    Code.I:(I)V
        //  1677: aload_1        
        //  1678: getfield        Code.l:LCode;
        //  1681: bipush          60
        //  1683: invokespecial   Code.v:(I)V
        //  1686: goto            787
        //  1689: aload_1        
        //  1690: goto            1805
        //  1693: pop            
        //  1694: aload_1        
        //  1695: getfield        Code.d:Ljava/lang/String;
        //  1698: ifnull          1765
        //  1701: aload_1        
        //  1702: getfield        Code.d:Ljava/lang/String;
        //  1705: astore_2       
        //  1706: aload_1        
        //  1707: aconst_null    
        //  1708: putfield        Code.d:Ljava/lang/String;
        //  1711: aload_1        
        //  1712: aload_1        
        //  1713: getfield        Code.C:LCode;
        //  1716: getfield        Code.C:LCode;
        //  1719: invokespecial   Code.B:(LCode;)V
        //  1722: aload_1        
        //  1723: getfield        Code.I:[Ljava/lang/Object;
        //  1726: bipush          38
        //  1728: aload_1        
        //  1729: getfield        Code.I:[Ljava/lang/Object;
        //  1732: bipush          53
        //  1734: aaload         
        //  1735: aastore        
        //  1736: aload_1        
        //  1737: getfield        Code.I:[Ljava/lang/Object;
        //  1740: bipush          53
        //  1742: aload_2        
        //  1743: aastore        
        //  1744: aload_1        
        //  1745: getfield        Code.I:[Ljava/lang/Object;
        //  1748: bipush          42
        //  1750: aconst_null    
        //  1751: aastore        
        //  1752: aload_1        
        //  1753: getfield        Code.I:[Ljava/lang/Object;
        //  1756: bipush          77
        //  1758: getstatic       Code.a:[B
        //  1761: aastore        
        //  1762: goto            787
        //  1765: aload_1        
        //  1766: getfield        Code.b:Z
        //  1769: ifne            1817
        //  1772: aload_1        
        //  1773: getfield        Code.c:Z
        //  1776: ifeq            1787
        //  1779: aload_1        
        //  1780: iconst_0       
        //  1781: putfield        Code.c:Z
        //  1784: goto            787
        //  1787: aload_1        
        //  1788: aload_1        
        //  1789: getfield        Code.Code:La;
        //  1792: ifnull          1805
        //  1795: aload_1        
        //  1796: getfield        Code.Code:La;
        //  1799: invokevirtual   a.f:()I
        //  1802: goto            1806
        //  1805: iconst_0       
        //  1806: bipush          25
        //  1808: invokespecial   Code.e:(II)V
        //  1811: aload_1        
        //  1812: bipush          6
        //  1814: invokespecial   Code.D:(I)V
        //  1817: return         
        //  1818: pop            
        //  1819: invokestatic    Code.c:()Z
        //  1822: pop            
        //  1823: return         
        //  1824: aload_1        
        //  1825: invokespecial   Code.z:()V
        //  1828: return         
        //    StackMap: 00 43 00 1A 00 02 00 07 01 AF 00 01 07 01 E6 00 1B 00 02 00 07 01 AF 00 00 00 25 00 02 00 07 01 AF 00 01 07 01 E6 00 26 00 02 00 07 01 AF 00 00 00 30 00 02 00 07 01 AF 00 00 00 45 00 04 00 07 01 AF 07 01 AF 07 01 B3 00 00 00 8B 00 05 00 07 01 AF 07 01 AF 07 01 B3 07 01 C0 00 00 00 AA 00 02 00 07 01 AF 00 00 01 1D 00 02 00 07 01 AF 00 01 07 01 E6 01 25 00 03 00 07 01 AF 01 00 00 01 4E 00 03 00 07 01 AF 01 00 00 01 8F 00 07 00 07 01 AF 01 07 01 AF 07 01 DC 00 07 01 E1 00 00 01 A2 00 07 00 07 01 AF 01 07 01 AF 07 01 DC 00 07 01 E1 00 00 01 AB 00 05 00 07 01 AF 01 07 01 AF 07 01 DC 00 00 01 C1 00 05 00 07 01 AF 01 00 07 01 DC 00 00 01 CB 00 05 00 07 01 AF 01 00 07 01 DC 00 00 01 D1 00 05 00 07 01 AF 00 00 07 01 DC 00 01 07 01 E6 01 D7 00 03 00 07 01 AF 01 00 00 01 F3 00 03 00 07 01 AF 01 00 00 02 06 00 03 00 07 01 AF 01 00 00 02 1A 00 03 00 07 01 AF 01 00 00 02 54 00 02 00 07 01 AF 00 00 02 6D 00 02 00 07 01 AF 00 00 02 74 00 02 00 07 01 AF 00 00 02 D4 00 02 00 07 01 AF 00 00 02 DB 00 04 00 07 01 AF 00 07 01 C0 00 00 02 EF 00 02 00 07 01 AF 00 00 02 FA 00 02 00 07 01 AF 00 00 03 00 00 02 00 07 01 AF 00 01 07 01 E6 03 08 00 00 00 01 07 01 E6 03 09 00 00 00 00 03 0A 00 01 07 01 AF 00 00 03 13 00 02 00 07 01 AF 00 00 03 47 00 02 00 07 01 AF 00 00 03 79 00 02 00 07 01 AF 00 00 03 88 00 02 00 07 01 AF 00 00 03 92 00 02 00 07 01 AF 00 01 07 01 E6 03 93 00 02 00 07 01 AF 00 00 04 1E 00 02 00 07 01 AF 00 02 07 01 B8 01 04 20 00 02 00 07 01 AF 00 03 07 01 B8 01 07 01 E1 04 3B 00 02 00 07 01 AF 00 00 04 59 00 03 00 07 01 AF 01 00 00 04 6C 00 04 00 07 01 AF 01 07 01 E1 00 00 04 8B 00 04 00 07 01 AF 01 07 01 E1 00 00 04 AC 00 02 00 07 01 AF 00 00 05 21 00 02 00 07 01 AF 00 04 07 01 B5 01 01 01 05 22 00 02 00 07 01 AF 00 05 07 01 B5 01 01 01 01 05 32 00 02 00 07 01 AF 00 04 07 01 B5 01 01 01 05 3D 00 02 00 07 01 AF 00 04 07 01 B5 01 01 01 05 3E 00 02 00 07 01 AF 00 05 07 01 B5 01 01 01 01 05 58 00 02 00 07 01 AF 00 00 06 0E 00 02 00 07 01 AF 00 00 06 14 00 02 00 07 01 AF 00 00 06 1C 00 02 00 07 01 AF 00 01 07 01 C9 06 23 00 02 00 07 01 AF 00 01 07 01 DD 06 40 00 02 00 07 01 AF 00 00 06 4D 00 02 00 07 01 AF 00 00 06 6E 00 02 00 07 01 AF 00 00 06 99 00 02 00 07 01 AF 00 00 06 9D 00 02 00 07 01 AF 00 01 07 01 E6 06 E5 00 02 00 07 01 AF 00 00 06 FB 00 02 00 07 01 AF 00 00 07 0D 00 02 00 07 01 AF 00 01 07 01 AF 07 0E 00 02 00 07 01 AF 00 02 07 01 AF 01 07 19 00 00 00 00 07 1A 00 00 00 01 07 01 E6 07 20 00 02 00 07 01 AF 00 00
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                        
        //  -----  -----  -----  -----  ----------------------------
        //  20     23     26     27     Any
        //  31     34     37     38     Any
        //  42     52     776    777    Any
        //  279    282    285    293    Any
        //  66     347    768    776    Any
        //  369    459    465    471    Any
        //  470    767    768    776    Any
        //  772    775    776    777    Any
        //  793    901    1818   1824   Any
        //  908    911    914    915    Any
        //  923    1011   1564   1571   Ljava/io/EOFException;
        //  923    1011   1571   1693   Ljava/lang/OutOfMemoryError;
        //  923    1012   1693   1805   Any
        //  1029   1195   1564   1571   Ljava/io/EOFException;
        //  1029   1195   1571   1693   Ljava/lang/OutOfMemoryError;
        //  1029   1215   1693   1805   Any
        //  1225   1228   1564   1571   Ljava/io/EOFException;
        //  1225   1228   1571   1693   Ljava/lang/OutOfMemoryError;
        //  1225   1241   1693   1805   Any
        //  1286   1295   1693   1805   Any
        //  1330   1353   1571   1693   Ljava/lang/OutOfMemoryError;
        //  1330   1353   1564   1571   Ljava/io/EOFException;
        //  1330   1368   1693   1805   Any
        //  1374   1457   1564   1571   Ljava/io/EOFException;
        //  1374   1457   1571   1693   Ljava/lang/OutOfMemoryError;
        //  1514   1556   1564   1571   Ljava/io/EOFException;
        //  1514   1556   1571   1693   Ljava/lang/OutOfMemoryError;
        //  1374   1556   1693   1805   Any
        //  1560   1563   776    777    Any
        //  1567   1817   1818   1824   Any
        // 
        // The error that occurred was:
        // 
        // java.lang.ArrayIndexOutOfBoundsException: -1
        //     at java.util.ArrayList.elementData(ArrayList.java:424)
        //     at java.util.ArrayList.remove(ArrayList.java:501)
        //     at com.strobel.assembler.ir.StackMappingVisitor.pop(StackMappingVisitor.java:267)
        //     at com.strobel.assembler.ir.StackMappingVisitor$InstructionAnalyzer.execute(StackMappingVisitor.java:738)
        //     at com.strobel.assembler.ir.StackMappingVisitor$InstructionAnalyzer.visit(StackMappingVisitor.java:398)
        //     at com.strobel.decompiler.ast.AstBuilder.performStackAnalysis(AstBuilder.java:2088)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:108)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:206)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:94)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:840)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:733)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:610)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:577)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:193)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:160)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:135)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:333)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:254)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:144)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public final void run() {
        Code code = null;
        Label_0114: {
            if (!this.bc) {
                break Label_0114;
            }
            code = this;
            final String o = this.o;
            final String s = "GET";
            try {
                final J code2 = Code(o, s);
                if (Code.H) {
                    code2.Code("Test-Header", "debug");
                }
                final DataInputStream code3 = code2.Code();
                try {
                    code3.close();
                }
                finally {}
                final int i;
                if ((((i = code2.I()) >= 301 && i <= 303) || i == 307) && ++code.cH <= 4) {
                    code.o = code2.Code("Location");
                    code.run();
                }
                code2.close();
                return;
                code = this;
                iftrue(Label_0129:)(!this.aS);
                V();
                return;
            }
            finally {
                return;
            }
        }
        Label_0129: {
            final Code code4;
            if ((code4 = code).aQ) {
                Thread.currentThread().setPriority(1);
                Code code5 = code4;
            Label_0146_Outer:
                while (true) {
                    while (true) {
                        try {
                            while (true) {
                                code5.am();
                                code4.aM = false;
                                final Code c;
                                if (!(c = code4.C).v() && c.y()) {
                                    final Code k;
                                    (k = c.K).w();
                                    final int u;
                                    if ((u = k.u()) == 0) {
                                        Code.Code.Z();
                                    }
                                    else {
                                        Code.Code.Code(u, 19);
                                    }
                                }
                                if (code4.aM) {
                                    final Code c2 = code4.C;
                                    final int bn = code4.bn;
                                    final int bh = code4.bh;
                                    final int bm = code4.bm;
                                    final int br = code4.br;
                                    final int bk = code4.bk;
                                    final int c3 = code4.C;
                                    final int bl = code4.bl;
                                    final boolean c4 = code4.c;
                                    final int n = bl;
                                    final int n2 = c3;
                                    final int n3 = bk;
                                    final int n4 = br;
                                    final int n5 = bm;
                                    final int n6 = bh;
                                    final int n7 = bn;
                                    final Code code6 = c2;
                                    B code7 = null;
                                    int j = 0;
                                    B[] l;
                                    if (c4) {
                                        l = Code.J;
                                    }
                                    else {
                                        l = null;
                                    }
                                    while (j <= Code.aH) {
                                        final Code code8 = code6;
                                        final int n8 = n6;
                                        final int n9 = n5;
                                        final int n10 = n4;
                                        final int n11 = n3;
                                        final int n12 = n2;
                                        final int n13 = n;
                                        final B[] array = l;
                                        try {
                                            code7 = code8.Code(n8, n9, n10, n11, n12, n13, array);
                                        }
                                        finally {
                                            Code.J[0] = null;
                                            l = null;
                                            if (j != Code.aH) {
                                                if (code6.b && code6.L != null) {
                                                    code6.aw();
                                                }
                                                Code.Code.I();
                                                code6.K.l.J(j > 0);
                                                Code.Code.Z();
                                                ++j;
                                                continue Label_0146_Outer;
                                            }
                                        }
                                        break;
                                    }
                                    if (code7 != null || j > 0) {
                                        final Code code9;
                                        monitorenter(code9 = code6);
                                        final Code n14 = code6.N;
                                        final int n15 = n7;
                                        try {
                                            final int t = n14.t(n15);
                                            Label_0478: {
                                                if (code7 != null) {
                                                    final Code n16 = code6.N;
                                                    final int n17 = t;
                                                    final int n18 = n5 - 256;
                                                    if (n16.Code(n17, (boolean)(((n18 | -n18) >>> 31 ^ 0x1) != 0x0), code7, Code.J[0])) {
                                                        break Label_0478;
                                                    }
                                                }
                                                final int[] h = code6.N.h;
                                                final int n19 = t * 6 + 2;
                                                h[n19] |= Integer.MIN_VALUE;
                                            }
                                            code6.R(t * 6);
                                        }
                                        finally {
                                            monitorexit(code9);
                                        }
                                    }
                                    Code.J[0] = null;
                                    code5 = code4;
                                }
                                else {
                                    code4.C = null;
                                    code5 = code4;
                                }
                            }
                        }
                        finally {
                            code4.C = null;
                            code5 = code4;
                            continue Label_0146_Outer;
                        }
                        continue;
                    }
                }
            }
            else {
                final Code code10;
                if ((code10 = code4).aN) {
                    code10.af();
                    return;
                }
                final Code code11;
                if (!(code11 = code10).aM) {
                    code11.ad();
                    return;
                }
                final Code code12;
                final Code c5 = (code12 = code11).H.C;
                final Code h2;
                String s2;
                final int index;
                if ((index = (s2 = (h2 = code12.H).c).indexOf(63)) > 0) {
                    s2 = s2.substring(0, index);
                }
                final int lastIndex;
                if ((lastIndex = s2.lastIndexOf(47)) > 0) {
                    s2 = s2.substring(lastIndex + 1);
                }
                if (s2.indexOf(46) == -1 && h2.d != null && h2.d.startsWith("image/")) {
                    s2 = s2 + "." + h2.d.substring(h2.d.indexOf(47) + 1);
                }
                final String s3 = s2;
                final String d = code12.H.d;
                final String c6 = code12.H.c;
                final String s4 = d;
                final String s5 = s3;
                final Code code13 = c5;
                final String s6 = s5;
                final String s7 = s4;
                final String s8 = c6;
                final Code m = code13.K;
                final String s9 = s8;
                final String s10 = s7;
                final String s11 = s6;
                m.w();
                final String s12;
                Code(((s12 = s11) != null) ? Code.Code.C(s12) : 0);
                Code((s10 != null) ? Code.Code.C(s10) : 0);
                Code((s9 != null) ? Code.Code.C(s9) : 0);
                final int u2;
                if ((u2 = m.u()) == 0) {
                    Code.Code.Z();
                    return;
                }
                Code.Code.Code(u2, 23);
            }
        }
    }
    
    public final void Code(final Code f) {
        final Object code;
        monitorenter(code = Code.Code);
        final boolean e = Code.e;
        monitorexit(code);
        if (e) {
            final Object code2;
            monitorenter(code2 = Code.Code);
            if (!Code.e) {
                monitorexit(code2);
                return;
            }
            final Graphics code3 = f.Code;
            try {
                f.J(code3.getClipX(), f.Code.getClipY(), f.Code.getClipWidth(), f.Code.getClipHeight(), 16777215);
                e();
                int n = Code.m - Code.h / 2 - 15 - Code.J.Code.getHeight();
                if (Code.Code != null && Code.Code.Code.getHeight() <= n) {
                    final int c = C(Code.k * 40 / 100 - Code.Code.Code.getHeight() / 2, 0, n - 15 - Code.Code.Code.getHeight());
                    f.Code(Code.Code, (Code.j - Code.Code.Code.getWidth()) / 2, c);
                    final int n2;
                    if ((n2 = n - c - Code.Code.Code.getHeight()) < 15) {
                        n += (15 - n2) / 2;
                    }
                }
                f.Code(Code.J, (Code.j - Code.J.Code.getWidth()) / 2, n);
                final int min = Math.min(180, Code.j * 95 / 100);
                final int n3 = (Code.j - min) / 2;
                Code(f, Code.I, n3, Code.i, min, Code.h);
                Code(f, Code.Z, n3, Code.i, min * Code.e / 1000, Code.h);
                if (Code.Z != null) {
                    f.Code(Code.Z, (Code.j - Code.f) / 2, Code.l, Code.Code, 0);
                }
            }
            finally {
                monitorexit(code2);
            }
            final Code code4;
            C(code4);
        }
        else {
            int n4 = 0;
            Code.f = f;
            final Graphics code5 = f.Code;
            Label_0623: {
                try {
                    Code.bb = code5.getClipX();
                    Code.bc = Code.f.Code.getClipY();
                    Code.bd = Code.f.Code.getClipWidth();
                    Code.be = Code.f.Code.getClipHeight();
                    final long currentTimeMillis = System.currentTimeMillis();
                    monitorenter(this);
                    Label_0485: {
                        if (!Code.f && !Code.g) {
                            Code.f = true;
                            break Label_0485;
                        }
                        Code.j = true;
                        try {
                            this.notifyAll();
                            while (Code.j) {
                                final int n5;
                                if ((n5 = (int)(currentTimeMillis + 1000L - System.currentTimeMillis())) <= 0) {
                                    Code.j = false;
                                    this.Code(Code.bb, Code.bc, Code.bd, Code.be);
                                    monitorexit(this);
                                    Code.f = null;
                                    return;
                                }
                                this.wait(n5);
                            }
                        }
                        finally {
                            monitorexit(this);
                        }
                    }
                    n4 = 1;
                    Code.I = false;
                    Code.aM = 0;
                    Code.aN = 0;
                    Code.aO = 0;
                    Code.aP = 0;
                    Code.aQ = 0;
                    Code.aR = 0;
                    Code.aS = 0;
                    Code.aT = 0;
                    Code.aU = 0;
                    Code.aV = 0;
                    Code.aW = 0;
                    Code.aX = 0;
                    Code.aY = 0;
                    Code.aZ = 0;
                    Code.ba = 0;
                    Code.bf = 0;
                    Code.bg = 0;
                    this.w(Code.aC);
                    this.o();
                    n4 = 0;
                    final Code code6;
                    C(code6);
                    break Label_0623;
                }
                finally {
                    Label_0602: {
                        if (n4 != 0) {
                            break Label_0602;
                        }
                        try {
                            this.I();
                            n4 = 1;
                            final boolean b = false;
                            try {
                                this.J(b);
                                I(0);
                                Code.c.b(60);
                            }
                            finally {}
                            if (n4 != 0) {
                                this.Z();
                            }
                            Code.f = null;
                        }
                        finally {
                            if (n4 != 0) {
                                this.Z();
                            }
                            Code.f = null;
                        }
                    }
                }
            }
        }
    }
    
    private static void O(final int n) {
        Code.bU = 0;
        Code.bW = 4;
        Code.bX = 1 << Code.bW - 1;
        int n2 = 0;
        int n3 = Integer.MAX_VALUE;
        int n4 = 0;
        final int[] array = { 1, 31, 128, 159, 2143, 2303, 6830, 6911, 7296, 7375, 11098, 11263, 11826, 11903, 13312, 19903, 19904, 19967, 19968, 40907, 40908, 40959, 42648, 42751, 42922, 43001, 43823, 43967, 44032, 55215, 55296, 63743, 65536 };
        int n5 = 0;
        int i = 1;
        while (i <= 65535) {
            final int code = Code(n, (char)(i++));
            ++Code.bT;
            int n6 = code - n2;
            n2 = code;
            final int abs = Math.abs(n6);
            if (n6 == n3 && i - 1 != array[n5]) {
                ++n4;
            }
            else {
                if (n4 > 0) {
                    if (n4 < 4) {
                        for (int j = 0; j < n4; ++j) {
                            j(n3, Code.bW);
                        }
                        n4 = 0;
                    }
                    else {
                        j(Code.bX, Code.bW);
                        if (n4 <= 1 << (Code.bW << 1) - 1) {
                            j(n4, Code.bW << 1);
                            n4 = 0;
                        }
                        else {
                            j(2, Code.bW << 1);
                            j(n4, 16);
                            n4 = 0;
                        }
                    }
                }
                while (abs >>> Code.bW - 1 != 0) {
                    j(Code.bX, Code.bW);
                    j(1, Code.bW << 1);
                    ++Code.bW;
                    Code.bX = 1 << Code.bW - 1;
                }
                j(n6, Code.bW);
                if (i - 1 == array[n5]) {
                    n6 = 0;
                    j(0, Code.bW);
                    n4 = array[n5 + 1] - array[n5] - 1;
                    i = array[n5 + 1] + 1;
                    n5 += 2;
                }
                n3 = n6;
            }
        }
        if (n4 > 0) {
            j(Code.bX, Code.bW);
            j(2, Code.bW << 1);
            j(n4, 16);
        }
        j(Code.bX, Code.bW);
        j(3, Code.bW << 1);
        if (Code.bU != 0) {
            Code.Code.write(Code.bV << 8 - Code.bU);
        }
    }
    
    private static void ac() {
        System.gc();
        final long freeMemory = Runtime.getRuntime().freeMemory();
        Image.createImage(100, 100);
        final long n;
        if ((n = freeMemory - Runtime.getRuntime().freeMemory()) < 0L) {
            return;
        }
        if (n < 1000L) {
            Code.Q = false;
            if (!Code.W) {
                Code.aH = 2;
            }
            if (Code.B == 0) {
                final Image[] array = new Image[500];
                int i = 0;
                while (i < array.length) {
                    final Image[] array2 = array;
                    final int n2 = i;
                    final int n3 = 100;
                    final int n4 = 100;
                    try {
                        array2[n2] = Image.createImage(n3, n4);
                        if (array[i].getWidth() != 0 && array[i].getHeight() != 0) {
                            ++i;
                            continue;
                        }
                    }
                    finally {}
                    break;
                }
                if (i < array.length) {
                    Code.by = i * 100 * 100 * Code.Z / 1024;
                }
                for (int j = 0; j < array.length; ++j) {
                    array[j] = null;
                }
            }
        }
        else {
            Code.Q = true;
            final int z;
            if ((z = (int)(n / 10000L)) > 0 && z <= 4) {
                Code.Z = z;
            }
        }
    }
    
    private static void Code(int u, String s, String s2, String s3, String s4, String s5, final String s6, final Code code) {
        code.w();
        final int n = u;
        final String s7 = s;
        final String s8 = s2;
        final String s9 = s3;
        final String s10 = s4;
        s = s5;
        s2 = s10;
        s3 = s9;
        s4 = s8;
        s5 = s7;
        final int n2 = n;
        Code((s5 != null) ? Code.Code.C(s5) : 0);
        Code((s4 != null) ? Code.Code.C(s4) : 0);
        Code((s3 != null) ? Code.Code.C(s3) : 0);
        Code((s2 != null) ? Code.Code.C(s2) : 0);
        Code((s != null) ? Code.Code.C(s) : 0);
        Code((s6 != null) ? Code.Code.C(s6) : 0);
        I(n2);
        if ((u = code.u()) == 0) {
            Code.Code.Z();
            return;
        }
        Code.Code.Code(u, 24);
    }
    
    private void Code(final a a, DataInputStream bp, int n, int currentTimeMillis) {
        this.cj = (n2 << 16 | dataInputStream.readUnsignedShort()) + a.g() - n;
        final Code k = this.K;
        n = this.cj;
        k.bo += n;
        this.K.D(3);
        n = a.g();
        currentTimeMillis = (int)System.currentTimeMillis();
        final int code = Code((DataInput)dataInputStream);
        int[] array = null;
        int n3 = 0;
        int i = 0;
        while (i < code) {
            final byte byte1;
            int n4;
            if ((byte1 = dataInputStream.readByte()) >= 0) {
                n4 = dataInputStream.readUnsignedShort();
                i += n4 + 3;
            }
            else {
                n4 = dataInputStream.readInt();
                i += n4 + 5;
            }
            switch (byte1 & 0x7F) {
                case 102: {
                    Code((InputStream)dataInputStream, n4);
                    final int priority = Thread.currentThread().getPriority();
                    Thread.currentThread().setPriority(1);
                    final Code j;
                    final a code2 = (j = this.K).Code;
                    try {
                        code2.close();
                    }
                    finally {}
                    a(j.c = true);
                    Thread.currentThread().setPriority(priority);
                    continue;
                }
                case 76: {
                    this.I = dataInputStream.readByte();
                    this.cm = dataInputStream.readShort();
                    continue;
                }
                case 99: {
                    for (byte byte2 = dataInputStream.readByte(), b = 0; b != byte2; ++b) {
                        final short short1 = dataInputStream.readShort();
                        int byte3 = -1;
                        if (short1 == 1) {
                            byte3 = dataInputStream.readByte();
                        }
                        final int int1 = dataInputStream.readInt();
                        final int unsignedShort = dataInputStream.readUnsignedShort();
                        if (byte3 == 4) {
                            Code.bM = int1;
                            Code.j = dataInputStream.readUTF();
                            I("md");
                            q();
                            this.K.w();
                            final String l;
                            Code(((l = Code.j) != null) ? Code.Code.C(l) : 0);
                            Code.Code.v(29);
                        }
                        else {
                            final byte[] array2 = new byte[unsignedShort];
                            dataInputStream.readFully(array2);
                            final int n5 = byte3;
                            final int n6 = int1;
                            final byte[] array3 = array2;
                            final int n7 = n6;
                            final int n8 = n5;
                            switch (n5) {
                                case 3: {
                                    final String s = "splash";
                                    try {
                                        RecordStore.deleteRecordStore(s);
                                    }
                                    finally {}
                                    final byte[] array4 = new byte[4];
                                    Z(n7, array4, 0);
                                    final Code m = Code.J;
                                    final String s2 = "splash";
                                    final byte[] array5 = array4;
                                    try {
                                        m.Code(s2, array5);
                                        Code.n = n7;
                                        Code.J.Code("splash", array3);
                                    }
                                    catch (IOException ex) {}
                                    q();
                                    break;
                                }
                                case 17: {
                                    if (n7 != Code.bw) {
                                        I(n7, array3);
                                        q();
                                        G(Code.bw);
                                        break;
                                    }
                                    break;
                                }
                                default: {
                                    Code.Code.I();
                                    I(n8);
                                    I(n7);
                                    int o;
                                    if (!Code(n8, array3, array3.length)) {
                                        o = 0;
                                    }
                                    else {
                                        String appProperty = null;
                                        int length = array3.length;
                                        if (n8 == 31 && (appProperty = Code.Code.getAppProperty("OM-Upgrade")) != null) {
                                            length += appProperty.length() + 2;
                                        }
                                        final Code code3 = Code.Code;
                                        final int n9 = length;
                                        final Code code4 = code3;
                                        final int n10 = n9;
                                        try {
                                            f(n10);
                                        }
                                        catch (RuntimeException ex2) {
                                            code4.Z();
                                            throw ex2;
                                        }
                                        catch (Error error) {
                                            code4.Z();
                                            throw error;
                                        }
                                        System.arraycopy(array3, 0, Code.Z, Code.S, array3.length);
                                        if (appProperty != null) {
                                            Code(appProperty, Code.Z, Code.S + array3.length);
                                        }
                                        o = Code.Code.o();
                                    }
                                    Code(o);
                                    Code.Code.v(30);
                                    break;
                                }
                            }
                        }
                    }
                    continue;
                }
                case 35: {
                    for (byte byte4 = dataInputStream.readByte(), b2 = 0; b2 < byte4; ++b2) {
                        final byte byte5 = dataInputStream.readByte();
                        final int unsignedShort2 = dataInputStream.readUnsignedShort();
                        byte[] array6 = null;
                        if (unsignedShort2 > 0) {
                            array6 = new byte[unsignedShort2];
                            dataInputStream.readFully(array6);
                        }
                        final String utf = dataInputStream.readUTF();
                        final String utf2 = dataInputStream.readUTF();
                        final int int2 = dataInputStream.readInt();
                        if (byte5 <= 0 || byte5 > 9 || ((utf2.length() > 0 || utf.length() > 0 || unsignedShort2 > 0) && (utf2.length() == 0 || array6 == null || !Code(array6, 0, unsignedShort2)))) {
                            Code.Code.x(int2);
                        }
                        else {
                            this.K.w();
                            final int n11 = int2;
                            final int n12 = byte5 - 1;
                            final String s3 = utf;
                            final String s4 = utf2;
                            final byte[] array7 = (byte[])((unsignedShort2 > 0) ? array6 : null);
                            final int n13 = unsignedShort2;
                            final byte[] array8 = array7;
                            final String s5 = s4;
                            final String s6 = s3;
                            final int n14 = n12;
                            final int n15 = n11;
                            Code((s6 != null) ? Code.Code.C(s6) : 0);
                            Code((s5 != null) ? Code.Code.C(s5) : 0);
                            Code((array8 != null) ? Code.Code.Z(array8, n13) : 0);
                            I(n15);
                            I(n14);
                            Code.Code.v(31);
                        }
                    }
                    continue;
                }
                case 114: {
                    this.K.d = dataInputStream.readUTF();
                    throw new RuntimeException();
                }
                case 85: {
                    Code(dataInputStream, n4, this.K);
                    final Code k2 = this.K;
                    k2.bq += n4;
                    continue;
                }
                case 75: {
                    final int unsignedByte = dataInputStream.readUnsignedByte();
                    final String utf3 = dataInputStream.readUTF();
                    if (unsignedByte == 0) {
                        ((Object[])Code.C.get(a.I().l()))[1] = utf3;
                        continue;
                    }
                    Code(unsignedByte, utf3, true);
                    continue;
                }
                case 101: {
                    final int int3 = dataInputStream.readInt();
                    final byte byte6 = dataInputStream.readByte();
                    final String utf4 = dataInputStream.readUTF();
                    final int n16 = int3;
                    final byte b3 = byte6;
                    final Code k3 = this.K;
                    final byte b4 = b3;
                    final int n17 = n16;
                    final String s7 = utf4;
                    k3.w();
                    final String s8;
                    Code(((s8 = s7) != null) ? Code.Code.C(s8) : 0);
                    I(n17);
                    I((int)b4);
                    final int u;
                    if ((u = k3.u()) == 0) {
                        Code.Code.Z();
                        continue;
                    }
                    Code.Code.Code(u, 14);
                    continue;
                }
                case 87: {
                    dataInputStream.readUTF();
                    dataInputStream.readUTF();
                    this.q = dataInputStream.readUTF();
                    this.r = dataInputStream.readUTF();
                    for (byte byte7 = dataInputStream.readByte(), b5 = 0; b5 < byte7; ++b5) {
                        this.Code.addElement(dataInputStream.readUTF());
                    }
                    continue;
                }
                case 72: {
                    final String utf5 = dataInputStream.readUTF();
                    final String utf6 = dataInputStream.readUTF();
                    final String utf7 = dataInputStream.readUTF();
                    String s9;
                    if ((s9 = dataInputStream.readUTF()).equals("") && utf7 != null) {
                        final String s10 = "auth_server=";
                        final int index;
                        if ((index = utf7.indexOf(s10)) >= 0) {
                            final int n18 = index + s10.length();
                            final int index2;
                            if ((index2 = utf7.indexOf(38, n18)) > n18) {
                                s9 = utf7.substring(n18, index2);
                            }
                        }
                    }
                    final String s11 = s9;
                    final String s12 = utf5;
                    final String s13 = utf6;
                    final String s14 = utf7;
                    final Code k4 = this.K;
                    final String s15 = s14;
                    final String s16 = s13;
                    final String s17 = s12;
                    final String s18 = s11;
                    k4.w();
                    final String s19;
                    Code(((s19 = s18) != null) ? Code.Code.C(s19) : 0);
                    Code((s17 != null) ? Code.Code.C(s17) : 0);
                    Code((s16 != null) ? Code.Code.C(s16) : 0);
                    Code((s15 != null) ? Code.Code.C(s15) : 0);
                    final int u2;
                    if ((u2 = k4.u()) == 0) {
                        Code.Code.Z();
                        continue;
                    }
                    Code.Code.Code(u2, 21);
                    continue;
                }
                case 70: {
                    this.d = dataInputStream.readUTF();
                    this.C = dataInputStream.readLong();
                    this.c = dataInputStream.readUTF();
                    this.b = dataInputStream.readUTF();
                    for (byte byte8 = dataInputStream.readByte(), b6 = 0; b6 < byte8; ++b6) {
                        final char c = (char)dataInputStream.readByte();
                        final String utf8 = dataInputStream.readUTF();
                        switch (c) {
                            case 111: {
                                this.m = utf8;
                                break;
                            }
                            case 115: {
                                this.n = utf8;
                                break;
                            }
                        }
                    }
                    continue;
                }
                case 67: {
                    this.ct = dataInputStream.readUnsignedByte();
                    continue;
                }
                case 79: {
                    array = new int[(n3 = (n4 - 2) / 9) * 3];
                    dataInputStream.readUnsignedShort();
                    final byte[] array9 = new byte[n3 * 9];
                    dataInputStream.readFully(array9);
                    for (int n19 = 0; n19 < n3; ++n19) {
                        array[n19 * 3] = a(array9, n19 * 9);
                        array[n19 * 3 + 1] = a(array9, n19 * 9 + 3);
                        array[n19 * 3 + 2] = a(array9, n19 * 9 + 6);
                    }
                    continue;
                }
                case 68: {
                    Code(0, dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUTF(), null, null, null, this.K);
                    continue;
                }
                case 78: {
                    Code(1, dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUTF(), null, this.K);
                    continue;
                }
                case 80: {
                    Code(2, dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUTF(), this.K);
                    continue;
                }
                case 112: {
                    B(dataInputStream.readUTF());
                    continue;
                }
                case 111: {
                    final short short2 = dataInputStream.readShort();
                    if (this.b) {
                        Code.bj = this.K.bh - short2;
                        continue;
                    }
                    continue;
                }
                case 108: {
                    C.Code(dataInputStream.readInt());
                    continue;
                }
                case 103: {
                    if (!Code.p) {
                        Code.Code.r();
                        this.K.w();
                        Code.Code.v(32);
                        continue;
                    }
                    continue;
                }
                case 65: {
                    final byte[] array10 = new byte[n4];
                    dataInputStream.readFully(array10);
                    this.K.w();
                    Code(Code.Code.Z(array10, array10.length));
                    Code.Code.v(34);
                    continue;
                }
                case 73: {
                    final byte byte9 = dataInputStream.readByte();
                    final String[] code5 = new String[dataInputStream.readByte()];
                    for (int n20 = 0; n20 < code5.length; ++n20) {
                        code5[n20] = dataInputStream.readUTF();
                    }
                    if (byte9 == 99 && code5.length == 2) {
                        this.Code = code5;
                        continue;
                    }
                    continue;
                }
                default: {
                    Code((InputStream)dataInputStream, n4);
                    continue;
                }
            }
        }
        bp = (DataInputStream)((dataInputStream.readUnsignedByte() << 16) + dataInputStream.readUnsignedShort());
        this.K.bp = (int)bp;
        int n21 = 0;
        while (n21 <= 4) {
            final DataInputStream dataInputStream2 = bp;
            try {
                this.f = new byte[dataInputStream2];
            }
            finally {
                Code.Code.I();
                this.K.l.J(n21 > 1);
                if (n21 == 0) {
                    if (this.C != null) {
                        this.C.d(false);
                    }
                    Code.Code.Z();
                    ++n21;
                    continue;
                }
                if (this.C != null && this.C.cF == 0 && n21 >= Code.aH) {
                    if (!this.C.N) {
                        final Code c2;
                        (c2 = this.C).f = null;
                        c2.cG = -1;
                        c2.cs = 0;
                    }
                    this.C.d(true);
                }
                I(0 + (n21 - 1));
                Code.Code.v(60);
                ++n21;
                continue;
            }
            break;
        }
        if (this.C != null && n3 > 0 && this.C.f == null) {
            this.f = null;
            throw new OutOfMemoryError();
        }
        if (this.f == null) {
            this.f = new byte[bp];
        }
        for (int n22 = 0; n22 < n3; ++n22) {
            System.arraycopy(this.C.f, array[n22 * 3], this.f, array[n22 * 3 + 1], array[n22 * 3 + 2]);
        }
        this.C = null;
        this.U(Code.bz << 10);
        this.cr = 0;
        int n23 = 0;
        int n24 = 0;
        while (this.cr < bp) {
            while (this.cr - this.cr < 1024 && this.cr < bp) {
                final int min = Math.min(1024, Math.min((n23 < n3) ? (array[n23 * 3 + 1] - this.cr) : 1024, (int)(bp - this.cr)));
                if (n23 < n3 && this.cr == array[n23 * 3 + 1]) {
                    this.cr += array[n23 * 3 + 2];
                    ++n23;
                }
                else {
                    final int read;
                    if ((read = a.read(this.f, this.cr, min)) < 0) {
                        throw new EOFException();
                    }
                    this.cr += read;
                }
            }
            if (this.b) {
                if (this.bq == 0 && this.u()) {
                    this.au();
                    n24 = this.bq;
                    this.c(true);
                    this.N.z(this.H());
                }
                if (this.bq > 0) {
                    this.ax();
                    n24 = this.M(n24);
                }
                if (!this.aS) {
                    continue;
                }
                this.aS = false;
                if (!this.ba || this.K.I[56] == 1) {
                    continue;
                }
                final int c3 = this.C;
                final int bm = this.bm;
                final Code k5 = this.K;
                final int n25 = bm;
                final int n26 = c3;
                k5.w();
                I(n26);
                I(n25);
                final int u3;
                if ((u3 = k5.u()) == 0) {
                    Code.Code.Z();
                }
                else {
                    Code.Code.Code(u3, 16);
                }
            }
        }
        final long currentTimeMillis2 = System.currentTimeMillis();
        final int n27 = currentTimeMillis;
        final int n28;
        if ((n28 = (int)(currentTimeMillis2 - n27)) != 0L) {
            E((int)((a.g() - n) * 1000L / n28));
        }
        if (this.b) {
            if (this.cE != 0) {
                a(this.K);
            }
        }
        else {
            this.au();
            this.N.z(this.H());
            this.M(this.bq);
        }
    }
    
    private static void Code(final DataInputStream dataInputStream, int n2, final Code code) {
        final int read = dataInputStream.read();
        int i = 1;
        int n3 = read & 0x1;
        final int n4 = read & 0x2;
        final int n5 = (n4 | -n4) >>> 31;
        final int n6 = read & 0x4;
        final int n7 = (n6 | -n6) >>> 31;
        if (n5 != 0) {
            code.w();
            I(0);
            Code.Code.v(35);
            return;
        }
        final Vector vector = new Vector();
        while (i < n) {
            final int read2 = dataInputStream.read();
            final int unsignedShort = dataInputStream.readUnsignedShort();
            final int read3 = dataInputStream.read();
            final int code2 = Code((DataInput)dataInputStream);
            i += code2 + 7;
            final byte[] array;
            Code(array = new byte[code2 + 6], read2, unsignedShort, read3);
            dataInputStream.readFully(array, 6, code2);
            vector.addElement(array);
        }
        int size;
        n2 = (int)(Object)new byte[size = vector.size()];
        final Object j;
        monitorenter(j = Code.J);
        while (true) {
            if (Code.k != null) {
                final byte[] k = Code.k;
                try {
                    if (k.length == 0) {
                        if (n3 == 0) {
                            return;
                        }
                    }
                    boolean b;
                    if (n3 != 0 || Code.k == null) {
                        Y();
                        Code.l = new byte[size * 3];
                        Code.m = new byte[size];
                        for (int l = 0; l < size; ++l) {
                            final byte[] array2 = vector.elementAt(l);
                            Code.l[l * 3] = array2[2];
                            n2[l] = array2[2];
                            if (!Code(l, array2)) {
                                n3 = 1;
                                n2 = (int)(Object)new byte[0];
                                break;
                            }
                        }
                        b = true;
                    }
                    else {
                        b = false;
                        Code.l = new byte[Code.k.length];
                        System.arraycopy(Code.k, 0, Code.l, 0, Code.k.length);
                        for (int n8 = 0; n8 < size; ++n8) {
                            final byte[] array3 = vector.elementAt(n8);
                            boolean b2 = false;
                            n2[n8] = array3[2];
                            int n9 = 0;
                            while (n9 < Code.l.length / 3) {
                                if (array3[2] == Code.l[n9 * 3]) {
                                    Code.l[n9 * 3 + 1] = array3[3];
                                    Code.l[n9 * 3 + 2] = array3[4];
                                    Code.m[n9] = array3[5];
                                    if (!Code(n9, array3)) {
                                        n3 = 1;
                                        n2 = (int)(Object)new byte[0];
                                        size = 0;
                                        b2 = true;
                                        break;
                                    }
                                    b2 = true;
                                    break;
                                }
                                else {
                                    ++n9;
                                }
                            }
                            if (!b2) {
                                final int n10 = Code.l.length / 3;
                                int n11 = 1;
                                final byte[] array4;
                                (array4 = new byte[size - n8])[0] = ((byte[])vector.elementAt(n8))[2];
                                for (int n12 = n8 + 1; n12 < size; ++n12) {
                                    final byte[] array5 = vector.elementAt(n12);
                                    boolean b3 = false;
                                    for (int n13 = 0; n13 < n10; ++n13) {
                                        if (array5[2] == Code.l[n13 * 3]) {
                                            b3 = true;
                                            break;
                                        }
                                    }
                                    if (!b3) {
                                        array4[n11++] = ((byte[])vector.elementAt(n12))[2];
                                    }
                                }
                                final byte[] m = new byte[(n10 + n11) * 3];
                                final byte[] m2 = new byte[n10 + n11];
                                System.arraycopy(Code.l, 0, m, 0, n10 * 3);
                                System.arraycopy(Code.m, 0, m2, 0, n10);
                                Code.l = m;
                                Code.m = m2;
                                b = true;
                                for (int n14 = 0; n14 < n11; ++n14) {
                                    Code.l[(n10 + n14) * 3] = array4[n14];
                                }
                                --n8;
                            }
                        }
                    }
                    if (b) {
                        X();
                        if (Code.k == null) {
                            n3 = 1;
                            n2 = (int)(Object)new byte[0];
                        }
                    }
                    else {
                        aa();
                    }
                }
                finally {
                    monitorexit(j);
                }
                code.w();
                final int n15 = n2;
                final int length = n2.length;
                final int n16 = n3;
                final int n17 = n7;
                n = n16;
                Code(Code.Code.Z((byte[])(Object)n15, length));
                I(n);
                I(n17);
                Code.Code.v(33);
                return;
            }
            continue;
        }
    }
    
    private void at() {
        final String s = "\u00d6\u00c5\u8ba4\u5343I[jg";
        final int i = this.I(s);
        final int code = this.Code(s.charAt(0));
        final int n = this.a() + 10;
        final B code3;
        final Code code2 = (code3 = Code(i, n)).Code();
        final int[] array = new int[i];
        code2.J(0, 0, i, n, 16777215);
        code3.Code(array, 1, 0, 0, 1, 1);
        final int n2 = array[0];
        code2.Code(s, 0, 10, this, 0);
        int n3 = 0;
        int n4 = 0;
        int n5 = 0;
        int n6 = 0;
        for (int j = n - 1; j >= 0; --j) {
            code3.Code(array, i, 0, j, i, 1);
            for (int k = 0; k < i; ++k) {
                if (array[k] != n2) {
                    if (n5 == 0) {
                        n5 = 1;
                        n4 = j + 1 - n;
                    }
                    n6 = ((k >= code) ? 1 : 0);
                    n3 = -j;
                }
            }
        }
        if (n6 != 0) {
            ++n3;
        }
        final byte[] array2;
        (array2 = new byte[2])[0] = (byte)(n3 + 10);
        array2[1] = (byte)n4;
        final byte[] array3 = array2;
        this.I = array3[0];
        this.Code = array3[1];
    }
    
    private synchronized void af() {
        Code.l = "-";
        Code code = null;
        OutputStream code2 = null;
        DataInputStream code3 = null;
        if (this.w) {
            if (this.bo != 1 && this.bo != 2 && !this.aM && (this.bh < this.bn || this.bn == -1)) {
                this.ai();
            }
            this.ah();
            final OutputStream outputStream = null;
            InputStream inputStream;
            try {
                outputStream.close();
            }
            finally {
                inputStream = null;
            }
            try {
                inputStream.close();
            }
            finally {}
            this.ak();
            if (!this.aE) {
                this.al();
            }
            this.ae();
            return;
        }
        this.aM = false;
        this.aE = true;
        final Code i = Code.I;
        final String c = this.c;
        final boolean b = true;
        final int n = 3;
        try {
            code = i.Code(c, b, n);
            this.c = code.Code.getURL();
            int bh = 0;
            this.bh = 0;
            if (this.bo == 4) {
                bh = (int)code.Z();
                this.bh = bh;
                this.ah();
            }
            code2 = code.Code((long)bh);
            this.bo = 4;
            this.ah();
            int bn = -1;
            boolean b2 = false;
            int n2 = 1;
            if (!this.aM) {
                int n3 = 0;
                this.ak();
                if (this.L) {
                    Code.l = "NB";
                    final String d;
                    String string;
                    if ((d = this.d) == null) {
                        string = d;
                    }
                    else {
                        final StringBuffer sb = new StringBuffer(d.length());
                        for (int j = 0; j < d.length(); ++j) {
                            final char char1;
                            if ((char1 = d.charAt(j)) <= '\u007f') {
                                if (char1 == '%' || char1 <= ' ') {
                                    Code(sb, char1);
                                }
                                else {
                                    sb.append(char1);
                                }
                            }
                            else {
                                if (char1 > '\u07ff') {
                                    Code(sb, (char)(0xE0 | (char1 >> 12 & 0xF)));
                                    Code(sb, (char)(0x80 | (char1 >> 6 & 0x3F)));
                                }
                                else {
                                    Code(sb, (char)(0xC0 | (char1 >> 6 & 0x1F)));
                                }
                                Code(sb, (char)(0x80 | (char1 & '?')));
                            }
                        }
                        string = sb.toString();
                    }
                    this.a = Code(string, "GET");
                    final int n4 = (this.bm > 0) ? (bh + this.bm - 1) : 0;
                    if (bh != 0 || n4 != 0) {
                        this.a.Code("Range", "bytes=" + bh + "-" + ((n4 != 0) ? new StringBuffer().append(n4).toString() : ""));
                    }
                    final int k = this.a.I();
                    int n6;
                    if (bh == 0 && n4 == 0) {
                        final int n5 = k - 200;
                        n6 = (n5 | -n5) >>> 31;
                    }
                    else {
                        final int n7 = k - 206;
                        n6 = (n7 | -n7) >>> 31;
                    }
                    n3 = n6;
                    code3 = this.a.Code();
                    final long code4;
                    if ((code4 = this.a.Code()) >= 0L) {
                        bn = bh + (int)code4;
                    }
                }
                else {
                    final Object[] array = new Object[110];
                    final int[] array2;
                    (array2 = new int[110])[29] = 2;
                    array2[37] = bh;
                    final int[] array3 = array2;
                    final int n8 = 43;
                    array3[n8] |= 0x1000000;
                    array2[106] = this.bl;
                    array[53] = this.d;
                    this.Code = Code(array, array2, Code(this.b, (String)null));
                    code3 = new DataInputStream(this.Code);
                    if ((bn = this.Code(code3)) <= 0) {
                        if (a(bn)) {
                            if ((bn & 0x1000000) != 0x0 || (bn & 0x40000000) == 0x0) {
                                n3 = 1;
                            }
                            else {
                                b2 = true;
                                final int n9 = bn & 0x10000000;
                                n2 = (n9 | -n9) >>> 31;
                                bn = this.Code(code3);
                            }
                        }
                        else if (bn < 0) {
                            n3 = 1;
                        }
                    }
                    if (b2) {
                        Code.l = "BS";
                    }
                    else {
                        Code.l = "B";
                    }
                }
                if (n3 != 0) {
                    this.ai();
                    if (this.bo != 1 && this.bo != 2 && !this.aM && (this.bh < this.bn || this.bn == -1)) {
                        this.ai();
                    }
                    this.ah();
                    final OutputStream outputStream2 = code2;
                    DataInputStream dataInputStream;
                    try {
                        outputStream2.close();
                    }
                    finally {
                        dataInputStream = code3;
                    }
                    try {
                        dataInputStream.close();
                    }
                    finally {}
                    if (code != null) {
                        e.Code(code.Code);
                    }
                    this.ak();
                    if (!this.aE) {
                        this.al();
                    }
                    this.ae();
                    return;
                }
            }
            if (!b2) {
                this.bn = bn;
            }
            final byte[] array4 = new byte[Code.bK];
            this.ah();
            while (!this.aM) {
                if (bn != 0) {
                    final int read;
                    if ((read = code3.read(array4, 0, (bn == -1) ? Code.bK : Math.min(bn, Code.bK))) == -1) {
                        if (this.bn == -1) {
                            this.bn = this.bh;
                            break;
                        }
                        break;
                    }
                    else {
                        code2.write(array4, 0, read);
                        this.bh += read;
                        if (bn > 0) {
                            bn -= read;
                        }
                        this.bm -= read;
                        Code(0L, read, read);
                        if (!b2 && this.bh == this.bn) {
                            break;
                        }
                    }
                }
                if (bn == 0) {
                    if (n2 != 0 || !b2) {
                        this.bn = this.bh;
                        break;
                    }
                    final int code5;
                    if (!a(code5 = this.Code(code3)) || (code5 & 0x20000000) == 0x0 || (code5 & 0x1000000) != 0x0) {
                        this.ai();
                        break;
                    }
                    final int n10 = code5 & 0x10000000;
                    n2 = (n10 | -n10) >>> 31;
                    bn = this.Code(code3);
                }
                Thread.yield();
            }
            code2.flush();
            if (this.bo != 1 && this.bo != 2 && !this.aM && (this.bh < this.bn || this.bn == -1)) {
                this.ai();
            }
            this.ah();
            final OutputStream outputStream3 = code2;
            DataInputStream dataInputStream2;
            try {
                outputStream3.close();
            }
            finally {
                dataInputStream2 = code3;
            }
            try {
                dataInputStream2.close();
            }
            finally {}
            if (code != null) {
                e.Code(code.Code);
            }
            this.ak();
            if (!this.aE) {
                this.al();
            }
            this.ae();
        }
        finally {
            if (this.bo != 1 && this.bo != 2 && !this.aM && (this.bh < this.bn || this.bn == -1)) {
                this.ai();
            }
            this.ah();
            final OutputStream outputStream4 = code2;
            DataInputStream dataInputStream3;
            try {
                outputStream4.close();
            }
            finally {
                dataInputStream3 = code3;
            }
            try {
                dataInputStream3.close();
            }
            finally {}
            if (code != null) {
                e.Code(code.Code);
            }
            this.ak();
            if (!this.aE) {
                this.al();
            }
            this.ae();
        }
    }
    
    private void J(String s) {
        final String s2 = "odp:component";
        final String s3 = s;
        final String s4 = s2;
        final int length = s2.length();
        final int n = (s3.length() != length + 2 || !s3.startsWith(s4)) ? -1 : ((s3.charAt(length) - 'A') * 26 + (s3.charAt(length + 1) - 'A'));
        this.aK = (n < 0);
        int i = 0;
    Label_0098_Outer:
        while (i <= 4) {
            while (true) {
                if (!this.aK) {
                    final int n2 = n;
                    try {
                        this.f = B(n2);
                        while (true) {
                            if (this.f == null) {
                                this.K.D(7);
                                return;
                            }
                            break;
                            this.f = Code.I.Code(s);
                            continue Label_0098_Outer;
                        }
                    }
                    finally {
                        Code.Code.I();
                        this.K.l.J(i > 1);
                        if (i == 0) {
                            if (this.C != null) {
                                this.C.d(false);
                            }
                            Code.Code.Z();
                            ++i;
                            continue Label_0098_Outer;
                        }
                        I(0 + (i - 1));
                        Code.Code.v(60);
                        ++i;
                        continue Label_0098_Outer;
                    }
                    break;
                }
                continue;
            }
        }
        if (this.f == null) {
            this.K.D(7);
            return;
        }
        if (!this.aK && this.f.length == 0) {
            s = (String)this;
            monitorenter(this);
            this.cv = 1;
            this.bo = 0;
            this.bh = 0;
            this.h = null;
            this.cE = 0;
            this.p = "";
            this.o = "";
            this.ba = false;
            this.ck = 0;
            this.aF = false;
            this.bl = 0;
            this.cw = 0;
            this.cl = 0;
            this.bk = 2;
            this.bq = 2;
            final int n3 = 2;
            try {
                this.f = new byte[n3];
                this.cr = 2;
            }
            finally {
                monitorexit(s);
            }
            this.M(this.bq);
            this.c(true);
            this.K.D(5);
            return;
        }
        final int n4 = 0;
        try {
            if (this.F(n4) != 16) {
                this.K.D(7);
                return;
            }
            this.cr = this.f.length;
            this.au();
            this.M(this.bq);
            this.c(true);
            if (this.cE != 0) {
                a(this.K);
            }
            this.K.D(5);
        }
        finally {
            this.K.D(7);
        }
    }
    
    private void au() {
        monitorenter(this);
        this.cD = 0;
        try {
            this.O();
            this.cv = this.N();
            this.bo = this.L();
            this.bh = this.N();
            if ((this.ct & 0x1) != 0x0) {
                this.bh = 0;
            }
            this.cl = this.cD;
            this.cD += this.N();
            final int n;
            if ((n = this.N()) > 0) {
                this.h = new byte[n];
                System.arraycopy(this.f, this.cD, this.h, 0, n);
                this.cD += n;
            }
            this.cw = this.cD;
            this.p = this.j();
            this.o = this.k();
            final int o = this.O();
            this.ba = ((o & 0x1) != 0x0);
            this.ck = (o & 0x6) >>> 1;
            final int n2 = o & 0x10;
            this.aF = ((n2 | -n2) >>> 31 != 0);
            if (!this.aK) {
                final int n3 = o & 0x8;
                this.aU = ((n3 | -n3) >>> 31 != 0);
                if (this.n != null || this.m != null) {
                    final String d = this.d;
                    final String c = this.c;
                    final String b = this.b;
                    final String m = this.m;
                    final String n4 = this.n;
                    final long c2 = this.C;
                    final int au = this.aU ? 1 : 0;
                    final Code k = this.K;
                    final int n5 = au;
                    final long n6 = c2;
                    final String s = n4;
                    final String s2 = m;
                    final String s3 = b;
                    final String s4 = c;
                    final String s5 = d;
                    k.w();
                    final String s6;
                    Code(((s6 = s5) != null) ? Code.Code.C(s6) : 0);
                    Code((s4 != null) ? Code.Code.C(s4) : 0);
                    Code((s3 != null) ? Code.Code.C(s3) : 0);
                    Code((s2 != null) ? Code.Code.C(s2) : 0);
                    Code((s != null) ? Code.Code.C(s) : 0);
                    Code(Code.Code.I(n6));
                    I(n5);
                    final int u;
                    if ((u = k.u()) == 0) {
                        Code.Code.Z();
                    }
                    else {
                        Code.Code.Code(u, 22);
                    }
                }
            }
            this.bl = this.N();
            this.bk = this.L();
            this.bq = this.cD;
        }
        finally {
            monitorexit(this);
        }
    }
    
    private static Object[] Code(String s) {
        for (s = s.toLowerCase(); s.startsWith("<"); s = s.substring(s.indexOf(62) + 1)) {}
        final int index;
        String substring;
        if ((index = s.indexOf(58)) != -1 && (substring = s.substring(0, index)).indexOf(46) == -1) {
            s = s.substring(index + 1);
        }
        else {
            substring = "http";
        }
        String s2;
        Integer n;
        if (!Code.a.containsKey(substring)) {
            s2 = "";
            n = Code.Code;
        }
        else {
            if (s.startsWith("//")) {
                s = s.substring(2);
            }
            final int index2;
            if ((index2 = s.indexOf(63)) != -1) {
                s = s.substring(0, index2);
            }
            final int index3;
            if ((index3 = s.indexOf(47)) != -1) {
                s2 = s.substring(0, index3);
                s = s.substring(index3);
            }
            else {
                s2 = s;
                s = "";
            }
            final int index4;
            if ((index4 = s2.indexOf(64)) != -1) {
                s2 = s2.substring(index4 + 1);
            }
            if (s2.startsWith("www.")) {
                s2 = s2.substring(4);
            }
            final int index5;
            if ((index5 = s2.indexOf(58)) != -1) {
                n = Integer.valueOf(s2.substring(index5 + 1));
                s2 = s2.substring(0, index5);
            }
            else {
                n = Code.a.get(substring);
            }
        }
        return new Object[] { substring, s2, n, s };
    }
    
    private static char Code(final char c) {
        if (c >= ' ' && c <= '\u00ff') {
            return (char)(c - ' ');
        }
        if (c >= '\u0410' && c <= '\u044f' && Code.aJ) {
            return (char)(c - '\u0330');
        }
        if (Code.aJ) {
            switch (c) {
                case '\u0401': {
                    return '\u0120';
                }
                case '\u0451': {
                    return '\u0121';
                }
                case '\u0407': {
                    return '\u0122';
                }
                case '\u0457': {
                    return '\u0123';
                }
                case '\u040e': {
                    return '\u0124';
                }
                case '\u045e': {
                    return '\u0125';
                }
                case '\u0491': {
                    return '\u0126';
                }
                case '\u0492': {
                    return '\u0127';
                }
                case '\u0406': {
                    return '\u0128';
                }
                case '\u0456': {
                    return '\u0129';
                }
            }
        }
        switch (c) {
            case '\u2022': {
                return 'u';
            }
            case '\u2013': {
                return 'v';
            }
            case '\u2026': {
                return 'e';
            }
            case '\u20ac': {
                return 'f';
            }
            case '\u2020': {
                return 'g';
            }
            case '\u2030': {
                return 'h';
            }
            case '\u201e': {
                return 'i';
            }
            case '\u2122': {
                return 'j';
            }
            case '\u201d': {
                return 't';
            }
            case '\u2014': {
                return 'w';
            }
            case '\u201c': {
                return 's';
            }
            case '\u2018': {
                return 'q';
            }
            case '\u2019': {
                return 'r';
            }
            default: {
                return (char)(Code.cf - 1);
            }
        }
    }
    
    private B Code(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7) {
        B code = null;
        int i = 0;
        B[] z = Code.Z;
        if (!this.N.I(256 * Code.Z)) {
            z = null;
        }
        while (i <= 2) {
            final B[] array = z;
            try {
                code = this.Code(n2, n3, n4, n5, n6, n7, array);
            }
            finally {
                Code.Z[0] = null;
                z = null;
                if (i <= 1) {
                    if ((this.b || i > 0) && this.L != null) {
                        this.aw();
                    }
                    if (i > 0) {
                        this.aR = false;
                    }
                    if (i == 0) {
                        this.e(false);
                        ++i;
                        continue;
                    }
                    this.av();
                    final Code l = this.K.l;
                    if (Code.I + 5000L < System.currentTimeMillis()) {
                        l.J(false);
                    }
                    ++i;
                    continue;
                }
            }
            break;
        }
        if (code != null && this.N.I(1)) {
            final Code n8 = this.N;
            final int n9 = n3 - 256;
            if (!n8.Code(n, (boolean)(((n9 | -n9) >>> 31 ^ 0x1) != 0x0), code, Code.Z[0])) {
                this.e(false);
            }
        }
        Code.Z[0] = null;
        return code;
    }
    
    private B Code(final int n, final int n2, int max, int max2, final int n3, final int n4, B[] array) {
        boolean b = false;
        array = (B[])((this.aR && max <= 0 && max2 <= 0) ? array : null);
        if (max <= 0 || max2 <= 0) {
            b = true;
        }
        else if (n2 < 256 && n2 > 0) {
            max = Math.max(1, this.P(n3 + max) - this.P(n3));
            max2 = Math.max(1, this.P(n4 + max2) - this.P(n4));
        }
        if (b) {
            return Code.Z.Code(this.f, n + 2, B(this.f, n), n2, array, false);
        }
        return Code.Z.Code(this.f, n + 2, B(this.f, n), max, max2, -1, array, false);
    }
    
    private Object Code(int code, final String s, final String s2, int u, String substring, final String s3) {
        int i = Math.max(5524, substring.length());
        if (Code.cb > 0) {
            i = Code.cb;
        }
        if (n != -1) {
            i = Math.min(i, n);
        }
    Label_0092_Outer:
        while (i > 255) {
            if (substring.length() > i) {
                substring = substring.substring(0, i);
            }
            while (true) {
                if (!Code.au) {
                    Label_0154: {
                        Label_0230: {
                            try {
                                Code.Code = new TextBox("", substring, i, u(u));
                                ((TextBox)(code = (int)Code.Code)).setTitle("");
                                ((TextBox)code).setString("");
                                u = u(u);
                                if (Code.at) {
                                    u &= 0xFFFEFFFF;
                                }
                                ((TextBox)code).setConstraints(u);
                                ((TextBox)code).setMaxSize(i);
                                ((TextBox)code).setString(substring);
                            }
                            finally {
                                break Label_0230;
                            }
                            break Label_0154;
                        }
                        i -= i / 10;
                        continue Label_0092_Outer;
                    }
                    ((TextBox)code).setTitle(s3 + " (" + ((TextBox)code).getMaxSize() + ")");
                    this.Code(new Command(s2, 4, 0), new Command(s, 3, 0));
                    ((Displayable)code).setCommandListener((CommandListener)Code.Code);
                    Code.Code.setCurrent((Displayable)code);
                    return code;
                }
                continue;
            }
        }
        return null;
    }
    
    private Code(final Code c) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aU = true;
        this.C = c;
        this.B = new B(c);
        this.a = new B(c);
        this.aE = false;
    }
    
    private Code(final int ch, final int ci, final String o, final int b, final int cq, final String q, final String d) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.bd = true;
        this.cH = ch;
        this.cI = ci;
        this.o = o;
        this.b = b;
        this.cq = cq;
        this.q = q;
        this.d = d;
    }
    
    private static boolean I(final String s, final String s2) {
        final int length = s2.length();
        final int length2 = s.length();
        int n = 0;
        int n2 = -1;
        if (length2 == 0 && length == 0) {
            return true;
        }
        if (length2 == 0) {
            return false;
        }
        do {
            final int index;
            final String s3 = ((index = s.indexOf(42, n2 + 1)) != -1) ? s.substring(n2 + 1, index) : s.substring(n2 + 1);
            final int n3 = n;
            final String s4 = s3;
            final int n4;
            if ((n4 = ((s4.length() == 0 && n3 == s2.length()) ? n3 : s2.indexOf(s4, n3))) == -1) {
                return false;
            }
            if (n == 0 && n4 > 0 && s.charAt(0) != '*') {
                return false;
            }
            if (n2 == length2 - 1) {
                return true;
            }
            n = n4 + s3.length();
            n2 = index;
        } while (n < length || n2 != -1);
        return true;
    }
    
    private static boolean Code(final byte[] array, final int n, final byte[] array2, final int n2, int n3) {
        while (n3-- > 0) {
            if (array[n + n3] != array2[n2 + n3]) {
                return false;
            }
        }
        return true;
    }
    
    private void Code(final byte[] array, final int n) {
        this.h[this.b++] = ((array[n] & 0xFF) << 24 | (array[n + 1] & 0xFF) << 16 | (array[n + 2] & 0xFF) << 8 | (array[n + 3] & 0xFF));
        if (this.b == 16) {
            this.L();
        }
    }
    
    private Code(final String o) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.bc = true;
        this.o = o;
    }
    
    private static void a(final Code code) {
        code.w();
        final int u;
        if ((u = code.u()) == 0) {
            Code.Code.Z();
            return;
        }
        Code.Code.Code(u, 17);
    }
    
    private void I(final B b) {
        this.B.Code(b);
    }
    
    private void Z(final B b) {
        this.a.Code(b);
    }
    
    private Code(final String c, final String d, final int cp, final String b, final int bm) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aW = true;
        this.c = c;
        this.d = d;
        this.cp = cp;
        this.b = b;
        this.bm = bm;
    }
    
    public Code(final Code b, final short n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        Code.f = true;
        Code.aA = -1;
        Code.I = new Vector();
        Code.o = true;
        Code.Code = this;
        Code.b = b;
    }
    
    private Code(final Code c, final int cp, final int bm, final int cs) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aV = true;
        this.C = c;
        this.cp = cp;
        this.bm = bm;
        this.cs = cs;
    }
    
    private Code(final int bm, final int bl, final int a, final int bq, final int bk, final int br) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aL = true;
        this.bm = bm;
        this.bl = bl;
        this.a = a;
        this.bq = bq;
        this.bk = bk;
        this.br = br;
    }
    
    private void A() {
        Code c = this.C;
        int n = 1;
        while (true) {
            final DataInputStream dataInputStream = new DataInputStream(this.Code);
            final int g = this.Code.g();
            int unsignedByte = 0;
            int unsignedByte2;
            while ((unsignedByte2 = dataInputStream.readUnsignedByte()) == 255) {
                unsignedByte = dataInputStream.readUnsignedByte();
                if (n == 1) {
                    this.D(2);
                }
                this.bm = unsignedByte;
            }
            if (n > 1) {
                c = new Code(this, this.C, false, this.C);
            }
            c.Code(this.Code, dataInputStream, g, unsignedByte2);
            if (n > 1) {
                Code.Code.I();
                this.C.L = null;
                final Code code = c;
                final int n2 = this.bk + 2;
                try {
                    final int l = l(n2);
                    if (this.b != null && l != 0) {
                        code.Code(this.b, (int[])null, l);
                    }
                    final Code m = new Code(code, (byte)0);
                    if (this.m.b && code.Code(m, l, this.m)) {
                        m.b = true;
                    }
                    this.m = m;
                    final Code n3 = new Code(code);
                    if (this.n.aE && code.I(n3, l, this.n)) {
                        n3.aE = true;
                    }
                    this.n = n3;
                    this.C = c;
                }
                finally {
                    Code.Code.Z();
                }
                this.C.c(false);
            }
            else {
                Thread.currentThread().setPriority(1);
            }
            if (unsignedByte == 100) {
                this.D(4);
            }
            ++n;
        }
    }
    
    private static int Code(int int1, final DataInputStream dataInputStream) {
        Code((InputStream)dataInputStream, 4 * (int1 & 0x7FFF));
        int1 = dataInputStream.readInt();
        final int n = dataInputStream.readInt() + 4 - int1;
        Code((InputStream)dataInputStream, int1);
        return n;
    }
    
    private static int[] Code(final byte[] array, final int n, final int n2) {
        final int[] array2;
        int length = (array2 = new int[n2 / 4]).length;
        while (--length >= 0) {
            array2[length] = (array[n + (length << 2)] << 24 | (array[n + (length << 2) + 1] & 0xFF) << 16 | (array[n + (length << 2) + 2] & 0xFF) << 8 | (array[n + (length << 2) + 3] & 0xFF));
        }
        return array2;
    }
    
    private static Code Code(final int n) {
        String code = null;
        String s = null;
        int ci = 0;
        String q = null;
        int b = 0;
        int cq = 0;
        final Code[] array;
        (array = new Code[3])[0] = Code.y;
        array[1] = Code.z;
        final Code[] array2 = array;
        final int n2 = 2;
        while (true) {
            for (int i = 0; i < Code.I.length; ++i) {
                if (Code.I[i].cH == n) {
                    final Code code2 = Code.I[i];
                    array2[n2] = code2;
                    int n3 = 0;
                    for (int j = 0; j < 3; ++j) {
                        final Code code3;
                        if ((code3 = array[j]) != null) {
                            if (code3.o.length() != 0) {
                                code = (s = code3.o);
                                n3 = j;
                            }
                            if (code3.q.length() != 0) {
                                q = code3.q;
                            }
                            ci = code3.cI;
                            b = code3.b;
                            cq = code3.cq;
                        }
                    }
                    if (n3 == 2) {
                        s = d(s);
                    }
                    else if (n != 0) {
                        code = Code(code, n);
                    }
                    return new Code(n, ci, code, b, cq, q, s);
                }
            }
            final Code code2 = null;
            continue;
        }
    }
    
    private static Vector I(String code) {
        Vector<Code> vector = null;
        DataInputStream dataInputStream = null;
        final String s = code;
        DataInputStream dataInputStream2;
        try {
            final int size;
            if ((size = ((Vector)(code = (String)Code(s))).size()) == 0) {
                final InputStream inputStream = null;
                try {
                    inputStream.close();
                }
                finally {
                    return null;
                }
            }
            vector = new Vector<Code>(size);
            for (int i = 0; i < size; ++i) {
                final Code code2 = new Code('\0', (short)0);
                (dataInputStream = new DataInputStream(new ByteArrayInputStream((byte[])((Vector<Object>)code).elementAt(i)))).read();
                final Code code3 = code2;
                String substring = null;
                Label_0164: {
                    final String utf;
                    if ((utf = dataInputStream.readUTF()) != null && utf.length() > 0) {
                        final int index = utf.indexOf(47);
                        if (Character.isDigit(utf.charAt(0)) && (index == 1 || index == 2) && index + 1 < utf.length()) {
                            substring = utf.substring(index + 1);
                            break Label_0164;
                        }
                    }
                    substring = utf;
                }
                code3.d = substring;
                code2.b = dataInputStream.readUTF();
                code2.az = i;
                final short short1;
                if ((short1 = dataInputStream.readShort()) > 0) {
                    final byte[] array = new byte[short1];
                    dataInputStream.readFully(array);
                    final Code z = Code.Z;
                    final byte[] array2 = array;
                    final byte[] array3 = array;
                    try {
                        final B code4;
                        if ((code4 = z.Code(array2, array3.length, true)).Code.getWidth() == 16 && code4.Code.getHeight() == 16) {
                            code2.f = array;
                        }
                    }
                    finally {}
                    code2.f = array;
                }
                if ((dataInputStream.readByte() & 0x8) != 0x0) {
                    dataInputStream.readByte();
                    if (dataInputStream.readByte() == 82) {
                        continue;
                    }
                }
                if (!code2.d.startsWith("o:") && code2.d.length() != 0 && !code2.d.equals("www.")) {
                    vector.addElement(code2);
                }
            }
            dataInputStream2 = dataInputStream;
            dataInputStream2.close();
        }
        finally {
            final DataInputStream dataInputStream3 = dataInputStream;
            dataInputStream3.close();
            return vector;
        }
        try {
            dataInputStream2.close();
            final DataInputStream dataInputStream3 = dataInputStream;
            dataInputStream3.close();
            return vector;
        }
        finally {
            return vector;
        }
    }
    
    private static int Code(final Hashtable hashtable, final String s) {
        int n = -1;
        int n2 = 0;
        int i;
        do {
            if ((i = s.indexOf(0, n2)) < 0) {
                i = s.length();
            }
            final int n3 = n2;
            final int n4 = i;
            try {
                final int int1 = Integer.parseInt(s.substring(n3, n4));
                final Integer n5 = new Integer(int1);
                hashtable.put(n5, n5);
                if (int1 < n || n < 0) {
                    n = int1;
                }
            }
            catch (Exception ex) {}
            n2 = i + 1;
        } while (i < s.length());
        return n;
    }
    
    private void ai() {
        this.bo = 3;
        this.aj();
    }
    
    private Code(final byte b) {
    }
    
    private Code(final short n) {
        this.d = true;
        this.a = true;
        this((byte)0);
        this.b = -1;
    }
    
    private Code(final char c) {
        this.d = true;
        this((byte)0);
        this.C = -1;
        this.a = -1;
        this.b = -1;
    }
    
    private int f() {
        if (this.c) {
            return -1;
        }
        if (this.b) {
            return -1;
        }
        if (this.a) {
            return this.b;
        }
        return this.C;
    }
    
    public final void Z(final boolean b) {
    Label_0000:
        while (true) {
            while (true) {
                this.i(0, 6);
                this.v.d(this.g, 0, 6);
                int b2;
                if ((b2 = B(this.g, 4)) > 1014) {
                    throw new IOException();
                }
                this.i(6, b2);
                this.Z = System.currentTimeMillis();
                this.v.d(this.g, 6, b2);
                this.t.A(this.a++);
                this.t.B(this.g, 4, b2 + 2);
                this.t.C(this.g, 1020, 4);
                if (this.g[1020] != this.g[0] || this.g[1021] != this.g[1] || this.g[1022] != this.g[2] || this.g[1023] != this.g[3]) {
                    throw new IOException();
                }
                final byte b3 = this.g[6];
                final byte b4 = this.g[7];
                b2 -= 2;
                switch (b3) {
                    case 11: {
                        this.Z.I(this);
                        this.Z.I(this.g, 8, b2);
                        if (b) {
                            return;
                        }
                    }
                    case 6:
                    case 10: {
                        a code = this.Code((int)b4);
                        int n = 8;
                        int n2 = 0;
                    Label_0346:
                        while (code != null) {
                            while (true) {
                                while (code.Code() == null) {
                                    if (code.Z()) {
                                        code = null;
                                        if (n2 != 0) {
                                            continue Label_0000;
                                        }
                                        continue Label_0346;
                                    }
                                    else {
                                        Code((Object)code, 1000);
                                    }
                                }
                                int n3 = Math.min(code.B(), b2);
                                switch (b3) {
                                    case 10: {
                                        System.arraycopy(this.g, n, code.Code(), code.J(), n3);
                                        final int n4 = n3 - b2;
                                        n2 = ((n4 | -n4) >>> 31 ^ 0x1);
                                        code.J(n3);
                                        break;
                                    }
                                    case 11: {
                                        final int n5 = n3 = this.Z.read(code.Code(), code.J(), code.B());
                                        n2 = ((n5 | -n5) >>> 31 ^ 0x1);
                                        code.J(this.Z.e());
                                        break;
                                    }
                                    case 6: {
                                        code.J();
                                        Code(code, true);
                                        if (!this.I()) {
                                            this.J = this.Z;
                                        }
                                        if (this.h[50] == 1) {
                                            Code.ak = false;
                                            I("md");
                                            continue Label_0000;
                                        }
                                        continue Label_0000;
                                    }
                                }
                                code.Code(n3);
                                n += n3;
                                b2 -= n3;
                                continue;
                            }
                        }
                        if (b3 == 11) {
                            while (this.Z.read(null, 0, 1024) > 0) {}
                            continue;
                        }
                        continue;
                    }
                    case 7: {
                        this.H((int)b4);
                        continue;
                    }
                    case 9: {
                        this.bo = Math.max(this.bo - 1, 0);
                        this.Code((int)b4).I();
                        a(false);
                        continue;
                    }
                    case 4: {
                        this.C(true);
                        continue;
                    }
                    case 15: {
                        if (this.h != null) {
                            System.arraycopy(this.g, 8, this.h, 0, 8);
                            this.C(this.x = true);
                            return;
                        }
                        this.h = new byte[8];
                        System.arraycopy(this.g, 8, this.h, 0, 8);
                        continue;
                    }
                    case 17: {
                        (this.Z = new a()).c();
                        continue;
                    }
                    case 20: {
                        Code((Runnable)new Code(Code(this.g, 8, b2 + 8)));
                        continue;
                    }
                }
            }
            break;
        }
    }
    
    private byte[] Code(final a a, int i) {
        synchronized (Code.I) {
            final Object[] code = a.Code();
            final int[] j = a.I();
            int n = 0;
            final String s = (String)this.Z[1];
            if (!this.c) {
                n = 41 + (s + "\u0000hernskifers\u0000").getBytes().length + this.r.f.length + J(1).length() + ((this.Code == null) ? 2 : 0) + this.r.Code.length;
                this.Z = this.J;
                this.J = null;
                if (this.bo > 0) {
                    this.h = null;
                    this.Z = null;
                    this.bo = 0;
                }
                if (this.h != null) {
                    n += 8 + this.h.length;
                }
                else {
                    for (int k = 0; k < 110; ++k) {
                        this.I[k] = null;
                        this.h[k] = 0;
                    }
                    this.Z = null;
                }
                if (this.Z == null) {
                    n += 8;
                }
            }
            if ((this.q.cI & 0x4) != 0x0) {
                code[77] = null;
                code[79] = (code[73] = null);
                j[99] = 0;
                code[94] = (code[86] = null);
                j[85] = 0;
            }
            j[0] = 16;
            code[40] = s;
            code[33] = J(2);
            if (Code.j == null) {
                a(false);
            }
            code[6] = Code.j;
            final String appProperty = Code.Code.getAppProperty("OM-Install-Referrer");
            code[100] = ((appProperty != null) ? appProperty : "");
            j[50] = (Code.ak ? 1 : 0);
            if (!this.I() || Code.F) {
                final int[] array = j;
                final int n2 = 24;
                array[n2] &= 0xFFFDFFFF;
            }
            int l = 4;
            for (int n3 = 0; n3 < 110; ++n3) {
                if (code[n3] != null) {
                    if (code[n3] instanceof byte[] && (!(this.I[n3] instanceof byte[]) || !Code((byte[])code[n3], (byte[])this.I[n3]))) {
                        l += 7 + ((byte[])code[n3]).length;
                    }
                    else if ((this.I[n3] == null || !code[n3].equals(this.I[n3])) && code[n3] instanceof String) {
                        final int c = c((String)code[n3]);
                        l += c + ((c <= 254) ? 4 : 7);
                    }
                }
                else if (this.h[n3] != j[n3] || this.I[n3] != null) {
                    final int n4 = l;
                    if (j[n3] <= 254) {
                        l = n4 + 4;
                    }
                    else {
                        l = n4 + 7;
                    }
                }
            }
            final int n5 = n + (l + 16 + 8 * (l / 65529));
            final Z b = new Z(n5);
            final DataOutputStream dataOutputStream = new DataOutputStream(b);
            int size = 0;
            if (!this.c) {
                int n6 = 0;
                if (this.Code == null) {
                    dataOutputStream.write(1);
                    dataOutputStream.write(2);
                    n6 = 2;
                }
                dataOutputStream.write(1);
                dataOutputStream.write(this.r.h, 0, 8);
                dataOutputStream.writeInt(this.r.I[0]);
                dataOutputStream.write(this.r.f);
                dataOutputStream.writeShort(i);
                dataOutputStream.write(this.r.Code);
                i = b.size();
                dataOutputStream.writeUTF(J(1));
                this.s.B(b.Code(), n6, b.size() - n6);
                this.t.B(b.Code(), n6, b.size() - n6);
                this.s.C(b.Code(), b.size(), 16);
                b.Code(b.size() + 16);
                this.u.d(b.Code(), i, b.size() - i);
                size = b.size();
                final byte[] bytes = (s + "\u0000hernskifers\u0000").getBytes();
                Code(b, 128, 3, bytes.length);
                dataOutputStream.write(bytes);
                if (this.h != null) {
                    Code(b, 15, 0, 8);
                    dataOutputStream.write(this.h);
                }
                if (this.Z == null) {
                    Code(b, 16, 0, 0);
                }
            }
            ++this.bo;
            Code(b, 5, a.Z(), 0);
            Code(b, 22, a.Z(), Math.min(l, 65529));
            dataOutputStream.writeInt(l - 4 + Code(a.Code(false)));
            int size2;
            String s2;
            byte[] array2;
            int n7;
            int n8;
            int n9;
            for (i = 0; i < 110; ++i) {
                if (code[i] != null) {
                    if (code[i] instanceof byte[] && (!(this.I[i] instanceof byte[]) || !Code((byte[])code[i], (byte[])this.I[i]))) {
                        dataOutputStream.write(1);
                        dataOutputStream.writeShort(i);
                        dataOutputStream.writeInt(((byte[])code[i]).length);
                        dataOutputStream.write((byte[])code[i]);
                    }
                    else if ((this.I[i] == null || !code[i].equals(this.I[i])) && code[i] instanceof String) {
                        if (c((String)code[i]) <= 254) {
                            dataOutputStream.write(0);
                            dataOutputStream.write(i >> 16);
                            size2 = b.size();
                            dataOutputStream.writeUTF((String)code[i]);
                            b.Code()[size2] = (byte)i;
                        }
                        else {
                            dataOutputStream.write(1);
                            dataOutputStream.writeShort(i);
                            array2 = new byte[c(s2 = (String)code[i])];
                            n7 = 0;
                            for (n8 = 0; n8 < s2.length(); ++n8) {
                                n7 += Code((int)s2.charAt(n8), array2, n7);
                            }
                            dataOutputStream.writeInt(array2.length);
                            dataOutputStream.write(array2);
                        }
                    }
                }
                else if (this.h[i] != j[i] || this.I[i] != null) {
                    if ((n9 = j[i]) <= 254) {
                        dataOutputStream.write(2);
                        dataOutputStream.writeShort(i);
                        dataOutputStream.write(n9);
                    }
                    else {
                        dataOutputStream.write(3);
                        dataOutputStream.writeShort(i);
                        dataOutputStream.writeInt(n9);
                    }
                }
                this.I[i] = code[i];
                this.h[i] = j[i];
            }
            i = b.size() - l;
            while (l > 65529) {
                b.Code(b.size() + 8);
                System.arraycopy(b.Code(), i + 65529, b.Code(), i + 65529 + 8, l - 65529);
                i += 65537;
                l -= 65529;
                Code(b.Code(), i - 8, 22, a.Z(), Math.min(l, 65529));
            }
            this.b(b.Code(), size, n5);
            this.c = true;
            return b.Code();
        }
    }
    
    private void B(final a a) {
        if (a == null) {
            return;
        }
        final Hashtable code;
        if ((code = a.Code(true)) == null) {
            return;
        }
        final int priority = Thread.currentThread().getPriority();
        Thread.currentThread().setPriority(1);
        final Z b = new Z(4104);
        final DataOutputStream dataOutputStream = new DataOutputStream(b);
        Code(b, 22, a.Z(), 7);
        dataOutputStream.write(1);
        dataOutputStream.writeShort(9);
        dataOutputStream.writeInt(Code(code) - 7);
        this.b(b.Code(), 0, 15);
        this.I(b.Code(), 15);
        b.Code(0);
        InputStream code2 = null;
        final Hashtable hashtable = code;
        try {
            final Enumeration keys = hashtable.keys();
            while (keys.hasMoreElements()) {
                final String s = (String)keys.nextElement();
                final Object[] array = code.get(s);
                final int n = c(s) + c((String)array[0]) + 8;
                Code(b, 22, a.Z(), n);
                dataOutputStream.writeUTF(s);
                dataOutputStream.writeUTF((String)array[0]);
                final int intValue = (int)array[1];
                dataOutputStream.writeInt(intValue);
                this.b(b.Code(), 0, n + 8);
                this.I(b.Code(), n + 8);
                b.Code(0);
                code2 = Code.I.Code((String)array[0], false, 1).Code();
                final byte[] code3 = b.Code();
                int n2 = 0;
                int read;
                while (!a.Z() && (read = code2.read(code3, 8, 4096)) >= 0 && n2 < intValue) {
                    n2 += read;
                    Code(code3, 0, 22, a.Z(), read);
                    this.b(code3, 0, read + 8);
                    this.I(code3, read + 8);
                }
                final InputStream inputStream = code2;
                try {
                    inputStream.close();
                }
                finally {}
            }
        }
        finally {
            final InputStream inputStream2 = code2;
            try {
                inputStream2.close();
            }
            finally {}
            Thread.currentThread().setPriority(priority);
        }
    }
    
    private static void C(final Code code) {
        if (!Code.H) {
            return;
        }
        final String string = (Code.K ? "*" : "") + Code.bv + ":" + Code.l;
        if (Code.C == null) {
            Code.C = Code(64, 0, 0);
        }
        final int n = (v() - Code.C.I(string)) / 4 * 3;
        code.J(n - 8, 1, Code.C.I(string) + 25, Code.C.a() + 1, 11782531);
        code.Code(string, n, 1, Code.C, 16647045);
    }
    
    private static void V() {
        final Object z;
        monitorenter(z = Code.Z);
        final long d = Code.d;
        final long e = Code.e;
        final long c = Code.c;
        Code.d = (Code.e = (Code.c = 0L));
        monitorexit(z);
        final long n = d - c;
        Code.Code.I();
        final int n2 = 10;
        final int n3 = 51;
        try {
            final int a = a(n2, n3);
            a(a, (int)d);
            a(a + 1, (int)(d >> 32));
            a(a + 2, (int)e);
            a(a + 3, (int)(e >> 32));
            a(a + 4, (int)n);
            a(a + 5, (int)(n >> 32));
            a(a + 8, (int)c);
            a(a + 9, (int)(c >> 32));
            Code(a);
        }
        finally {
            Code.Code.Z();
            return;
        }
        Code.Code.v(6);
    }
    
    private static void c(final int n, final int n2, int i) {
        final J code = Code(n, n2, i);
        String[] array;
        for (array = new String[] { "\u05e0\u05e1\u05e2", "\u0628\u062a\u062b", "\ufe91\ufef4\ufee6" }, i = 0; i < array.length; ++i) {
            if (Code(array[i], array[i].charAt(0), code)) {
                Code.bF |= 1 << i + 1;
                if (!Code.ad) {
                    if (!Code(array[i].charAt(0) + "(", ')', code)) {
                        Code.ad = true;
                    }
                    else {
                        Code.ad = false;
                    }
                }
            }
        }
    }
    
    private static void Code(final Z b, final int n, final int n2, final int n3) {
        b.Code(b.size() + 8);
        Code(b.Code(), b.size() - 8, n, n2, n3);
    }
    
    private static void Code(final long n, final long n2, final long n3) {
        final Object z;
        monitorenter(z = Code.Z);
        Code.d += n;
        Code.e += n2;
        Code.c += n3;
        monitorexit(z);
    }
    
    private static int[] Code(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, final int n9, final int n10) {
        return new int[] { n, n2, n3, n4, n5, n6, n7, n8, n9, n10 };
    }
    
    public static void Code(final int n, final String s) {
        Code((s != null) ? Code.Code.C(s) : 0);
        I(n);
    }
    
    public final synchronized void Code(final int n, final int n2) {
        Code(n);
        this.v(n2);
    }
    
    private static int C(final int n, final int n2, final int n3) {
        return Math.max(Math.min(n, n3), n2);
    }
    
    private Code(final byte b, final byte b2) {
        this.d = true;
        this.c = true;
        this((byte)0);
        this.b = -1;
    }
    
    private Code(final int b, final byte b2) {
        this.d = true;
        this.a = true;
        this((byte)0);
        this.b = b;
    }
    
    private B Code(final byte[] array, final int n, final boolean b) {
        return this.Code(array, 0, n, 256, null, b);
    }
    
    private static byte Code(final char c) {
        if (" -=_/|\\:;.,\u060c!?&$#'`´\"\t\n".indexOf(c) >= 0 || "()<>[]{}«»\u2018\u2019\u201c\u201d\u2039\u203a".indexOf(c) >= 0) {
            return -128;
        }
        if ('\u202a' <= c && c <= '\u202e') {
            return 64;
        }
        if (c == '\u200f') {
            return 2;
        }
        if (Z(c)) {
            return 2;
        }
        if ('\u0660' <= c && c <= '\u0669') {
            return 16;
        }
        if (J(c)) {
            return 4;
        }
        if ('0' <= c && c <= '9') {
            return 8;
        }
        return 1;
    }
    
    private B Code(final int n, int p3, int p4) {
        if (n != 256) {
            p3 = this.P(p3);
            p4 = this.P(p4);
        }
        final Integer n2 = new Integer(p3 << 16 | p4);
        B b;
        if ((b = Code.c.get(n2)) == null) {
            Label_0079: {
                if (n != 256 || p3 != -1 || p4 != -1) {
                    break Label_0079;
                }
                final int n3 = 9;
                final boolean b2 = false;
                try {
                    b = Code(n3, b2);
                    while (true) {
                        Code.c.put(n2, b);
                        return b;
                        b = (b = this.Code(256, -1, -1)).Code(0, 0, b.Code.getWidth(), b.Code.getHeight(), p3, p4, 0, 0, 0, 0, 1, true);
                        continue;
                    }
                }
                finally {}
            }
        }
        return b;
    }
    
    private void L() {
        for (int i = 16; i <= 63; ++i) {
            final int n;
            final int n2;
            this.h[i] = (((n = this.h[i - 2]) >>> 17 | n << 15) ^ (n >>> 19 | n << 13) ^ n >>> 10) + this.h[i - 7] + (((n2 = this.h[i - 15]) >>> 7 | n2 << 25) ^ (n2 >>> 18 | n2 << 14) ^ n2 >>> 3) + this.h[i - 16];
        }
        int bl = this.bl;
        int br = this.br;
        int bo = this.bo;
        int a = this.a;
        int bp = this.bp;
        int bn = this.bn;
        int bh = this.bh;
        int bm = this.bm;
        int n3 = 0;
        for (int j = 0; j < 8; ++j) {
            final int n4 = bm + (J(bp, bn, bh) + Code.k[n3] + this.h[n3++]);
            final int n5 = a + n4;
            final int n6 = n4 + B(bl, br, bo);
            final int n7 = bh + (J(n5, bp, bn) + Code.k[n3] + this.h[n3++]);
            final int n8 = bo + n7;
            final int n9 = n7 + B(n6, bl, br);
            final int n10 = bn + (J(n8, n5, bp) + Code.k[n3] + this.h[n3++]);
            final int n11 = br + n10;
            final int n12 = n10 + B(n9, n6, bl);
            final int n13 = bp + (J(n11, n8, n5) + Code.k[n3] + this.h[n3++]);
            final int n14 = bl + n13;
            final int n15 = n13 + B(n12, n9, n6);
            final int n16 = n5 + (J(n14, n11, n8) + Code.k[n3] + this.h[n3++]);
            bm = n6 + n16;
            a = n16 + B(n15, n12, n9);
            final int n17 = n8 + (J(bm, n14, n11) + Code.k[n3] + this.h[n3++]);
            bh = n9 + n17;
            bo = n17 + B(a, n15, n12);
            final int n18 = n11 + (J(bh, bm, n14) + Code.k[n3] + this.h[n3++]);
            bn = n12 + n18;
            br = n18 + B(bo, a, n15);
            final int n19 = n14 + (J(bn, bh, bm) + Code.k[n3] + this.h[n3++]);
            bp = n15 + n19;
            bl = n19 + B(br, bo, a);
        }
        this.bl += bl;
        this.br += br;
        this.bo += bo;
        this.a += a;
        this.bp += bp;
        this.bn += bn;
        this.bh += bh;
        this.bm += bm;
        this.b = 0;
        for (int k = 0; k < 16; ++k) {
            this.h[k] = 0;
        }
    }
    
    private static void Code(final int[] array, int i, int n, int n2, int n3, final int n4, final int[] array2, int j, int n5, int n6, final int n7, final int n8, int k, final boolean b) {
        if (n2 == 0 || n3 == 0 || n6 == 0 || n7 == 0) {
            return;
        }
        if (n2 == n6 && n3 == n7) {
            Code(array, i, n, n4, array2, j, n5, n8, n2, n3);
            return;
        }
        i += n * n4;
        n = j + n5 * n8;
        if (n3 == 2 && n7 >= 2 && n2 == n6) {
            int n9;
            int n10;
            int n11;
            int l;
            int n12;
            for (n2 += i; i < n2; ++i, ++n) {
                n3 = array[i];
                j = array[i + n4];
                n5 = (n3 >> 8 & 0xFF0000);
                n6 = (n3 & 0xFF0000);
                k = (n3 << 8 & 0xFF0000);
                n3 = (n3 << 16 & 0xFF0000);
                n9 = ((j >> 8 & 0xFF0000) - n5) / (n7 - 1);
                n10 = ((j & 0xFF0000) - n6) / (n7 - 1);
                n11 = ((j << 8 & 0xFF0000) - k) / (n7 - 1);
                j = ((j << 16 & 0xFF0000) - n3) / (n7 - 1);
                for (l = 0, n12 = n; l < n7; ++l, n12 += n8) {
                    array2[n12] = ((n5 & 0xFF0000) << 8 | (n6 & 0xFF0000) | (k & 0xFF0000) >> 8 | n3 >> 16);
                    n5 += n9;
                    n6 += n10;
                    k += n11;
                    n3 += j;
                }
            }
            return;
        }
        j = (n2 << 8) / n6;
        n5 = (n3 << 8) / n7;
        k = ((j > 512 || n5 > 512) ? 0 : k);
        --n2;
        --n3;
        if (n2 == 0 || n3 == 0 || n6 == 1 || n7 == 1) {
            k = 0;
        }
        if (k == 1) {
            int n13;
            int n15;
            int n14;
            int n16;
            int n17;
            int min;
            int min2;
            int n18;
            int n19;
            int n20;
            int n21;
            int n22;
            for (j = 0; j < n7; ++j) {
                k = ((n5 = (j * n3 << 8) / (n7 - 1)) & 0xFF);
                n5 >>>= 8;
                for (n13 = 0; n13 < n6; ++n13) {
                    n14 = ((n15 = (n13 * n2 << 8) / (n6 - 1)) & 0xFF);
                    n16 = n15 >>> 8;
                    n17 = n + n8 * j + n13;
                    min = Math.min(n16 + 1, n2);
                    min2 = Math.min(n5 + 1, n3);
                    n18 = array[i + n4 * n5 + n16];
                    n19 = array[i + n4 * n5 + min];
                    n20 = array[i + n4 * min2 + n16];
                    n21 = array[i + n4 * min2 + min];
                    array2[n17] = (b ? ((n18 >>> 24) * (256 - n14) * (256 - k) + (n19 >>> 24) * n14 * (256 - k) + (n20 >>> 24) * (256 - n14) * k + (n21 >>> 24) * n14 * k >>> 16 << 24) : 0) + ((n18 >> 16 & 0xFF) * (256 - n14) * (256 - k) + (n19 >> 16 & 0xFF) * n14 * (256 - k) + (n20 >> 16 & 0xFF) * (256 - n14) * k + (n21 >> 16 & 0xFF) * n14 * k >>> 16 << 16) + ((n18 >> 8 & 0xFF) * (256 - n14) * (256 - k) + (n19 >> 8 & 0xFF) * n14 * (256 - k) + (n20 >> 8 & 0xFF) * (256 - n14) * k + (n21 >> 8 & 0xFF) * n14 * k >>> 16 << 8) + ((n18 & 0xFF) * (256 - n14) * (256 - k) + (n19 & 0xFF) * n14 * (256 - k) + (n20 & 0xFF) * (256 - n14) * k + (n21 & 0xFF) * n14 * k >>> 16);
                    if (!b) {
                        n22 = n17;
                        array2[n22] |= 0xFF000000;
                    }
                }
            }
        }
        else {
            int min3;
            int n23;
            int min4;
            int n24;
            int n25;
            for (k = 0; k < n7; ++k) {
                min3 = Math.min(k * n5 >>> 8, n3);
                for (n23 = 0; n23 < n6; ++n23) {
                    min4 = Math.min(n23 * j >>> 8, n2);
                    n24 = n + n8 * k + n23;
                    array2[n24] = array[i + n4 * min3 + min4];
                    if (!b) {
                        n25 = n24;
                        array2[n25] |= 0xFF000000;
                    }
                }
            }
        }
    }
    
    private void w(int bb) {
        if (bb == 0) {
            return;
        }
        final int l = l(bb - 1);
        ++Code.aM;
        Code.ba += l(bb - 3) + 3;
        final int i = l(bb);
        final int j = l(bb + 1);
        Code.bf += i;
        Code.bg += j;
        final int n = bb;
        bb = l;
        final int n2 = n;
        final int n3 = bb;
        final int[] z = Code.Z;
        final int n4 = 30;
        try {
            if (n3 == z[n4] || bb == Code.Z[31]) {
                --Code.ba;
                ++Code.aN;
                boolean b = false;
                if (bb == Code.Z[31]) {
                    final int n5 = l(n2 + 7) - 1;
                    if (((n5 | -n5) >>> 31 ^ 0x1) != 0x0) {
                        bb = Code.bf + l(n2 + 3);
                        final int n6 = Code.bg + l(n2 + 4);
                        final int k = l(n2 + 5);
                        final int m = l(n2 + 6);
                        b = true;
                        if (bb < Code.bb + Code.bd && bb + k > Code.bb && n6 < Code.bc + Code.be && n6 + m > Code.bc) {
                            b = false;
                        }
                    }
                }
                if (!b) {
                    final int l2 = l(bb = l(n2 + 2));
                    Z(bb);
                    final int[] code = Code.Code;
                    int code2 = 0;
                    while (code2 < (code2 = Code.Code) + l2) {
                        this.w(code[code2]);
                        ++code2;
                    }
                }
            }
            else if (bb == Code.Z[39]) {
                ++Code.aU;
                Code.f.Code((B)Code(l(n2 + 2)), Code.bf, Code.bg);
            }
            else if (bb == Code.Z[41]) {
                ++Code.aW;
                final B b2 = (B)Code(l(n2 + 2));
                final int l3 = l(n2 + 3);
                final int l4 = l(n2 + 5);
                final int l5 = l(n2 + 6);
                final int l6 = l(n2 + 7);
                final int l7 = l(n2 + 8);
                final int l8 = l(n2 + 9);
                final int l9 = l(n2 + 10);
                final int width = b2.Code.getWidth();
                final int height = b2.Code.getHeight();
                final int min = Math.min(width - l6, l8 - l6);
                final int min2 = Math.min(width - l4, l8 - min);
                int min3 = l5;
                int min4 = l7;
                if (l3 >>> 24 == 255) {
                    min3 = Math.min(height - l7, l9 - l7);
                    min4 = Math.min(height - l5, l9 - min3);
                }
                Code.f.Code(b2, 0, 0, min, min3, Code.bf, Code.bg);
                Code.f.Code(b2, width - min2, 0, min2, min3, Code.bf + l8 - min2, Code.bg);
                Code.f.Code(b2, 0, height - min4, min, min4, Code.bf, Code.bg + l9 - min4);
                Code.f.Code(b2, width - min2, height - min4, min2, min4, Code.bf + l8 - min2, Code.bg + l9 - min4);
                Code(b2, 0, l5, l4, height - l5 - l7, Code.bf, Code.bg + min3, l4, l9 - min3 - min4);
                Code(b2, l4, 0, width - l4 - l6, l5, Code.bf + min, Code.bg, l8 - min - min2, l5);
                Code(b2, width - l6, l5, l6, height - l5 - l7, Code.bf + l8 - l6, Code.bg + min3, l6, l9 - min3 - min4);
                Code(b2, l4, height - l7, width - l4 - l6, l7, Code.bf + min, Code.bg + l9 - l7, l8 - min - min2, l7);
                if (l3 >>> 24 == 255) {
                    Code.f.J(Code.bf + l4, Code.bg + l5, l8 - l4 - l6, l9 - l5 - l7, l3);
                }
                else {
                    Code(b2, l4, l5, width - l4 - l6, height - l5 - l7, Code.bf + l4, Code.bg + l5, l8 - l4 - l6, l9 - l5 - l7);
                }
            }
            else if (bb == Code.Z[37]) {
                ++Code.aS;
                final J n7 = (J)Code(l(n2 + 3));
                Code.f.Code(Code(l(n2 + 2)), Code.bf, Code.bg + n7.d(), n7, l(n2 + 4));
            }
            else if (bb == Code.Z[38]) {
                ++Code.aT;
                final J n8 = (J)Code(l((bb = l(n2 + 2)) + 1));
                final char[] i2;
                int n9 = (i2 = I(l(bb))).length;
                if (((bb = l(bb + 8)) & 0xE) != 0x0) {
                    n9 = Code(i2, bb);
                }
                Code.f.Code(i2, 0, n9, Code.bf, Code.bg + n8.d(), n8, l(n2 + 3));
            }
            else if (bb == Code.Z[35]) {
                ++Code.aQ;
                Code.f.B(Code.bf, Code.bg, l(n2 + 2), l(n2 + 3), l(n2 + 4));
            }
            else if (bb == Code.Z[36]) {
                ++Code.aR;
                final Code f = Code.f;
                final int bf = Code.bf;
                final int bg = Code.bg;
                final int l10 = l(n2 + 2);
                final int l11 = l(n2 + 3);
                final int l12 = l(n2 + 4);
                bb = l(n2 + 5);
                final int n10 = l12;
                final int n11 = l11;
                final int n12 = l10;
                int n13 = bg;
                final int n14 = bf;
                final Code code3 = f;
                if (n12 > 0 && n11 > 0) {
                    int n15 = n10 & 0xFF0000;
                    int n16 = n10 << 8 & 0xFF0000;
                    int n17 = n10 << 16 & 0xFF0000;
                    int n18 = n10 >> 8 & 0xFF0000;
                    final int n19 = ((bb & 0xFF0000) - n15) / (n11 - 1);
                    final int n20 = ((bb << 8 & 0xFF0000) - n16) / (n11 - 1);
                    final int n21 = ((bb << 16 & 0xFF0000) - n17) / (n11 - 1);
                    bb = ((bb >> 8 & 0xFF0000) - n18) / (n11 - 1);
                    final int n22 = n14 + n12 - 1;
                    while (n13 < n13 + n11) {
                        code3.Code.setColor((n18 & 0xFF0000) << 8 | (n15 & 0xFF0000) | (n16 & 0xFF0000) >> 8 | n17 >> 16);
                        code3.Code.drawLine(n14, n13, n22, n13);
                        n15 += n19;
                        n16 += n20;
                        n17 += n21;
                        n18 += bb;
                        ++n13;
                    }
                }
            }
            else if (bb == Code.Z[40]) {
                ++Code.aV;
                Code((B)Code(l(n2 + 2)), l(n2 + 5), l(n2 + 6), l(n2 + 7), l(n2 + 8), Code.bf, Code.bg, l(n2 + 3), l(n2 + 4));
            }
            else if (bb == Code.Z[32]) {
                ++Code.aO;
                bb = Code.bb;
                final int bc = Code.bc;
                final int bd = Code.bd;
                final int be = Code.be;
                Code.bb = Math.max(Code.bf, Code.bb);
                Code.bd = Math.min(bb + Code.bd, Code.bf + l(n2 + 3)) - Code.bb;
                Code.bc = Math.max(Code.bg, Code.bc);
                Code.be = Math.min(bc + Code.be, Code.bg + l(n2 + 4)) - Code.bc;
                if (Code.bd > 0 && Code.be > 0) {
                    Code.f.J(Code.bb, Code.bc, Code.bd, Code.be);
                    this.w(l(n2 + 2));
                    Code.f.J(bb, bc, bd, be);
                }
                Code.bb = bb;
                Code.bc = bc;
                Code.bd = bd;
                Code.be = be;
            }
            else if (bb == Code.Z[33]) {
                ++Code.aX;
                if (l(n2 + 5) == 0) {
                    final Code f2 = Code.f;
                    final int bf2 = Code.bf;
                    final int bg2 = Code.bg;
                    final int bb2 = Code.bb;
                    final int bc2 = Code.bc;
                    final int bd2 = Code.bd;
                    final int be2 = Code.be;
                    final B b3;
                    Code.bd = (b3 = (B)Code(l(n2 + 2))).Code.getWidth();
                    Code.be = b3.Code.getHeight();
                    Code.bb = 0;
                    Code.bc = 0;
                    Code.bf = 0;
                    Code.bg = 0;
                    Code.f = b3.Code();
                    this.w(l(n2 + 3));
                    Code.bb = bb2;
                    Code.bc = bc2;
                    Code.bd = bd2;
                    Code.be = be2;
                    Code.bf = bf2;
                    Code.bg = bg2;
                    Code.f = f2;
                    a(n2 + 5, 1);
                }
                if ((bb = l(n2 + 4)) != 0) {
                    this.w(bb);
                }
                else {
                    Code.f.Code((B)Code(l(n2 + 2)), Code.bf, Code.bg);
                }
            }
            else if (bb == Code.Z[34]) {
                ++Code.aP;
                Code.f.Z(Code.bf, Code.bg, Code.bf + l(n2 + 2), Code.bg + l(n2 + 3), l(n2 + 4));
            }
            else if (bb == Code.Z[66]) {
                ++Code.aY;
                bb = 1;
                final int l13 = l(l(n2 + 2));
                final int l14 = l(l(n2 + 3));
                if (l13 != 0) {
                    if (!((Code)Code(l13)).C.Code(Code.f, Code.bf, Code.bg, l(n2 + 4), l14)) {
                        bb = 1;
                    }
                    else {
                        bb = 0;
                    }
                }
                if (bb != 0) {
                    Code.f.J(Code.bf, Code.bg, l(n2 + 4), Code.be - (Code.bg - Code.bc), 16777215);
                }
            }
            else if (bb == Code.Z[29]) {
                ++Code.aZ;
                this.w(l(n2 + 2));
            }
            Code.bf -= i;
            Code.bg -= j;
        }
        finally {
            Code.bf -= i;
            Code.bg -= j;
        }
    }
    
    private static void n() {
        if (Code.aF > 0) {
            if (!Code.j || Code.aD < Code.bb || Code.aE < Code.bc || Code.aD + Code.aF > Code.bb + Code.bd || Code.aE + Code.aG > Code.bc + Code.be) {
                I(Code.aD, Code.aE, Code.aF, Code.aG);
            }
            Code.aF = 0;
        }
    }
    
    private void d(final boolean b) {
        monitorenter(this);
        Label_0015: {
            if (!b) {
                break Label_0015;
            }
            try {
                this.av();
                return;
                this.e(true);
            }
            finally {
                monitorexit(this);
            }
        }
    }
    
    private synchronized void Code(int ad, final int ae, final int af, final int ag) {
        if (af > 0 && ag > 0 && ad + af > 0 && ae + ag > 0 && ad < v() && ae < Code.b.a()) {
            Code.I = true;
            if (Code.aF > 0) {
                final int n = Code.aD + Code.aF;
                Code.aD = Math.min(Code.aD, ad);
                Code.aF = Math.max(ad + af, n) - Code.aD;
                ad = Code.aE + Code.aG;
                Code.aE = Math.min(Code.aE, ae);
                Code.aG = Math.max(ae + ag, ad) - Code.aE;
                return;
            }
            Code.aD = ad;
            Code.aE = ae;
            Code.aF = af;
            Code.aG = ag;
        }
    }
    
    private void U(int i) {
        final int l = l(i);
        Z(i);
        this.B.clear();
        for (i = 0; i < l; i += 2) {
            this.B.put(f(Code(Code.Code[Code.Code + i])), f(Code(Code.Code[Code.Code + i + 1])));
        }
    }
    
    private static boolean J(final int n) {
        return (n & 0x1) != 0x0;
    }
    
    public final B Code(final int[] array, final int n, final int n2, final boolean b, final boolean b2) {
        if (b2 && this.a < 262144) {
            int n3 = 0;
            for (int i = 0; i < n2; ++i) {
                for (int j = 0; j < n; ++j) {
                    final int n5;
                    final int n4 = (n5 = array[n3]) >> 16 & 0xFF;
                    final int n6 = n5 >> 8 & 0xFF;
                    final int n7 = n5 & 0xFF;
                    final int n8 = n4 & 0xFFFFFFF8;
                    final int n9 = n6 & 0xFFFFFFFC;
                    final int n10 = n7 & 0xFFFFFFF8;
                    final int n11 = n8 | n8 >> 5;
                    final int n12 = n9 | n9 >> 6;
                    final int n13 = n10 | n10 >> 5;
                    array[n3] = ((n5 & 0xFF000000) | n11 << 16 | n12 << 8 | n13);
                    final int n14 = n4 - n11;
                    final int n15 = n6 - n12;
                    final int n16 = n7 - n13;
                    final int n17 = n14 / 2;
                    final int n18 = n15 / 2;
                    final int n19 = n16 / 2;
                    if (j < n - 1) {
                        Code(array, n3 + 1, n14 - n17, n15 - n18, n16 - n19);
                    }
                    if (i < n2 - 1) {
                        Code(array, n3 + n, n17, n18, n19);
                    }
                    ++n3;
                }
            }
        }
        return new B(Image.createRGBImage(array, n, n2, b), b);
    }
    
    private static void Code(final int[] array, final int n, final int n2, final int n3, final int n4) {
        if (n2 == 0 && n3 == 0 && n4 == 0) {
            return;
        }
        final int n6;
        int n5 = (n6 = array[n]) >> 16 & 0xFF;
        int n7 = n6 >> 8 & 0xFF;
        int n8 = n6 & 0xFF;
        if (n2 > 0) {
            n5 = Math.min(255, n5 + n2);
        }
        else if (n2 < 0) {
            n5 = Math.max(0, n5 + n2);
        }
        if (n3 > 0) {
            n7 = Math.min(255, n7 + n3);
        }
        else if (n3 < 0) {
            n7 = Math.max(0, n7 + n3);
        }
        if (n4 > 0) {
            n8 = Math.min(255, n8 + n4);
        }
        else if (n4 < 0) {
            n8 = Math.max(0, n8 + n4);
        }
        array[n] = ((n6 & 0xFF000000) | n5 << 16 | n7 << 8 | n8);
    }
    
    public static int[] Code(final int[] array, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8, int n9, final boolean b) {
        if (n9 == 2) {
            n9 = 1;
        }
        final int[] array2 = new int[n3 * n4];
        Code(array, n5, 0, n - n5 - n7, n6, n, array2, n5, 0, n3 - n5 - n7, n6, n3, n9, b);
        Code(array, n5, n6, n - n5 - n7, n2 - n6 - n8, n, array2, n5, n6, n3 - n5 - n7, n4 - n6 - n8, n3, n9, b);
        Code(array, n5, n2 - n8, n - n5 - n7, n8, n, array2, n5, n4 - n8, n3 - n5 - n7, n8, n3, n9, b);
        Code(array, 0, n6, n5, n2 - n6 - n8, n, array2, 0, n6, n5, n4 - n6 - n8, n3, n9, b);
        Code(array, n - n7, n6, n7, n2 - n6 - n8, n, array2, n3 - n7, n6, n7, n4 - n6 - n8, n3, n9, b);
        Code(array, 0, 0, n, array2, 0, 0, n3, n5, n6);
        Code(array, 0, n2 - n8, n, array2, 0, n4 - n8, n3, n5, n8);
        Code(array, n - n7, 0, n, array2, n3 - n7, 0, n3, n7, n6);
        Code(array, n - n7, n2 - n8, n, array2, n3 - n7, n4 - n8, n3, n7, n8);
        return array2;
    }
    
    private static void Code(final B b, final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (n3 <= 0 || n4 <= 0) {
            return;
        }
        Code.f.I(b, n, n2, n3, n4, n5, n6, n7, n8);
    }
    
    private static void M(final int n) {
        if (Code.l == null || Code.l.length < n << 1) {
            Code.m = null;
            Code.n = null;
            Code.l = null;
            Code.n = new int[(Code.m = new int[n << 1]).length];
            Code.l = new int[Code.m.length];
            Code.bN = -1;
            Code.bO = -1;
            final Random random = new Random(4711L);
            for (int i = 0; i < Code.l.length >> 1; ++i) {
                Code.l[i] = (random.nextInt() & 0x7F);
                Code.l[i + (Code.l.length >> 1)] = Code.l[i] + 64;
            }
        }
    }
    
    private int Code(final byte[] f, int i, int j, int k, final boolean b) {
        this.f = f;
        this.bp = i;
        this.bn = j;
        this.bo = k;
        int l = 0;
    Label_0023:
        while (true) {
            while (l == 0) {
                while (this.br > 0) {
                    if (this.br >= this.bn) {
                        this.br -= this.bn;
                        return 0;
                    }
                    this.bp += this.br;
                    this.bn -= this.br;
                    this.br = 0;
                }
                switch (this.bh) {
                    case 4: {
                        final short[] array = new short[64];
                        if (this.bo != 0 && this.h == null) {
                            this.h = new int[this.a * this.bq << 6];
                        }
                        do {
                            j = this.v[this.ck];
                            for (k = 0; k < 64; ++k) {
                                array[k] = 0;
                            }
                            final int n = j;
                            final short[] array2 = array;
                            final int n2 = n;
                            final int bn = this.bn;
                            final int ct = this.ct;
                            final int cu = this.cu;
                            int n4 = 0;
                            int n3 = 0;
                            Label_3393: {
                                final int a;
                                if ((a = this.A(this.y[n2 << 1])) < 0) {
                                    this.bp -= bn - this.bn;
                                    this.bn = bn;
                                    this.ct = ct;
                                    this.cu = cu;
                                    n3 = (n4 = a);
                                }
                                else {
                                    final int z;
                                    if ((z = this.z(a)) < 0) {
                                        this.bp -= bn - this.bn;
                                        this.bn = bn;
                                        this.ct = ct;
                                        this.cu = cu;
                                        n3 = (n4 = z);
                                    }
                                    else {
                                        array2[0] = (short)(d(a, z) + this.B[n2]);
                                        final int n5 = this.y[(n2 << 1) + 1];
                                        for (int n6 = 1; n6 < 64; ++n6) {
                                            final int a2;
                                            if ((a2 = this.A(n5)) < 0) {
                                                this.bp -= bn - this.bn;
                                                this.bn = bn;
                                                this.ct = ct;
                                                this.cu = cu;
                                                n3 = (n4 = a2);
                                                break Label_3393;
                                            }
                                            final int n7 = a2 & 0xF;
                                            final int n8 = a2 >> 4;
                                            if (n7 == 0) {
                                                if (n8 != 15) {
                                                    break;
                                                }
                                                n6 += n8;
                                            }
                                            else {
                                                final int z2;
                                                if ((z2 = this.z(n7)) < 0) {
                                                    this.bp -= bn - this.bn;
                                                    this.bn = bn;
                                                    this.ct = ct;
                                                    this.cu = cu;
                                                    n3 = (n4 = z2);
                                                    break Label_3393;
                                                }
                                                if ((n6 += n8) >= 64) {
                                                    n6 = 63;
                                                }
                                                array2[n6] = (short)d(n7, z2);
                                            }
                                        }
                                        this.B[n2] = array2[0];
                                        n3 = (n4 = 0);
                                    }
                                }
                            }
                            k = n4;
                            if (n3 != 0) {
                                l = k;
                                continue Label_0023;
                            }
                            k = this.w[j] / (this.I[j] * this.t[j]);
                            final int n9 = this.w[j] % (this.I[j] * this.t[j]);
                            if ((k = this.t[j] * k + n9 % this.t[j]) < this.u[j]) {
                                if (this.bo == 0) {
                                    k = k + (n9 / this.t[j] * this.u[j] << 3) << 3;
                                    this.Code(j, array, this.Z[j], k, this.u[j] << 3);
                                }
                                else {
                                    k = n9 / this.t[j] * (this.t[j] << 6) + (n9 % this.t[j] << 3);
                                    this.Code(j, array, this.Z[j], k, this.t[j] << 3);
                                }
                            }
                            final int[] w = this.w;
                            final int n10 = j;
                            ++w[n10];
                            --this.co;
                            if (this.co % this.cp == 0 && this.bo != 0) {
                                this.b(true);
                                final int n12;
                                int n11 = (n12 = this.cv / this.cr >> this.bo) * this.bm + (this.cv % this.cr >> this.bo);
                                int n13 = 0;
                                for (int n14 = 0; n14 < this.a << 3 >> this.bo && n14 + n12 < this.bk; ++n14) {
                                    for (int n15 = 0; n15 < this.cw >> this.bo; ++n15) {
                                        this.x[n11 + n15] = this.h[n13 + (n15 << this.bo)];
                                    }
                                    n11 += this.bm;
                                    n13 += this.bq << 3 << this.bo;
                                }
                                this.cv = -1;
                            }
                            if (this.co == 0) {
                                if (this.bo == 0) {
                                    this.b(false);
                                }
                                ++this.cq;
                                if ((this.cj > 1 && this.cq >= this.b / (8 * this.a)) || (this.cj == 1 && this.cq >= ((this.I[j] * this.cs + this.a - 1) / this.a + 7) / 8)) {
                                    this.bh = 2;
                                    l = 0;
                                    continue Label_0023;
                                }
                                this.aq();
                            }
                            ++this.cl;
                            if (this.cl < this.I[j] * this.t[j] && this.cj != 1) {
                                continue;
                            }
                            this.cl = 0;
                            ++this.ck;
                            if (this.ck < this.cj) {
                                continue;
                            }
                            this.ck = 0;
                            ++this.cm;
                        } while (this.cm != this.cn || this.cn <= 0);
                        this.cm = 0;
                        this.ar();
                        this.bh = 5;
                        l = 0;
                        continue;
                    }
                    case 5: {
                        while (this.bh == 5) {
                            if (this.bn < 2) {
                                return this.bn;
                            }
                            if ((this.f[this.bp] & 0xFF) == 0xFF && this.f[this.bp + 1] != 0) {
                                if ((this.f[this.bp + 1] & 0xFF) >= 208 && (this.f[this.bp + 1] & 0xFF) <= 215) {
                                    this.bh = 4;
                                    this.bp += 2;
                                    this.bn -= 2;
                                }
                                else {
                                    this.bh = 2;
                                }
                            }
                            else {
                                ++this.bp;
                                --this.bn;
                            }
                        }
                    }
                    default: {
                        continue;
                    }
                    case 1:
                    case 2: {
                        if (this.bn < 2) {
                            return this.bn;
                        }
                        while (this.bn >= 2 && l == 0 && this.br == 0 && (this.bh == 1 || this.bh == 2)) {
                            if ((this.f[this.bp] & 0xFF) != 0xFF) {
                                ++this.bp;
                                --this.bn;
                            }
                            else {
                                switch (this.f[this.bp + 1] & 0xFF) {
                                    case 192:
                                    case 193: {
                                        if (this.bn < 4) {
                                            return this.bn;
                                        }
                                        this.C = ((this.f[this.bp + 2] & 0xFF) << 8 | (this.f[this.bp + 3] & 0xFF));
                                        if (this.bn < 10) {
                                            return this.bn;
                                        }
                                        this.bp += 4;
                                        this.bn -= 4;
                                        this.C -= 2;
                                        this.cr = ((this.f[this.bp + 3] & 0xFF) << 8 | (this.f[this.bp + 4] & 0xFF));
                                        this.cs = ((this.f[this.bp + 1] & 0xFF) << 8 | (this.f[this.bp + 2] & 0xFF));
                                        if (b) {
                                            this.bh = 0;
                                            return this.cr << 16 | this.cs;
                                        }
                                        this.bm = this.cr >> this.bo;
                                        this.bk = this.cs >> this.bo;
                                        this.x = new int[this.bm * this.bk];
                                        this.bl = (this.f[this.bp + 5] & 0xFF);
                                        for (j = 0; j < 3; ++j) {
                                            this.y[j << 1] = 0;
                                            this.y[(j << 1) + 1] = 4;
                                        }
                                        this.ar();
                                        this.bp += 6;
                                        this.bn -= 6;
                                        this.C -= 6;
                                        this.bh = 3;
                                        continue;
                                    }
                                    case 218: {
                                        if (this.bn < 4) {
                                            return this.bn;
                                        }
                                        this.C = ((this.f[this.bp + 2] & 0xFF) << 8 | (this.f[this.bp + 3] & 0xFF));
                                        if (this.bn < this.C + 2) {
                                            return this.bn;
                                        }
                                        this.cj = (this.f[this.bp + 4] & 0xFF);
                                        this.bp += 5;
                                        this.bn -= 5;
                                        this.C -= 3;
                                        for (i = 0; i < this.cj; ++i) {
                                            j = (this.f[this.bp] & 0xFF);
                                            this.v[i] = i;
                                            for (k = 0; k < this.bl; ++k) {
                                                if (j == this.g[k]) {
                                                    this.v[i] = k;
                                                    k = this.bl;
                                                }
                                            }
                                            j = (this.f[this.bp + 1] & 0xFF);
                                            this.y[this.v[i] << 1] = j >> 4;
                                            this.y[(this.v[i] << 1) + 1] = 4 + (j & 0xF);
                                            this.bp += 2;
                                            this.bn -= 2;
                                            this.C -= 2;
                                        }
                                        this.ar();
                                        this.cl = 0;
                                        this.ck = 0;
                                        this.cm = 0;
                                        this.cq = 0;
                                        this.aq();
                                        this.bp += this.C;
                                        this.bn -= this.C;
                                        this.bh = 4;
                                        continue;
                                    }
                                    case 196: {
                                        if (this.bn < 4) {
                                            l = -2;
                                            continue;
                                        }
                                        i = ((this.f[this.bp + 2] & 0xFF) << 8 | (this.f[this.bp + 3] & 0xFF));
                                        if (this.bn < i + 2) {
                                            l = -2;
                                            continue;
                                        }
                                        i -= 2;
                                        this.bp += 4;
                                        this.bn -= 4;
                                        while (i > 0) {
                                            j = ((this.f[this.bp] & 0xF) | (this.f[this.bp] & 0x10) >> 2);
                                            ++this.bp;
                                            --this.bn;
                                            --i;
                                            k = 0;
                                            final short[] array3 = new short[16];
                                            int n16 = 0;
                                            for (int n17 = 0; n17 < 16; ++n17) {
                                                array3[n17] = (short)(this.f[this.bp + n17] & 0xFF);
                                                n16 += array3[n17];
                                            }
                                            final int[] array4 = new int[n16 + 1];
                                            final int[] array5 = new int[n16];
                                            for (int n18 = 0; n18 < 16; ++n18) {
                                                for (short n19 = 1; n19 <= array3[n18]; ++n19, ++k) {
                                                    array4[k] = n18 + 1;
                                                }
                                            }
                                            array4[k] = 0;
                                            int n20 = 0;
                                            int n21 = 0;
                                            int n22 = array4[0];
                                            while (array4[n20] != 0) {
                                                while (array4[n20] == n22) {
                                                    array5[n20] = n21;
                                                    ++n21;
                                                    ++n20;
                                                }
                                                if (array4[n20] != 0) {
                                                    while (array4[n20] != n22) {
                                                        n21 <<= 1;
                                                        ++n22;
                                                    }
                                                }
                                            }
                                            this.Z[j] = new int[16];
                                            this.I[j] = new int[16];
                                            this.Code[j] = new short[16];
                                            int n23 = 0;
                                            for (int n24 = 0; n24 < 16; ++n24) {
                                                if (array3[n24] == 0) {
                                                    this.I[j][n24] = -1;
                                                }
                                                else {
                                                    this.Code[j][n24] = (short)n23;
                                                    this.Z[j][n24] = array5[n23];
                                                    n23 += array3[n24] - 1;
                                                    this.I[j][n24] = array5[n23];
                                                    ++n23;
                                                }
                                            }
                                            this.bp += 16;
                                            this.bn -= 16;
                                            i -= 16;
                                            this.J[j] = new byte[k];
                                            for (int n25 = 0; n25 < k; ++n25) {
                                                this.J[j][n25] = this.f[this.bp + n25];
                                            }
                                            this.bp += k;
                                            this.bn -= k;
                                            i -= k;
                                            this.B[j] = new byte[512];
                                            for (k = 0; k < 256; ++k) {
                                                this.B[j][k] = 9;
                                            }
                                            k = 0;
                                            for (int n26 = 1; n26 <= 8; ++n26) {
                                                for (short n27 = 0; n27 < array3[n26 - 1]; ++n27) {
                                                    final int n28 = array5[k] << 8 - n26;
                                                    for (int n29 = 0; n29 < 1 << 8 - n26; ++n29) {
                                                        this.B[j][n28 | n29] = (byte)n26;
                                                        this.B[j][256 + (n28 | n29)] = this.J[j][k];
                                                    }
                                                    ++k;
                                                }
                                            }
                                        }
                                        l = 0;
                                        continue;
                                    }
                                    case 219: {
                                        if (this.bn < 4) {
                                            l = -2;
                                            continue;
                                        }
                                        i = ((this.f[this.bp + 2] & 0xFF) << 8 | (this.f[this.bp + 3] & 0xFF));
                                        if (this.bn < i + 2) {
                                            l = -2;
                                            continue;
                                        }
                                        this.bp += 4;
                                        this.bn -= 4;
                                        i -= 2;
                                        while (i > 0) {
                                            final int n30 = this.f[this.bp] & 0xF0;
                                            j = (n30 | -n30) >>> 31;
                                            k = (this.f[this.bp] & 0xF);
                                            ++this.bp;
                                            --this.bn;
                                            --i;
                                            this.J[k] = new int[64];
                                            if (j != 0) {
                                                int n31;
                                                for (j = 0; j < 64; ++j) {
                                                    n31 = Code.r[j];
                                                    this.J[k][j] = ((this.f[this.bp + (n31 << 1)] & 0xFF) << 8 | (this.f[this.bp + (n31 << 1) + 1] & 0xFF)) * Code.s[j];
                                                }
                                                this.bp += 128;
                                                this.bn -= 128;
                                                i -= 128;
                                            }
                                            else {
                                                for (j = 0; j < 64; ++j) {
                                                    this.J[k][j] = (this.f[this.bp + Code.r[j]] & 0xFF) * Code.s[j];
                                                }
                                                this.bp += 64;
                                                this.bn -= 64;
                                                i -= 64;
                                            }
                                        }
                                        l = 0;
                                        continue;
                                    }
                                    case 221: {
                                        if (this.bn < 4) {
                                            return this.bn;
                                        }
                                        this.br = ((this.f[this.bp + 2] & 0xFF) << 8 | (this.f[this.bp + 3] & 0xFF));
                                        if (this.bn < 6) {
                                            return this.bn;
                                        }
                                        this.cn = ((this.f[this.bp + 4] & 0xFF) << 8 | (this.f[this.bp + 5] & 0xFF));
                                        this.cm = 0;
                                        this.bp += 6;
                                        this.bn -= 6;
                                        this.br -= 4;
                                        continue;
                                    }
                                    case 217: {
                                        this.bp += 2;
                                        this.bn -= 2;
                                        this.bh = 6;
                                        continue;
                                    }
                                    case 0:
                                    case 255: {
                                        ++this.bp;
                                        --this.bn;
                                        continue;
                                    }
                                    default: {
                                        if (this.bn < 4) {
                                            return this.bn;
                                        }
                                        this.br = ((this.f[this.bp + 2] & 0xFF) << 8 | (this.f[this.bp + 3] & 0xFF));
                                        this.bp += 4;
                                        this.bn -= 4;
                                        this.br -= 2;
                                        continue;
                                    }
                                }
                            }
                        }
                        continue;
                    }
                    case 3: {
                        if (this.bn < this.bl * 3) {
                            return this.bn;
                        }
                        for (i = 0; i < this.bl; ++i) {
                            this.g[i] = (this.f[this.bp] & 0xFF);
                            k = ((j = (this.f[this.bp + 1] & 0xFF)) & 0xF);
                            if ((j >>>= 4) > this.bq) {
                                this.bq = j;
                            }
                            if (k > this.a) {
                                this.a = k;
                            }
                            this.t[i] = j;
                            this.I[i] = k;
                            this.z[i] = (this.f[this.bp + 2] & 0xFF);
                            this.bp += 3;
                            this.bn -= 3;
                            this.C -= 3;
                        }
                        if (this.C > 0) {
                            this.br = this.C;
                        }
                        for (i = 0; i < this.bl; ++i) {
                            this.u[i] = ((this.cr * this.t[i] + this.bq - 1) / this.bq + 7) / 8;
                            if (this.bo == 0) {
                                this.Z[i] = new byte[64 * this.u[i] * this.I[i]];
                            }
                            else {
                                this.Z[i] = new byte[64 * this.I[i] * this.t[i]];
                            }
                        }
                        this.cq = 0;
                        if (this.bl > 1) {
                            this.az = (this.bq << 3) * ((this.cr + 8 * this.bq - 1) / (this.bq << 3));
                            this.b = (this.a << 3) * ((this.cs + 8 * this.a - 1) / (this.a << 3));
                        }
                        this.bh = 2;
                        continue;
                    }
                    case 6: {
                        return 0;
                    }
                    case 0: {
                        if (this.bn < 2) {
                            return this.bn;
                        }
                        this.bp += 2;
                        this.bn -= 2;
                        this.bh = 1;
                        continue;
                    }
                }
            }
            break;
        }
        if (l == -2) {
            return this.bn;
        }
        return l;
    }
    
    private void b(final boolean b) {
        final int n2;
        final int n = (n2 = this.a << 3) * this.cq;
        final int[] array = new int[3];
        final int[] array2 = new int[3];
        final int[] array3 = new int[3];
        final int[] array4 = new int[3];
        if (this.bl == 3) {
            array2[array[0] = 0] = (this.I[0] << 11) / this.a;
            array4[0] = (this.t[0] << 11) / this.bq;
            array[1] = 0;
            array2[1] = (this.I[1] << 11) / this.a;
            array4[1] = (this.t[1] << 11) / this.bq;
            array[2] = 0;
            array2[2] = (this.I[2] << 11) / this.a;
            array4[2] = (this.t[2] << 11) / this.bq;
        }
        if (!b) {
            this.cw = this.cr;
        }
        else {
            this.cw = ((this.co == 0) ? (this.cr % (this.bq << 3)) : (this.bq << 3));
            if (this.cw == 0) {
                this.cw = this.bq << 3;
            }
        }
        final int[] array5 = b ? this.h : this.x;
        for (int i = 0; i < n2; ++i) {
            if (n + i < this.cs && this.bl == 3) {
                int n3 = (n + i) * this.cr;
                if (b) {
                    final int cv = n3 + (((this.u[0] + 1 & 0xFFFFFFFE) << 3) - ((this.co / this.cp + 1) * this.bq << 3));
                    if (this.cv == -1) {
                        this.cv = cv;
                    }
                    n3 = i * this.bq << 3;
                }
                final int n4 = array[0] >> 11;
                int[] array6;
                int n5;
                if (b) {
                    array6 = this.t;
                    n5 = 0;
                }
                else {
                    array6 = this.u;
                    n5 = 0;
                }
                final int n6 = n4 * (array6[n5] << 3);
                final int[] array7 = array;
                final int n7 = 0;
                array7[n7] += array2[0];
                array3[0] = 0;
                final int n8 = array[1] >> 11;
                int[] array8;
                int n9;
                if (b) {
                    array8 = this.t;
                    n9 = 1;
                }
                else {
                    array8 = this.u;
                    n9 = 1;
                }
                final int n10 = n8 * (array8[n9] << 3);
                final int[] array9 = array;
                final int n11 = 1;
                array9[n11] += array2[1];
                array3[1] = 0;
                final int n12 = array[2] >> 11;
                int[] array10;
                int n13;
                if (b) {
                    array10 = this.t;
                    n13 = 2;
                }
                else {
                    array10 = this.u;
                    n13 = 2;
                }
                final int n14 = n12 * (array10[n13] << 3);
                final int[] array11 = array;
                final int n15 = 2;
                array11[n15] += array2[2];
                array3[2] = 0;
                if (this.t[0] == 2 && this.t[1] == 1 && this.t[2] == 1) {
                    for (int j = 0; j < this.cw >> 1; ++j) {
                        final int n16 = this.Z[0][n6 + (j << 1)] & 0xFF;
                        int n17 = this.Z[1][n10 + j] & 0xFF;
                        int n18 = this.Z[2][n14 + j] & 0xFF;
                        final short n19 = Code.Z[n18];
                        final short n20 = Code.J[n17];
                        n17 -= 128;
                        n18 -= 128;
                        final int n21 = n17 * 705 + n18 * 1463 + 1024 >> 11;
                        array5[n3++] = (Code.I[n16 + n19 + 256] << 16 | Code.I[n16 - n21 + 256] << 8 | Code.I[n16 + n20 + 256]);
                        final int n22 = this.Z[0][n6 + (j << 1) + 1] & 0xFF;
                        array5[n3++] = (Code.I[n22 + n19 + 256] << 16 | Code.I[n22 - n21 + 256] << 8 | Code.I[n22 + n20 + 256]);
                    }
                    if ((this.cr & 0x1) != 0x0 && this.co == 0) {
                        final int n23 = b ? (8 * this.bq) : this.cr;
                        final int n24 = this.Z[0][n6 + n23 - 1] & 0xFF;
                        int n25 = this.Z[1][n10 + (n23 - 1 >> 1)] & 0xFF;
                        int n26 = this.Z[2][n14 + (n23 - 1 >> 1)] & 0xFF;
                        final short n27 = Code.I[n24 + Code.J[n25] + 256];
                        n25 -= 128;
                        n26 -= 128;
                        array5[n3] = (Code.I[n24 + Code.Z[n26 + 128] + 256] << 16 | Code.I[n24 - (n25 * 705 + n26 * 1463 + 1024 >> 11) + 256] << 8 | n27);
                    }
                }
                else if (this.t[0] == 1 && this.t[1] == 1 && this.t[2] == 1) {
                    for (int k = 0; k < this.cw; ++k) {
                        final int n28 = this.Z[0][n6 + k] & 0xFF;
                        int n29 = this.Z[1][n10 + k] & 0xFF;
                        int n30 = this.Z[2][n14 + k] & 0xFF;
                        final short n31 = Code.I[n28 + Code.J[n29] + 256];
                        n29 -= 128;
                        n30 -= 128;
                        array5[n3++] = (Code.I[n28 + Code.Z[n30 + 128] + 256] << 16 | Code.I[n28 - (n29 * 705 + n30 * 1463 + 1024 >> 11) + 256] << 8 | n31);
                    }
                }
                else {
                    for (int l = 0; l < this.cw; ++l) {
                        final int n32 = array3[0] >> 11;
                        final int[] array12 = array3;
                        final int n33 = 0;
                        array12[n33] += array4[0];
                        final byte b2 = this.Z[0][n6 + n32];
                        final int n34 = array3[1] >> 11;
                        final int[] array13 = array3;
                        final int n35 = 1;
                        array13[n35] += array4[1];
                        int n36 = this.Z[1][n10 + n34];
                        final int n37 = array3[2] >> 11;
                        final int[] array14 = array3;
                        final int n38 = 2;
                        array14[n38] += array4[2];
                        int n39 = this.Z[2][n14 + n37];
                        final short n40 = Code.I[b2 + Code.J[n36] + 256];
                        n36 -= 128;
                        n39 -= 128;
                        array5[n3++] = (Code.I[b2 + Code.Z[n39 + 128] + 256] << 16 | Code.I[b2 - (n36 * 705 + n39 * 1463 + 1024 >> 11) + 256] << 8 | n40);
                    }
                }
            }
        }
    }
    
    private void Code(int i, final short[] array, final byte[] array2, int n, final int n2) {
        final int[] array3 = new int[64];
        for (int j = 0; j < 8; ++j) {
            if (array[Code.r[j + 8]] == 0 && array[Code.r[j + 16]] == 0 && array[Code.r[j + 24]] == 0 && array[Code.r[j + 32]] == 0 && array[Code.r[j + 40]] == 0 && array[Code.r[j + 48]] == 0 && array[Code.r[j + 56]] == 0) {
                final int n3 = array[Code.r[j]] * this.J[this.z[i]][j];
                array3[j + 8] = (array3[j] = n3);
                array3[j + 24] = (array3[j + 16] = n3);
                array3[j + 40] = (array3[j + 32] = n3);
                array3[j + 56] = (array3[j + 48] = n3);
            }
            else {
                array3[j] = array[Code.r[j]] * this.J[this.z[i]][j];
                array3[j + 8] = array[Code.r[j + 8]] * this.J[this.z[i]][j + 8];
                array3[j + 16] = array[Code.r[j + 16]] * this.J[this.z[i]][j + 16];
                array3[j + 24] = array[Code.r[j + 24]] * this.J[this.z[i]][j + 24];
                array3[j + 32] = array[Code.r[j + 32]] * this.J[this.z[i]][j + 32];
                array3[j + 40] = array[Code.r[j + 40]] * this.J[this.z[i]][j + 40];
                array3[j + 48] = array[Code.r[j + 48]] * this.J[this.z[i]][j + 48];
                array3[j + 56] = array[Code.r[j + 56]] * this.J[this.z[i]][j + 56];
                final int n4 = array3[j];
                final int n5 = array3[j + 32];
                final int n6 = array3[j + 16] - array3[j + 48];
                final int n7 = array3[j + 16] + array3[j + 48];
                final int n8 = n4 - n5;
                final int n9 = (n6 >> 8) * 362 - n7;
                final int n10 = n8 - n9;
                final int n11 = n8 + n9;
                final int n13;
                final int n12 = (n13 = n4 + n5) - n7;
                final int n14 = n13 + n7;
                final int n15 = array3[j + 40] - array3[j + 24];
                final int n16 = array3[j + 8] + array3[j + 56];
                final int n17 = array3[j + 24] + array3[j + 40];
                final int n18 = n16 + n17;
                final int n19 = (n16 - n17 >> 8) * 362;
                final int n20 = array3[j + 8] - array3[j + 56];
                final int n21 = (n15 + n20 >> 8) * 196;
                final int n22 = (-n15 >> 8) * 277 - n21;
                final int n24;
                final int n23 = (n24 = (n20 >> 8) * 669 - n21 - n18) - n19;
                final int n25 = n22 - n23;
                array3[j] = n14 + n18;
                array3[j + 8] = n11 + n24;
                array3[j + 16] = n10 - n23;
                array3[j + 24] = n12 - n25;
                array3[j + 32] = n12 + n25;
                array3[j + 40] = n10 + n23;
                array3[j + 48] = n11 - n24;
                array3[j + 56] = n14 - n18;
            }
        }
        byte b;
        int n26;
        int n27;
        int n28;
        int n29;
        int n30;
        int n31;
        int n32;
        int n33;
        int n35;
        int n34;
        int n36;
        int n37;
        int n38;
        int n39;
        int n40;
        int n41;
        int n42;
        int n43;
        int n44;
        int n46;
        int n45;
        int n47;
        for (i = 0; i < 64; i += 8) {
            if (array3[i + 1] == 0 && array3[i + 2] == 0 && array3[i + 3] == 0 && array3[i + 4] == 0 && array3[i + 5] == 0 && array3[i + 6] == 0 && array3[i + 7] == 0) {
                b = (byte)Code.I[(array3[i] + 1024 >> 11) + 128 + 256];
                array2[n + 1] = (array2[n] = b);
                array2[n + 3] = (array2[n + 2] = b);
                array2[n + 5] = (array2[n + 4] = b);
                array2[n + 7] = (array2[n + 6] = b);
            }
            else {
                n26 = array3[i];
                n27 = array3[i + 4];
                n28 = array3[i + 2] - array3[i + 6];
                n29 = array3[i + 2] + array3[i + 6];
                n30 = n26 - n27;
                n31 = (n28 >> 8) * 362 - n29;
                n32 = n30 - n31;
                n33 = n30 + n31;
                n34 = (n35 = n26 + n27) - n29;
                n36 = n35 + n29;
                n37 = array3[i + 5] - array3[i + 3];
                n38 = array3[i + 1] + array3[i + 7];
                n39 = array3[i + 3] + array3[i + 5];
                n40 = n38 + n39;
                n41 = (n38 - n39 >> 8) * 362;
                n42 = array3[i + 1] - array3[i + 7];
                n43 = (n37 + n42 >> 8) * 196;
                n44 = (-n37 >> 8) * 277 - n43;
                n45 = (n46 = (n42 >> 8) * 669 - n43 - n40) - n41;
                n47 = n44 - n45;
                array2[n] = (byte)Code.I[(n36 + n40 + 1024 >> 11) + 128 + 256];
                array2[n + 1] = (byte)Code.I[(n33 + n46 + 1024 >> 11) + 128 + 256];
                array2[n + 2] = (byte)Code.I[(n32 - n45 + 1024 >> 11) + 128 + 256];
                array2[n + 3] = (byte)Code.I[(n34 - n47 + 1024 >> 11) + 128 + 256];
                array2[n + 4] = (byte)Code.I[(n34 + n47 + 1024 >> 11) + 128 + 256];
                array2[n + 5] = (byte)Code.I[(n32 + n45 + 1024 >> 11) + 128 + 256];
                array2[n + 6] = (byte)Code.I[(n33 - n46 + 1024 >> 11) + 128 + 256];
                array2[n + 7] = (byte)Code.I[(n36 - n40 + 1024 >> 11) + 128 + 256];
            }
            n += n2;
        }
    }
    
    private void aq() {
        if (this.cj == 1) {
            this.co = ((this.t[this.v[this.ck]] * this.cr + this.bq - 1) / this.bq + 7) / 8;
            this.w[this.v[this.ck]] = 0;
            return;
        }
        this.co = 0;
        for (int i = 0; i < this.cj; ++i) {
            this.co += this.I[this.v[i]] * this.t[this.v[i]];
            this.w[this.v[i]] = 0;
        }
        this.cp = this.co;
        this.co *= this.az / (8 * this.bq);
    }
    
    private static void Code(final int[] array, final int[] array2) {
        final int n = array.length - Code(0, array);
        final int n2 = array2.length - Code(0, array2);
        final int n3 = array.length - n - (array2.length - n2);
        final int[] array3 = new int[array2.length - n2 + n3];
        for (int i = n3 << 5; i >= 0; --i) {
            final int n4 = i;
            final int[] array4 = array3;
            final int n5 = n4;
            int n6 = n5 >>> 5;
            final int n7 = n5 & 0x1F;
            final int n8 = array2.length - n2;
            if (n7 == 0) {
                System.arraycopy(array2, n2, array4, array4.length - n8 - n6, n8);
            }
            else {
                final int n9 = 32 - n7;
                final int n10;
                if ((n10 = array2[n2] >>> n9) != 0) {
                    ++n6;
                }
                int n11 = array4.length - n8 - n6;
                if (n10 != 0) {
                    array4[n11++] = n10;
                }
                int n12 = array2[n2];
                for (int j = n2 + 1; j < n8; ++j) {
                    final int n13 = array2[j];
                    array4[n11++] = (n12 << n7 | n13 >>> n9);
                    n12 = n13;
                }
                array4[n11] = array2[n8 + n2 - 1] << n7;
            }
            final int n14 = array4.length - n8 - n6;
            while (true) {
                final int n15 = n14;
                final int[] array5 = array3;
                final int n16 = n15;
                int n17 = array.length - Code(n, array);
                int n18 = array5.length - Code(n16, array5);
                if (array.length - n17 != array5.length - n18) {
                    if (array.length - n17 - (array5.length - n18) < 0) {
                        break;
                    }
                }
                else {
                    while (n17 < array.length - 1 && array[n17] == array5[n18]) {
                        ++n17;
                        ++n18;
                    }
                    if ((int)(((long)array[n17] & 0xFFFFFFFFL) - ((long)array5[n18] & 0xFFFFFFFFL) >> 63) < 0) {
                        break;
                    }
                }
                final int n19 = n14;
                final int[] array6 = array3;
                final int n20 = n19;
                int n21 = array.length - 1;
                int k = array6.length - 1;
                int n22 = 0;
                long n23;
                do {
                    n23 = ((long)array[n21] & 0xFFFFFFFFL) - ((long)array6[k--] & 0xFFFFFFFFL) + n22;
                    array[n21--] = (int)n23;
                    n22 = (int)(n23 >> 63);
                } while (k >= n20);
                while (n21 >= n && n23 < 0L) {
                    n23 = ((long)array[n21] & 0xFFFFFFFFL) + n22;
                    array[n21--] = (int)n23;
                }
            }
        }
    }
    
    private void Code(final Command command, final Command command2) {
        for (int n = 0; this.Code != null && n < this.Code.length; ++n) {
            ((Displayable)Code.Code).removeCommand(this.Code[n]);
        }
        (this.Code = new Command[2])[0] = command;
        this.Code[1] = command2;
        for (int i = 0; i < this.Code.length; ++i) {
            ((Displayable)Code.Code).addCommand(this.Code[i]);
        }
    }
    
    private static boolean I(final byte[] array, int n, final byte[] array2, int n2, int n3) {
        while (n3-- > 0) {
            if (array[n++] != array2[n2++]) {
                return false;
            }
        }
        return true;
    }
    
    private static boolean Code(final int[] array, int n, final int[] array2, int n2, int n3) {
        while (n3-- > 0) {
            if (array[n++] != array2[n2++]) {
                return false;
            }
        }
        return true;
    }
    
    private synchronized void P() {
        this.Q();
        this.br = 0;
    }
    
    private synchronized void y() {
        if (this.Code != null) {
            final a code = this.Code;
            if (code != this.I) {
                this.br = 0;
            }
            this.bn += this.Code.g() - this.br;
            this.br = this.Code.g();
            this.I = code;
        }
        if (this.C != null) {
            a(this.bk + 3, this.bm);
            a(this.bk + 4, this.bn);
            a(this.bk + 5, this.bo);
            a(this.bk + 6, this.bp);
        }
    }
    
    private void as() {
        while (this.cu <= 24 && this.bn > 0) {
            final int n;
            if ((n = (this.f[this.bp] & 0xFF)) == 255) {
                if (this.bn < 2 || this.f[this.bp + 1] != 0) {
                    return;
                }
                ++this.bp;
                --this.bn;
            }
            ++this.bp;
            --this.bn;
            this.ct |= n << 24 - this.cu;
            this.cu += 8;
        }
    }
    
    private static void Code(final Code code, final B b, final int n, int n2, final int n3, int n4) {
        if (n4 > b.Code.getHeight()) {
            n2 += (n4 - b.Code.getHeight()) / 2;
        }
        n4 = b.Code.getWidth();
        n4 = Math.min(b.Code.getWidth() / 3, Math.min(n3 / 2, n4));
        code.Code(b, 0, 0, n4, b.Code.getHeight(), n, n2);
        code.Code(b, b.Code.getWidth() - n4, 0, n4, b.Code.getHeight(), n + n3 - n4, n2);
        code.I(b, n4, 0, b.Code.getWidth() - (n4 << 1), b.Code.getHeight(), n + n4, n2, n3 - (n4 << 1), b.Code.getHeight());
    }
    
    private static void Code(final byte[] array, final byte[] array2, int i, final int n) {
        while (i < n) {
            if ((array[i] == 1 && (array2[i] & 0x1) != 0x0) || (array[i] == 2 && (array2[i] & 0x1) == 0x0)) {
                final int n2 = i;
                ++array2[n2];
            }
            else if (array[i] == 16 || array[i] == 8) {
                final int n3 = i;
                array2[n3] += (byte)(-(array2[i] & 0x1) + 2);
            }
            ++i;
        }
    }
    
    private Code(final int n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aL = true;
        this.aE = true;
        this(0, 0, 0, n, 1, 0);
    }
    
    private Code(final boolean b) {
        this.d = true;
        this.b = true;
        this((byte)0);
        this.I = null;
        final byte b2 = 0;
        this.I = b2;
        this.Code = b2;
        this.b = 0;
    }
    
    private void Code(final B b) {
        this.B.Code(b);
    }
    
    private byte Code() {
        if (this.c) {
            return 0;
        }
        if (this.b) {
            return 4;
        }
        if (this.a) {
            return 2;
        }
        return 1;
    }
    
    private static int Code(final Throwable t, int code, int ah) {
        if (Code.ag != 0) {
            if (Code.ah >= 0) {
                ah = Code.ah;
                Code.ah = -1;
            }
            Code.L = Code.ag;
            Code.ag = 0;
        }
        else if (code == 22) {
            Code.L = Code.ae;
        }
        else {
            Code.L = b(2, Code.Z[code]);
            if (t.getMessage() != null) {
                code = Code(t.getMessage());
                a(Code.L, code);
            }
        }
        final int l = Code.L;
        int i = ah;
        code = l;
        if (Code.x < 0) {
            k();
        }
        Code.af = 11;
        l();
        do {
            int j;
            for (j = 0; j < Code.b.length && Code.b[j + 1] <= i; j += 4) {}
            int n;
            for (n = j; n < Code.b.length && Code.b[n + 1] <= Code.b[j + 1]; n += 4) {}
            while (j != n) {
                n -= 4;
                if (Code.b[n] <= i && Code.b[n + 1] > i && Z(l(code - 1), Code.b[n + 2])) {
                    final int n2 = Code.y + c(Code.x);
                    final int x = Code.x;
                    Code.D = n2 + (((Code.I[x] & 0x4) == 0x0) ? 3 : (Code.I[x + (Code.I[x] & 0x1) + (Code.I[x] >> 1 & 0x1) + 1] + 4));
                    final int z = Code.z;
                    final int x2 = Code.x;
                    ah = (Code.I[x2] >> 6 & 0x3);
                    if ((Code.I[x2] & 0x2) != 0x0) {
                        ah += Code.I[x2 + (Code.I[x2] & 0x1) + 1];
                    }
                    final int n3 = z + ah;
                    final int x3 = Code.x;
                    Code.E = n3 + (((Code.I[x3] & 0x8) == 0x0) ? 3 : (Code.I[x3 + (Code.I[x3] & 0x1) + (Code.I[x3] >> 1 & 0x1) + (Code.I[x3] >> 2 & 0x1) + 1] + 4));
                    Code(code);
                    return Code.b[n + 3];
                }
            }
            i = k();
            if (Code.x < 0) {
                Code.ag = code;
                Code.ah = -1;
                throw t;
            }
        } while (i >= 0);
        return -1;
    }
    
    private Code(final Code c, final byte b) {
        this.bi = true;
        this.bh = true;
        this.C = c;
        this.B = new B(c);
    }
    
    private synchronized void x(final int n) {
        int length;
        if (Code.e == null) {
            length = 0;
            Code.e = new byte[4];
        }
        else {
            length = Code.e.length;
            for (int i = 0; i < length; i += 4) {
                if (Code(Code.e, i) == n) {
                    return;
                }
            }
            final byte[] e = new byte[length + 4];
            System.arraycopy(Code.e, 0, e, 0, length);
            Code.e = e;
        }
        Code.e[length] = (byte)((0xFF000000 & n) >> 24);
        Code.e[length + 1] = (byte)((0xFF0000 & n) >> 16);
        Code.e[length + 2] = (byte)((0xFF00 & n) >> 8);
        Code.e[length + 3] = (byte)(0xFF & n);
        if (Code.d == null) {
            (Code.d = new byte[1 + Code.e.length])[0] = (byte)(Code.e.length / 4);
            System.arraycopy(Code.e, 0, Code.d, 1, Code.e.length);
            Code.p = true;
            return;
        }
        final byte[] d = new byte[Code.d.length + 4];
        System.arraycopy(Code.d, 0, d, 0, Code.d.length);
        System.arraycopy(Code.e, length, d, Code.d.length, 4);
        d[0] = (byte)((d.length - 1) / 4);
        Code.d = d;
        Code.p = true;
    }
    
    private static B Code(final int n, final int n2) {
        return new B(Image.createImage(n, n2), false);
    }
    
    private static String Code(final byte[] array, final int n, final int n2) {
        return new String(Code(array, n, n2));
    }
    
    private int Code(final DataInput dataInput, final int n) {
        if (this.c) {
            this.b = dataInput.readInt();
            dataInput.readFully(this.Code = new byte[4]);
            return 0;
        }
        if (this.b) {
            final int unsignedByte = dataInput.readUnsignedByte();
            this.Code = (byte)(unsignedByte & 0x7);
            final int n2 = unsignedByte & 0x8;
            this.B = (((n2 | -n2) >>> 31 ^ 0x1) != 0x0);
            this.I = (byte)((unsignedByte & 0x70) >> 4);
            this.b = dataInput.readInt();
            final short short1 = dataInput.readShort();
            (this.I = new int[short1])[0] = dataInput.readInt() + n;
            for (short n3 = 1; n3 < short1; ++n3) {
                this.I[n3] = dataInput.readInt() + this.I[n3 - 1];
            }
            return this.I[0];
        }
        if (this.a) {
            this.b = dataInput.readInt() + n;
            dataInput.readUnsignedByte();
            dataInput.readInt();
            return this.b;
        }
        this.C = dataInput.readInt() + n;
        this.a = dataInput.readUnsignedShort();
        this.b = dataInput.readUnsignedShort();
        dataInput.readFully(this.Code = new byte[(this.a > this.b) ? this.a : this.b]);
        return this.C;
    }
    
    private static void d() {
        Code.B = Code.b;
        final String s = "splash";
        try {
            if (a(s)) {
                Code.n = Code(Code.J.Code("splash", 1), 0);
                final DataInputStream dataInputStream;
                if ((dataInputStream = new DataInputStream(new ByteArrayInputStream(Code.J.Code("splash", 2)))).readInt() == 1397764400) {
                    final short short1 = dataInputStream.readShort();
                    String s2 = "";
                    for (short n = 0; n < short1; ++n) {
                        final String utf = dataInputStream.readUTF();
                        for (short short2 = dataInputStream.readShort(), n2 = 0; n2 < short2; ++n2) {
                            final String utf2 = dataInputStream.readUTF();
                            final String utf3 = dataInputStream.readUTF();
                            if (utf.equals("brand-logo") && utf2.equals("bitmap")) {
                                s2 = utf3;
                            }
                        }
                    }
                    for (short short3 = dataInputStream.readShort(), n3 = 0; n3 < short3; ++n3) {
                        final String utf4 = dataInputStream.readUTF();
                        final int int1 = dataInputStream.readInt();
                        if (utf4.equals(s2)) {
                            final byte[] array = new byte[int1];
                            dataInputStream.readFully(array);
                            Code.Code = Code.Z.Code(array, array.length, true);
                        }
                        else {
                            Code((InputStream)dataInputStream, int1);
                        }
                    }
                }
            }
        }
        finally {}
        final int n4 = 32771;
        final boolean b = true;
        try {
            Code.J = Code(n4, b);
            Code.I = Code(32772, true);
            Code.Z = Code(32773, true);
            if (Code.Code == null) {
                Code.Code = Code(32770, true);
            }
        }
        finally {}
        Code.g = (Code.Code = Code(64, 0, 8)).a();
        Code.h = Math.max(Code.I.Code.getHeight(), Code.Z.Code.getHeight());
        Code.e = true;
    }
    
    private static void Code(final byte[] array, final int n, final int n2, final int n3, final int n4) {
        array[n + 4] = (byte)(n4 + 2 >> 8);
        array[n + 4 + 1] = (byte)(n4 + 2);
        array[n + 4 + 2] = (byte)n2;
        array[n + 4 + 3] = (byte)n3;
    }
    
    private static void I(final int n, final byte[] array, final int n2) {
        array[n2] = (byte)(n >> 8);
        array[n2 + 1] = (byte)n;
    }
    
    static {
        Code.t = new byte[256];
        Code.u = new byte[366];
        Code.D = new int[366];
        Code.I = new char[512];
        Code.c = new Hashtable();
        Code.M = new Code(false, (byte)0);
        Code.Z = new B[1];
        Code.A = new int[3];
        Code.J = new B[1];
        Code.p = new int[256];
        Code.b = new Hashtable();
        Code.l = "-";
        Code.Z = new String[] { "u", "h1", "r", "g", "eurls", "b", "se" };
        Code.B = -1;
        Code.ca = 384;
        Code.cc = -1;
        Code.cd = -1;
        Code.ce = 1;
        Code.b = 500000L;
        Code.bx = -1;
        Code.Z = 4;
        Code.Q = true;
        Code.by = -1;
        Code.J = -1;
        Code.bD = -1;
        Code.bE = -1;
        Code.Y = true;
        Code.af = true;
        Code.bG = 2;
        Code.bH = 2;
        Code.Code = '*';
        Code.bI = -1;
        Code.bJ = -1;
        Code.bK = 512;
        Code.A = new Code((short)0, false);
        final int[] array = { 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8 };
        Code.I = new String[4];
        Code.Z = new Object();
        Code.J = new Object();
        Code.k = "am,ar,as,az,bn,bs,cs,el,fa,gu,ha,he,hi,hr,hu,hy,ig,ja,ka,kk,km,kn,ko,ks,ky,lo,lt,lv,mk,ml,mn,mr,or,pa,pl,ps,ro,si,sk,sl,sr,ta,te,tg,th,tk,tr,ur,uz,vi,yo,zh-cn,zh-hk,zh-tw,";
        Code.bN = -1;
        Code.bO = -1;
        Code.bP = 313;
        Code.bQ = 33;
        Code.bR = 275;
        Code.n = new byte[32];
        Code.o = new byte[32];
        Code.p = new byte[] { 34, 34, 35, 35, 37, 37, 39, 39 };
        Code.q = new byte[] { 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 38, 38, 39, 39, 40, 40, 40, 40, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 65, 65, 65, 65, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 71, 72, 72, 73, 73, 74, 74, 74, 74 };
        Code.bY = -1;
        Code.bZ = -1;
        (Code.a = new Hashtable(6)).put("http", new Integer(80));
        Code.a.put("https", new Integer(443));
        Code.a.put("ftp", new Integer(21));
        Code.a.put("rtsp", new Integer(554));
        Code.Code = new Integer(0);
        Code.w = new Code("i", "*", 0, "/firsttime/*", 1);
        Code.x = new Code("server", "*", 0, "setup", 1);
        Code.y = new Code(0, 0, "mini5.opera-mini.net", 80, 1080, "c1dd7ab77e2c967746fe10681026c920f864811321bcb8be6bbfa5a03fda4e16c9c8db3af280f7703366e778e93c55e7159a8852d2b1381e521a337f22b1406cddf41a3114aecb4f4bfe79e0c5aa2ba8824fc989cb8bdcbf8ec5cef5176bfd4059f229b91bfa025126b295f9c409e75f6f6415ee094fd7f5dfd395a1f431668c5a08e88de891dc4dd38d4e9aa9b9c00dc604a0428e3aa5a28ccfa75af099147b", "mini5.opera-mini.net");
        Code.Z = -1;
        Code.E = true;
        Code.J = -1;
        Code.B = -1;
        Code.g = "";
        Code.h = "";
        Code.C = new Hashtable();
        Code.G = false;
        Code.I = new Object();
        Code.bv = -1;
        Code.B = new Vector(2);
        Code.C = null;
        Code.k = Code(Z("428a2f9871374491b5c0fbcfe9b5dba53956c25b59f111f1923f82a4ab1c5ed5d807aa9812835b01243185be550c7dc372be5d7480deb1fe9bdc06a7c19bf174e49b69c1efbe47860fc19dc6240ca1cc2de92c6f4a7484aa5cb0a9dc76f988da983e5152a831c66db00327c8bf597fc7c6e00bf3d5a7914706ca63511429296727b70a852e1b21384d2c6dfc53380d13650a7354766a0abb81c2c92e92722c85a2bfe8a1a81a664bc24b8b70c76c51a3d192e819d6990624f40e3585106aa07019a4c1161e376c082748774c34b0bcb5391c0cb34ed8aa4a5b9cca4f682e6ff3748f82ee78a5636f84c878148cc7020890befffaa4506cebbef9a3f7c67178f2"), 0, 256);
        Code.o = new Code((short)0, '\0');
        Code.Code = new TextBox("", "", 1, 0);
        Code.e = "\u0003\u0001" + '\u0016' + "../:_-~%$?=&!+#*@,;\\'()";
        new Code('\0', (byte)0);
        Code.Z = new Hashtable();
        Code.i = new int[4];
        Code.i = new byte[0];
        new Code((byte)0, 0);
        Code.a = "";
        Code.aH = 1;
        Code.aI = -1;
        Code.e = new int[32];
        Code.f = new int[32];
        Code.Z = new Vector();
        Code.Code = new Object();
    }
    
    private void b(int ah) {
        ah = Code.a[ah];
        ah = I(0, ah, (Code.F > 0) ? Code.C[Code.F - 5 + 3] : -1);
        byte b;
        int n;
        int n2;
        int l;
        int b2;
        int n4;
        int n3;
        int h;
        long n5;
        int n6;
        int j;
        byte b3;
        int n7;
        int n9;
        int n8;
        int b4;
        int n10;
        int n11;
        int i;
        int[] b5;
        int n12;
        int k;
        int g;
        int code;
        int m;
        int b6;
        int h2;
        int h3;
        long n13;
        int j2;
        int[] b7;
        int n14;
        long n15;
        byte b8;
        int[] b9;
        int n16;
        long n17;
        int[] b10;
        int n18;
        long n19;
        long n20;
        long n21;
        int[] b11;
        int n22;
        int l2;
        int n23;
        int[] b12;
        int n24;
        long n25;
        int i2;
        byte b13;
        int[] b14;
        int n26;
        int[] b15;
        int n27;
        int h4;
        int n28;
        int n29;
        int h5;
        int h6;
        int h7;
        int n30;
        int b16;
        int j3;
        int l3;
        int h8;
        int l4;
        int n31;
        int n32;
        int h9;
        long n33;
        int[] b17;
        int n34;
        int[] b18;
        int n35;
        long n36;
        long n37;
        int h10;
        int n38;
        int n39;
        int[] b19;
        int n40;
        int[] b20;
        int n41;
        int[] b21;
        int n42;
        long n43;
        int[] b22;
        int n44;
        int[] b23;
        int n45;
        int[] b24;
        int n46;
        int h11;
        int a;
        int h12;
        int[] b25;
        int n47;
        int h13;
        int[] b26;
        int n48;
        byte[] i3;
        int n49;
        byte[] array;
        int[] b27;
        int n50;
        int[] b28;
        int n51;
        int[] b29;
        int n52;
        int n53;
        int[] b30;
        int n54;
        int n55;
        int[] b31;
        int n56;
        int[] b32;
        int n57;
        final Throwable t;
        Block_38_Outer:Label_6644_Outer:
        while (true) {
        Label_7496_Outer:
            while (true) {
            Label_7797_Outer:
                while (true) {
                Label_6430_Outer:
                    while (true) {
                        Block_20_Outer:Label_6580_Outer:
                        while (true) {
                            Block_43_Outer:Label_7555_Outer:
                            while (true) {
                            Label_6737_Outer:
                                while (true) {
                                Label_6976_Outer:
                                    while (true) {
                                    Label_7283_Outer:
                                        while (true) {
                                        Label_6657_Outer:
                                            while (true) {
                                            Label_6677_Outer:
                                                while (true) {
                                                Label_7944_Outer:
                                                    while (true) {
                                                        Label_5788_Outer:Label_7748_Outer:
                                                        while (true) {
                                                        Label_6753_Outer:
                                                            while (true) {
                                                            Label_7425_Outer:
                                                                while (true) {
                                                                Label_6475_Outer:
                                                                    while (true) {
                                                                    Label_8063_Outer:
                                                                        while (true) {
                                                                        Label_7050_Outer:
                                                                            while (true) {
                                                                            Label_7895_Outer:
                                                                                while (true) {
                                                                                Label_6730_Outer:
                                                                                    while (true) {
                                                                                    Label_6631_Outer:
                                                                                        while (true) {
                                                                                        Label_6521_Outer:
                                                                                            while (true) {
                                                                                            Label_6902_Outer:
                                                                                                while (true) {
                                                                                                Label_7230_Outer:
                                                                                                    while (true) {
                                                                                                    Label_6827_Outer:
                                                                                                        while (true) {
                                                                                                        Label_8005_Outer:
                                                                                                            while (true) {
                                                                                                            Label_7846_Outer:
                                                                                                                while (true) {
                                                                                                                Label_6415_Outer:
                                                                                                                    while (true) {
                                                                                                                    Label_7354_Outer:
                                                                                                                        while (true) {
                                                                                                                        Label_7124_Outer:
                                                                                                                            while (true) {
                                                                                                                            Label_6445_Outer:
                                                                                                                                while (true) {
                                                                                                                                Label_7681_Outer:
                                                                                                                                    while (true) {
                                                                                                                                    Label_6712_Outer:
                                                                                                                                        while (true) {
                                                                                                                                        Label_7614_Outer:
                                                                                                                                            while (true) {
                                                                                                                                                Block_31_Outer:Label_7177_Outer:
                                                                                                                                                while (true) {
                                                                                                                                                    while (true) {
                                                                                                                                                        switch (b = Code.I[++ah]) {
                                                                                                                                                            case 2: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 3: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 4: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 5: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 6: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 7: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 8: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 9: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 10: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 11: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -55: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 12: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 13: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 14: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -68: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 15: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -67: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 16: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 17: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 18: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 19: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 49: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -109: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -121: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 50: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -108: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -106: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -51: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 51: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -107: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -52: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 52: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -111: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 53: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -110: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 54: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -56: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 55: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 56: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -96: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 58: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 59: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -92: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -91: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 57: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -95: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -94: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -93: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 60: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 62: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 61: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 20: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 21: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 22: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 23: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 24: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 25: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 26: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 27: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 28: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 29: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 30: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 31: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 32: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 33: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 34: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 35: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 36: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 37: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -105: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 38: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -104: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -57: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 39: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -103: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 40: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -102: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 41: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -61:
                                                                                                                                                            case -60:
                                                                                                                                                            case -59:
                                                                                                                                                            case -58: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -101: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 42: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -100: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 43: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -66: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -99: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 44: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -98: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 45: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 46: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 47: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -65:
                                                                                                                                                            case -64:
                                                                                                                                                            case -63: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -62: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 48: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 63: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 64: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 65: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 66: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 67: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 68: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 69: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 70: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 71: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 72: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 73: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 74: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 75: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 76: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 77: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 78: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 79: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 80: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 81: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 82: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 83: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 84: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 85: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 86: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 87: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 88: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 89: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 90: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 91: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 92: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 93: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -53: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 94: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -97: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 95: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 96: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 97: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 98: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 99: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 100: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 101: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 102: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 103: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 104: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 105: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 106: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 107: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 108: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 109: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 110: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 111: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -54: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 112: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 113: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 114: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 117: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 118: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 115: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 116: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 119: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -126: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -127: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 120: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 121: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 122: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 123: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 124: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 125: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 126: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case Byte.MAX_VALUE: {
                                                                                                                                                                break Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case 1:
                                                                                                                                                            case Byte.MIN_VALUE: {
                                                                                                                                                                Label_6397: {
                                                                                                                                                                    break Label_6397;
                                                                                                                                                                    n = 0;
                                                                                                                                                                    try {
                                                                                                                                                                        Code(n);
                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                        n2 = j() - j();
                                                                                                                                                                        I((n2 | -n2) >>> 31);
                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                        while (true) {
                                                                                                                                                                            Block_62: {
                                                                                                                                                                                while (true) {
                                                                                                                                                                                    Block_28: {
                                                                                                                                                                                    Label_5788:
                                                                                                                                                                                        while (true) {
                                                                                                                                                                                            Block_52: {
                                                                                                                                                                                                while (true) {
                                                                                                                                                                                                    Block_41: {
                                                                                                                                                                                                        while (true) {
                                                                                                                                                                                                            Block_19: {
                                                                                                                                                                                                                while (true) {
                                                                                                                                                                                                                    Label_5850: {
                                                                                                                                                                                                                        Label_4611: {
                                                                                                                                                                                                                            Block_32: {
                                                                                                                                                                                                                                while (true) {
                                                                                                                                                                                                                                    Label_1233: {
                                                                                                                                                                                                                                        Block_60: {
                                                                                                                                                                                                                                        Block_7_Outer:
                                                                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                                                                ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                I((Code.I[ah + 1] << 8) + (Code.I[ah + 2] & 0xFF));
                                                                                                                                                                                                                                                ah += 2;
                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                Block_55: {
                                                                                                                                                                                                                                                    Block_39: {
                                                                                                                                                                                                                                                        Label_2163: {
                                                                                                                                                                                                                                                            Block_24: {
                                                                                                                                                                                                                                                            Label_5568_Outer:
                                                                                                                                                                                                                                                                while (true) {
                                                                                                                                                                                                                                                                    Code(l);
                                                                                                                                                                                                                                                                    break Label_2163;
                                                                                                                                                                                                                                                                    I(3);
                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                    ah = I(Code.A, ah + (Code.I[++ah] << 8) + (Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                    Block_6: {
                                                                                                                                                                                                                                                                        while (true) {
                                                                                                                                                                                                                                                                        Label_5728:
                                                                                                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                                                                                                Block_49: {
                                                                                                                                                                                                                                                                                    while (true) {
                                                                                                                                                                                                                                                                                        Block_57: {
                                                                                                                                                                                                                                                                                            Block_30: {
                                                                                                                                                                                                                                                                                                Block_37: {
                                                                                                                                                                                                                                                                                                Label_5495:
                                                                                                                                                                                                                                                                                                    while (true) {
                                                                                                                                                                                                                                                                                                        Block_48: {
                                                                                                                                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                                                                                                                                while (true) {
                                                                                                                                                                                                                                                                                                                    Block_64: {
                                                                                                                                                                                                                                                                                                                        Block_15: {
                                                                                                                                                                                                                                                                                                                        Block_56_Outer:
                                                                                                                                                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                                                                                                                                                ah += b2;
                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                I(Code.B[Code.z + 2]);
                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                Label_5526: {
                                                                                                                                                                                                                                                                                                                                    while (true) {
                                                                                                                                                                                                                                                                                                                                        while (true) {
                                                                                                                                                                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                                                                                                                                                                Label_5663: {
                                                                                                                                                                                                                                                                                                                                                    Block_40: {
                                                                                                                                                                                                                                                                                                                                                        Label_5560: {
                                                                                                                                                                                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                                                                                                                                                                                Block_34: {
                                                                                                                                                                                                                                                                                                                                                                    while (true) {
                                                                                                                                                                                                                                                                                                                                                                        Label_4545: {
                                                                                                                                                                                                                                                                                                                                                                            Label_5697: {
                                                                                                                                                                                                                                                                                                                                                                            Block_50:
                                                                                                                                                                                                                                                                                                                                                                                while (true) {
                                                                                                                                                                                                                                                                                                                                                                                    while (true) {
                                                                                                                                                                                                                                                                                                                                                                                        n3 = n4 + 1;
                                                                                                                                                                                                                                                                                                                                                                                        break Label_5850;
                                                                                                                                                                                                                                                                                                                                                                                        m(h = h());
                                                                                                                                                                                                                                                                                                                                                                                        ah = I(h, ah + (Code.I[++ah] << 16) + ((Code.I[++ah] & 0xFF) << 8) + (Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        a(h() + (Code.I[++ah] & 0xFF), h());
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        ah = k();
                                                                                                                                                                                                                                                                                                                                                                                        I(0);
                                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_0035:)(ah >= 0);
                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                        n5 = ((long)Code.B[Code.E - 1] << 32 | ((long)Code.B[Code.E - 2] & 0xFFFFFFFFL)) + 1L;
                                                                                                                                                                                                                                                                                                                                                                                        Code.B[Code.E - 1] = (int)(n5 >> 32);
                                                                                                                                                                                                                                                                                                                                                                                        Code.B[Code.E - 2] = (int)n5;
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        Code(Code.d[(Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)]);
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        ++ah;
                                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_0035:)(j() > j());
                                                                                                                                                                                                                                                                                                                                                                                        break Block_28;
                                                                                                                                                                                                                                                                                                                                                                                        ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        while (true) {
                                                                                                                                                                                                                                                                                                                                                                                            Block_46: {
                                                                                                                                                                                                                                                                                                                                                                                                Block_26: {
                                                                                                                                                                                                                                                                                                                                                                                                    Block_27: {
                                                                                                                                                                                                                                                                                                                                                                                                        while (true) {
                                                                                                                                                                                                                                                                                                                                                                                                        Block_59_Outer:
                                                                                                                                                                                                                                                                                                                                                                                                            while (true) {
                                                                                                                                                                                                                                                                                                                                                                                                                ah += Code.I[ah];
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                ah = I(-((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)) - 1, ah);
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                ++ah;
                                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_0035:)(h() != h());
                                                                                                                                                                                                                                                                                                                                                                                                                break Block_24;
                                                                                                                                                                                                                                                                                                                                                                                                                --Code.D;
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                n6 = Code.H + j();
                                                                                                                                                                                                                                                                                                                                                                                                                j = j();
                                                                                                                                                                                                                                                                                                                                                                                                                n7 = ((b3 = Code.I[n6++]) >> 3 & 0x1);
                                                                                                                                                                                                                                                                                                                                                                                                                n8 = (n9 = (b3 & 0x7)) + (-n7 + 2);
                                                                                                                                                                                                                                                                                                                                                                                                                n3 = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                n4 = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_5649:)(b3 >> 4 == 0);
                                                                                                                                                                                                                                                                                                                                                                                                                break Block_46;
                                                                                                                                                                                                                                                                                                                                                                                                            Label_5947_Outer:
                                                                                                                                                                                                                                                                                                                                                                                                                while (true) {
                                                                                                                                                                                                                                                                                                                                                                                                                    n3 = n4 + 1;
                                                                                                                                                                                                                                                                                                                                                                                                                    while (true) {
                                                                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_6009:)(n3 > b4);
                                                                                                                                                                                                                                                                                                                                                                                                                        break Block_57;
                                                                                                                                                                                                                                                                                                                                                                                                                        ah = I(Code.A, ah + (Code.I[++ah] << 16) + ((Code.I[++ah] & 0xFF) << 8) + (Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                        n10 = h() - h();
                                                                                                                                                                                                                                                                                                                                                                                                                        I((n10 | -n10) >>> 31 ^ 0x1);
                                                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                        I((int)((((long)j() << 32 | ((long)j() & 0xFFFFFFFFL)) > ((long)j() << 32 | ((long)j() & 0xFFFFFFFFL))) ? 1 : 0));
                                                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                        I(0);
                                                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                        b4 = n4 - 1;
                                                                                                                                                                                                                                                                                                                                                                                                                        continue Label_7797_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    n11 += 2 + (i << 1);
                                                                                                                                                                                                                                                                                                                                                                                                                    break Label_5560;
                                                                                                                                                                                                                                                                                                                                                                                                                    Label_6191: {
                                                                                                                                                                                                                                                                                                                                                                                                                        ah += 2;
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                    Code(Code.d[0]);
                                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                    iftrue(Label_0035:)(h() != 0 || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                    b5 = Code.B;
                                                                                                                                                                                                                                                                                                                                                                                                                    n12 = --Code.E - 1;
                                                                                                                                                                                                                                                                                                                                                                                                                    b5[n12] -= Code.B[Code.E];
                                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                    ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                    Code.V = k;
                                                                                                                                                                                                                                                                                                                                                                                                                    Code.T = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                    break Label_4611;
                                                                                                                                                                                                                                                                                                                                                                                                                    g = g();
                                                                                                                                                                                                                                                                                                                                                                                                                    ah = k();
                                                                                                                                                                                                                                                                                                                                                                                                                    Code(g);
                                                                                                                                                                                                                                                                                                                                                                                                                    iftrue(Label_0035:)(ah >= 0);
                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                    iftrue(Label_0035:)(!B() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                                                                    ah = ++ah + Code.I[ah];
                                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                    Label_5993:
                                                                                                                                                                                                                                                                                                                                                                                                                    iftrue(Label_6009:)(code >= j);
                                                                                                                                                                                                                                                                                                                                                                                                                    continue Label_5947_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_0035:)(j() == j() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                                Label_5254: {
                                                                                                                                                                                                                                                                                                                                                                                                                    ah += 2;
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                m(m = l(h() + (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                                                Code(m);
                                                                                                                                                                                                                                                                                                                                                                                                                ah = I(-(Code.I[++ah] & 0xFF) - 1, ah);
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                ++ah;
                                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_0035:)(j() == j());
                                                                                                                                                                                                                                                                                                                                                                                                                break Block_27;
                                                                                                                                                                                                                                                                                                                                                                                                                b6 = (Code.I[n6++] & 0xFF);
                                                                                                                                                                                                                                                                                                                                                                                                                break Label_5697;
                                                                                                                                                                                                                                                                                                                                                                                                                ++ah;
                                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_0035:)(j() != j());
                                                                                                                                                                                                                                                                                                                                                                                                                break Block_26;
                                                                                                                                                                                                                                                                                                                                                                                                                n11 += i + 1;
                                                                                                                                                                                                                                                                                                                                                                                                                break Label_5526;
                                                                                                                                                                                                                                                                                                                                                                                                                Label_6150:
                                                                                                                                                                                                                                                                                                                                                                                                                ah += 2;
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                h2 = h();
                                                                                                                                                                                                                                                                                                                                                                                                                ah = this.Code(h2, Z(h2, (int)Code.I[++ah], (Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)), ah);
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                c(Code(Code.L = h(), (Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                                                Code(Code.V);
                                                                                                                                                                                                                                                                                                                                                                                                                Code.V = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                Code.L = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                m(h3 = h());
                                                                                                                                                                                                                                                                                                                                                                                                                ah = I(h3, ah + Code.I[++ah], ah);
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                n13 = ((long)Code.B[Code.E - 1] << 32 | ((long)Code.B[Code.E - 2] & 0xFFFFFFFFL)) - 1L;
                                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 1] = (int)(n13 >> 32);
                                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 2] = (int)n13;
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                Label_4573:
                                                                                                                                                                                                                                                                                                                                                                                                                k = l(k);
                                                                                                                                                                                                                                                                                                                                                                                                                break Label_4545;
                                                                                                                                                                                                                                                                                                                                                                                                                Label_4583:
                                                                                                                                                                                                                                                                                                                                                                                                                Code.T = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                a((Code.V = b(2, Code.o)) + 1, j2);
                                                                                                                                                                                                                                                                                                                                                                                                                b(Code.Y, j2);
                                                                                                                                                                                                                                                                                                                                                                                                                break Label_4611;
                                                                                                                                                                                                                                                                                                                                                                                                                Label_5649:
                                                                                                                                                                                                                                                                                                                                                                                                                b4 = (Code.I[n6++] & 0xFF);
                                                                                                                                                                                                                                                                                                                                                                                                                break Label_5663;
                                                                                                                                                                                                                                                                                                                                                                                                                b7 = Code.B;
                                                                                                                                                                                                                                                                                                                                                                                                                n14 = Code.E - 1;
                                                                                                                                                                                                                                                                                                                                                                                                                b7[n14] ^= -1;
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                                ++ah;
                                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_0035:)(B());
                                                                                                                                                                                                                                                                                                                                                                                                                break Block_15;
                                                                                                                                                                                                                                                                                                                                                                                                                ++ah;
                                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_0035:)(!B());
                                                                                                                                                                                                                                                                                                                                                                                                                continue Block_59_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 1] = (I(h(), Code.B[Code.E - 1]) ? 1 : 0);
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            Code(Code.d[Code.I[++ah] & 0xFF]);
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            n15 = ((long)Code.B[Code.E - 3] << 32 | ((long)Code.B[Code.E - 4] & 0xFFFFFFFFL)) / ((long)j() << 32 | ((long)j() & 0xFFFFFFFFL));
                                                                                                                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 1] = (int)(n15 >> 32);
                                                                                                                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 2] = (int)n15;
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            iftrue(Label_6150:)(h() != 0);
                                                                                                                                                                                                                                                                                                                                                                                                            break Block_64;
                                                                                                                                                                                                                                                                                                                                                                                                            i = j();
                                                                                                                                                                                                                                                                                                                                                                                                            iftrue(Label_5539:)((b8 & 0x1) == 0x0);
                                                                                                                                                                                                                                                                                                                                                                                                            break Block_41;
                                                                                                                                                                                                                                                                                                                                                                                                            Label_6009: {
                                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_6024:)(n3 <= b4);
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            break Block_60;
                                                                                                                                                                                                                                                                                                                                                                                                            iftrue(Label_0035:)(j() >= j() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                            ah += Code.I[ah];
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            Label_5078:
                                                                                                                                                                                                                                                                                                                                                                                                            ah += 2;
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            b9 = Code.B;
                                                                                                                                                                                                                                                                                                                                                                                                            n16 = Code.E - 1;
                                                                                                                                                                                                                                                                                                                                                                                                            ++b9[n16];
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            n17 = ((long)Code.B[Code.E - 2] << 32 | ((long)Code.B[Code.E - 3] & 0xFFFFFFFFL)) << Code.B[--Code.E];
                                                                                                                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 1] = (int)(n17 >> 32);
                                                                                                                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 2] = (int)n17;
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            ++ah;
                                                                                                                                                                                                                                                                                                                                                                                                            iftrue(Label_0035:)(h() != 0);
                                                                                                                                                                                                                                                                                                                                                                                                            break Block_62;
                                                                                                                                                                                                                                                                                                                                                                                                            ah = this.Z(ah, (Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            Code(g());
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            Code(Code.A);
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            Code.ag = h();
                                                                                                                                                                                                                                                                                                                                                                                                            Code.ah = ah;
                                                                                                                                                                                                                                                                                                                                                                                                            m(Code.ag);
                                                                                                                                                                                                                                                                                                                                                                                                            throw Code.Code;
                                                                                                                                                                                                                                                                                                                                                                                                            c(Code(Code.L = h(), Code.I[++ah] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                            Code(Code.V);
                                                                                                                                                                                                                                                                                                                                                                                                            Code.V = 0;
                                                                                                                                                                                                                                                                                                                                                                                                            Code.L = 0;
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            I(++ah + 1);
                                                                                                                                                                                                                                                                                                                                                                                                            ah += (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                            iftrue(Label_5254:)(j() > j());
                                                                                                                                                                                                                                                                                                                                                                                                            continue Label_7555_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        I(Code.B[Code.z]);
                                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                        I(Code.B[Code.z + 1]);
                                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                        b10 = Code.B;
                                                                                                                                                                                                                                                                                                                                                                                                        n18 = --Code.E - 1;
                                                                                                                                                                                                                                                                                                                                                                                                        b10[n18] |= Code.B[Code.E];
                                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    ah += Code.I[ah];
                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                    Code.J[Code.D - 1] = l(Code.J[Code.D - 1] + ((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                    I(l(Code.A + (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                    ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                    c(ah + (Code.I[++ah] << 16 | (Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                                    Code(Code.V);
                                                                                                                                                                                                                                                                                                                                                                                                    Code.V = 0;
                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                    a(h() + ((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)), h());
                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                    iftrue(Label_5122:)(h() == h());
                                                                                                                                                                                                                                                                                                                                                                                                    break Block_56_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                    Code(Code.J[Code.D - 1]);
                                                                                                                                                                                                                                                                                                                                                                                                    Code.J[Code.D - 2] = Code.J[Code.D - 3];
                                                                                                                                                                                                                                                                                                                                                                                                    Code.J[Code.D - 3] = Code.J[Code.D - 1];
                                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                ah += Code.I[ah];
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                I(l(h() + (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_5166:)(j() != j());
                                                                                                                                                                                                                                                                                                                                                                                                break Block_34;
                                                                                                                                                                                                                                                                                                                                                                                                I(l(h() + ((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF))));
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                m(Code.L = h());
                                                                                                                                                                                                                                                                                                                                                                                                c(-((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)) - 1);
                                                                                                                                                                                                                                                                                                                                                                                                Code(Code.V);
                                                                                                                                                                                                                                                                                                                                                                                                Code.V = 0;
                                                                                                                                                                                                                                                                                                                                                                                                Code.L = 0;
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                n19 = ~((long)Code.B[Code.E - 1] << 32 | ((long)Code.B[Code.E - 2] & 0xFFFFFFFFL));
                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 1] = (int)(n19 >> 32);
                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 2] = (int)n19;
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                Label_5122: {
                                                                                                                                                                                                                                                                                                                                                                                                    ah += 2;
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                n3 = n4 + 1;
                                                                                                                                                                                                                                                                                                                                                                                                break Label_5788;
                                                                                                                                                                                                                                                                                                                                                                                                I(Code.B[Code.E - 1]);
                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 2] = Code.B[Code.E - 3];
                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 3] = Code.B[Code.E - 1];
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                I((int)((((long)j() << 32 | ((long)j() & 0xFFFFFFFFL)) >= ((long)j() << 32 | ((long)j() & 0xFFFFFFFFL))) ? 1 : 0));
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                c(ah + (Code.I[++ah] << 8 | (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                                Code(Code.V);
                                                                                                                                                                                                                                                                                                                                                                                                Code.V = 0;
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_0035:)(B() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                                                                                                                                                                n20 = ((long)j() << 32 | ((long)j() & 0xFFFFFFFFL)) + ((long)Code.B[Code.E - 1] << 32 | ((long)Code.B[Code.E - 2] & 0xFFFFFFFFL));
                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 1] = (int)(n20 >> 32);
                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 2] = (int)n20;
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                n21 = ((long)Code.B[Code.E - 2] << 32 | ((long)Code.B[Code.E - 3] & 0xFFFFFFFFL)) >>> Code.B[--Code.E];
                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 1] = (int)(n21 >> 32);
                                                                                                                                                                                                                                                                                                                                                                                                Code.B[Code.E - 2] = (int)n21;
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                c(Z(Code.L = h(), (int)Code.I[++ah], Code.I[++ah] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                Code(Code.V);
                                                                                                                                                                                                                                                                                                                                                                                                Code.V = 0;
                                                                                                                                                                                                                                                                                                                                                                                                Code.L = 0;
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                I(2);
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                Label_5685:
                                                                                                                                                                                                                                                                                                                                                                                                b6 = B(Code.I, n6);
                                                                                                                                                                                                                                                                                                                                                                                                n6 += 2;
                                                                                                                                                                                                                                                                                                                                                                                                break Label_5697;
                                                                                                                                                                                                                                                                                                                                                                                                b11 = Code.B;
                                                                                                                                                                                                                                                                                                                                                                                                n22 = --Code.E - 1;
                                                                                                                                                                                                                                                                                                                                                                                                b11[n22] >>= Code.B[Code.E];
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                l2 = l(Code.A + (Code.I[++ah] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                                                ah = this.Code(l2, Code(l2, Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                I((int)((j() <= j()) ? 1 : 0));
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                I(Code.B[Code.E - 2]);
                                                                                                                                                                                                                                                                                                                                                                                                I(Code.B[Code.E - 2]);
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                Code(Code.d[Code.aq + ((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF))]);
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                I((Code.B[Code.E - 1] < 0) ? -1 : 0);
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                n23 = h() - h();
                                                                                                                                                                                                                                                                                                                                                                                                I((n23 | -n23) >>> 31);
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                Label_4422:
                                                                                                                                                                                                                                                                                                                                                                                                ah += 2;
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                                b12 = Code.B;
                                                                                                                                                                                                                                                                                                                                                                                                n24 = --Code.E - 1;
                                                                                                                                                                                                                                                                                                                                                                                                b12[n24] /= Code.B[Code.E];
                                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            b4 = B(Code.I, n6);
                                                                                                                                                                                                                                                                                                                                                                                            n6 += 2;
                                                                                                                                                                                                                                                                                                                                                                                            break Label_5663;
                                                                                                                                                                                                                                                                                                                                                                                            n25 = ((long)Code.B[Code.E - 3] << 32 | ((long)Code.B[Code.E - 4] & 0xFFFFFFFFL)) % ((long)j() << 32 | ((long)j() & 0xFFFFFFFFL));
                                                                                                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 1] = (int)(n25 >> 32);
                                                                                                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 2] = (int)n25;
                                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                            i2 = i();
                                                                                                                                                                                                                                                                                                                                                                                            ah = k();
                                                                                                                                                                                                                                                                                                                                                                                            I(i2);
                                                                                                                                                                                                                                                                                                                                                                                            iftrue(Label_0035:)(ah >= 0);
                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                            iftrue(Label_4422:)(B());
                                                                                                                                                                                                                                                                                                                                                                                            continue Label_7944_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        I((int)((((long)j() << 32 | ((long)j() & 0xFFFFFFFFL)) < ((long)j() << 32 | ((long)j() & 0xFFFFFFFFL))) ? 1 : 0));
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        ++ah;
                                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_0035:)(h() == h());
                                                                                                                                                                                                                                                                                                                                                                                        break Block_7_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        ah += Code.I[ah];
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        I(k((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_5078:)(h() != h());
                                                                                                                                                                                                                                                                                                                                                                                        break Block_32;
                                                                                                                                                                                                                                                                                                                                                                                        ah = j();
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        Code.J[Code.y + 2] = h();
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        Label_5772: {
                                                                                                                                                                                                                                                                                                                                                                                            iftrue(Label_6009:)(b13 >= j);
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        break Block_50;
                                                                                                                                                                                                                                                                                                                                                                                        b14 = Code.B;
                                                                                                                                                                                                                                                                                                                                                                                        n26 = --Code.E - 1;
                                                                                                                                                                                                                                                                                                                                                                                        b14[n26] %= Code.B[Code.E];
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        b15 = Code.B;
                                                                                                                                                                                                                                                                                                                                                                                        n27 = Code.E - 1;
                                                                                                                                                                                                                                                                                                                                                                                        h4 = h();
                                                                                                                                                                                                                                                                                                                                                                                        n28 = Code.B[Code.E - 1];
                                                                                                                                                                                                                                                                                                                                                                                        n29 = h4;
                                                                                                                                                                                                                                                                                                                                                                                        b15[n27] = ((h4 != 0 && l(n29 - 1) == n28) ? 1 : 0);
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        ah = k();
                                                                                                                                                                                                                                                                                                                                                                                        Code(0);
                                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_0035:)(ah >= 0);
                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                        h5 = h();
                                                                                                                                                                                                                                                                                                                                                                                        h6 = h();
                                                                                                                                                                                                                                                                                                                                                                                        Code(h5);
                                                                                                                                                                                                                                                                                                                                                                                        Code(h6);
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        m(h7 = h());
                                                                                                                                                                                                                                                                                                                                                                                        ah = I(h7, Code.c[Code.I[++ah] & 0xFF], ah);
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        j2 = j();
                                                                                                                                                                                                                                                                                                                                                                                        Code.T = l(Code.Y);
                                                                                                                                                                                                                                                                                                                                                                                        k = Code(Code.T)[(Code.T & 0x7FFF) + (j2 & c(Code.Y, 1) - 1)];
                                                                                                                                                                                                                                                                                                                                                                                        break Label_4545;
                                                                                                                                                                                                                                                                                                                                                                                        Code.J[Code.y + Code.I[++ah]] = h();
                                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                        Label_5931:
                                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_6009:)(n30 >= j);
                                                                                                                                                                                                                                                                                                                                                                                        continue Label_6644_Outer;
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    a(Code.A + (Code.I[++ah] & 0xFF), j());
                                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                    Label_5539: {
                                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_5560:)(i < 0 || i > b16);
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    continue Label_6430_Outer;
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                n3 = n4 + 1;
                                                                                                                                                                                                                                                                                                                                                                                break Label_5728;
                                                                                                                                                                                                                                                                                                                                                                                m(Code.L = h());
                                                                                                                                                                                                                                                                                                                                                                                c(ah + (Code.I[++ah] << 8 | (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                                Code(Code.V);
                                                                                                                                                                                                                                                                                                                                                                                Code.V = 0;
                                                                                                                                                                                                                                                                                                                                                                                Code.L = 0;
                                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                                n11 = Code.H + j();
                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_5481:)(((b8 = Code.I[n11++]) & 0x2) == 0x0);
                                                                                                                                                                                                                                                                                                                                                                                break Block_40;
                                                                                                                                                                                                                                                                                                                                                                                n4 = (n3 + b4) / 2;
                                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_5834:)((j3 = J(Code.I, n6 + n4 * n8)) <= j);
                                                                                                                                                                                                                                                                                                                                                                                break Block_52;
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            switch([Lcom.strobel.decompiler.ast.Label;@51ce60f3)(n9);
                                                                                                                                                                                                                                                                                                                                                                            a(h() + (Code.I[++ah] & 0xFF), j());
                                                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_4583:)(k == 0);
                                                                                                                                                                                                                                                                                                                                                                        break Block_19;
                                                                                                                                                                                                                                                                                                                                                                        Label_5342: {
                                                                                                                                                                                                                                                                                                                                                                            ah += 2;
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_4463:)(!B());
                                                                                                                                                                                                                                                                                                                                                                        continue Label_7797_Outer;
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    iftrue(Label_5298:)(j() >= j());
                                                                                                                                                                                                                                                                                                                                                                    break Block_37;
                                                                                                                                                                                                                                                                                                                                                                    m(l3 = l(Code.A + (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                                                                                                                                    ah = I(l3, ah + (Code.I[++ah] << 8) + (Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                    iftrue(Label_0035:)(h() == h() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                                ++ah;
                                                                                                                                                                                                                                                                                                                                                                iftrue(Label_0035:)(h() == 0);
                                                                                                                                                                                                                                                                                                                                                                continue Label_6730_Outer;
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        b2 = B(Code.I, n11);
                                                                                                                                                                                                                                                                                                                                                        continue Block_56_Outer;
                                                                                                                                                                                                                                                                                                                                                        iftrue(Label_2173:)((l4 = l((h8 = h()) + 2)) >= 0);
                                                                                                                                                                                                                                                                                                                                                        break Block_6;
                                                                                                                                                                                                                                                                                                                                                        Label_5210: {
                                                                                                                                                                                                                                                                                                                                                            ah += 2;
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    b16 = B(Code.I, n11);
                                                                                                                                                                                                                                                                                                                                                    n11 += 2;
                                                                                                                                                                                                                                                                                                                                                    continue Label_5495;
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                iftrue(Label_5685:)(n7 == 0);
                                                                                                                                                                                                                                                                                                                                                continue Block_43_Outer;
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            Code(Code.J[Code.y]);
                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                            c(-((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)) - 1);
                                                                                                                                                                                                                                                                                                                                            Code(Code.V);
                                                                                                                                                                                                                                                                                                                                            Code.V = 0;
                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                            Code(l(Code.A + (b + 65)));
                                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                            Label_5834: {
                                                                                                                                                                                                                                                                                                                                                iftrue(Label_6009:)(j3 >= j);
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            continue Label_5788_Outer;
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        n31 = Code.I[++ah] >> 4;
                                                                                                                                                                                                                                                                                                                                        n32 = (Code.I[ah] & 0xF) + 2;
                                                                                                                                                                                                                                                                                                                                        break Label_1233;
                                                                                                                                                                                                                                                                                                                                        h9 = h();
                                                                                                                                                                                                                                                                                                                                        ah = this.Code(h9, Code(h9, Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                        n33 = ((long)j() << 32 | ((long)j() & 0xFFFFFFFFL)) * ((long)Code.B[Code.E - 1] << 32 | ((long)Code.B[Code.E - 2] & 0xFFFFFFFFL));
                                                                                                                                                                                                                                                                                                                                        Code.B[Code.E - 1] = (int)(n33 >> 32);
                                                                                                                                                                                                                                                                                                                                        Code.B[Code.E - 2] = (int)n33;
                                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                        iftrue(Label_6009:)(n3 > b4);
                                                                                                                                                                                                                                                                                                                                        continue Label_6521_Outer;
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    C(Code.I[++ah] & 0xFF, j());
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    b17 = Code.B;
                                                                                                                                                                                                                                                                                                                                    n34 = Code.E - 3;
                                                                                                                                                                                                                                                                                                                                    b17[n34] ^= Code.B[Code.E - 1];
                                                                                                                                                                                                                                                                                                                                    b18 = Code.B;
                                                                                                                                                                                                                                                                                                                                    n35 = Code.E - 4;
                                                                                                                                                                                                                                                                                                                                    b18[n35] ^= Code.B[Code.E - 2];
                                                                                                                                                                                                                                                                                                                                    Code.E -= 2;
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    n36 = -((long)j() << 32 | ((long)j() & 0xFFFFFFFFL)) + ((long)Code.B[Code.E - 1] << 32 | ((long)Code.B[Code.E - 2] & 0xFFFFFFFFL));
                                                                                                                                                                                                                                                                                                                                    Code.B[Code.E - 1] = (int)(n36 >> 32);
                                                                                                                                                                                                                                                                                                                                    Code.B[Code.E - 2] = (int)n36;
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    ah += (Code.I[n6 + n4 * n8 + n9] & 0xFF);
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    ah = this.Z(ah, (int)Code.Code[Code.I[++ah] & 0xFF]);
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    Code.J[Code.D - 1] = l(Code.J[Code.D - 1]);
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    I(l(h() + (b + 61)));
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    n37 = -((long)Code.B[Code.E - 1] << 32 | ((long)Code.B[Code.E - 2] & 0xFFFFFFFFL));
                                                                                                                                                                                                                                                                                                                                    Code.B[Code.E - 1] = (int)(n37 >> 32);
                                                                                                                                                                                                                                                                                                                                    Code.B[Code.E - 2] = (int)n37;
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    I((int)((((long)j() << 32 | ((long)j() & 0xFFFFFFFFL)) <= ((long)j() << 32 | ((long)j() & 0xFFFFFFFFL))) ? 1 : 0));
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    iftrue(Label_0035:)(j() > j() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                                                    h10 = h();
                                                                                                                                                                                                                                                                                                                                    ah = this.Code(h10, Code(h10, ((Code.I[++ah] & 0xFF) << 8) + (Code.I[++ah] & 0xFF)), ah);
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    I((Code.I[++ah] & 0xFF) + 6);
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                    n38 = Code.B[Code.E - 1];
                                                                                                                                                                                                                                                                                                                                    Code.B[Code.E - 1] = Code.B[Code.E - 2];
                                                                                                                                                                                                                                                                                                                                    Code.B[Code.E - 2] = n38;
                                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                b2 = (Code.I[n11] & 0xFF);
                                                                                                                                                                                                                                                                                                                                continue Block_56_Outer;
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                            Code.d[(Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)] = h();
                                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        ah += Code.I[ah];
                                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                        iftrue(Label_6009:)(n3 > b4);
                                                                                                                                                                                                                                                                                                                        break Block_48;
                                                                                                                                                                                                                                                                                                                        iftrue(Label_0035:)(h() == 0 || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                    Label_6024: {
                                                                                                                                                                                                                                                                                                                        iftrue(Label_6053:)(n7 == 0);
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    continue Label_8005_Outer;
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                n39 = j() - j();
                                                                                                                                                                                                                                                                                                                I((n39 | -n39) >>> 31 ^ 0x1);
                                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                                iftrue(Label_5210:)(j() == j());
                                                                                                                                                                                                                                                                                                                continue Block_20_Outer;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            b19 = Code.B;
                                                                                                                                                                                                                                                                                                            n40 = --Code.E - 1;
                                                                                                                                                                                                                                                                                                            b19[n40] ^= Code.B[Code.E];
                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                            ++ah;
                                                                                                                                                                                                                                                                                                            iftrue(Label_0035:)(j() < j());
                                                                                                                                                                                                                                                                                                            break Block_30;
                                                                                                                                                                                                                                                                                                            b20 = Code.B;
                                                                                                                                                                                                                                                                                                            n41 = --Code.E - 1;
                                                                                                                                                                                                                                                                                                            b20[n41] *= Code.B[Code.E];
                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                            Label_5298: {
                                                                                                                                                                                                                                                                                                                ah += 2;
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                            a(Code.A, h());
                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                            b21 = Code.B;
                                                                                                                                                                                                                                                                                                            n42 = Code.E - 1;
                                                                                                                                                                                                                                                                                                            b21[n42] = -b21[n42];
                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                            n43 = ((long)Code.B[Code.E - 2] << 32 | ((long)Code.B[Code.E - 3] & 0xFFFFFFFFL)) >> Code.B[--Code.E];
                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 1] = (int)(n43 >> 32);
                                                                                                                                                                                                                                                                                                            Code.B[Code.E - 2] = (int)n43;
                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                            Label_2173:
                                                                                                                                                                                                                                                                                                            ah = I(l(h8 + 1), l4, ah);
                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                            I(4);
                                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        n4 = (n3 + b4) / 2;
                                                                                                                                                                                                                                                                                                        iftrue(Label_5772:)((b13 = Code.I[n6 + n4 * n8]) <= j);
                                                                                                                                                                                                                                                                                                        break Block_49;
                                                                                                                                                                                                                                                                                                        Code(Code.J[Code.D - 2]);
                                                                                                                                                                                                                                                                                                        Code(Code.J[Code.D - 2]);
                                                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                        Label_5481: {
                                                                                                                                                                                                                                                                                                            b16 = (Code.I[n11++] & 0xFF);
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        continue Label_5495;
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    Code.B[Code.z + 2] = j();
                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                    b22 = Code.B;
                                                                                                                                                                                                                                                                                                    n44 = Code.E - 3;
                                                                                                                                                                                                                                                                                                    b22[n44] &= Code.B[Code.E - 1];
                                                                                                                                                                                                                                                                                                    b23 = Code.B;
                                                                                                                                                                                                                                                                                                    n45 = Code.E - 4;
                                                                                                                                                                                                                                                                                                    b23[n45] &= Code.B[Code.E - 2];
                                                                                                                                                                                                                                                                                                    Code.E -= 2;
                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                    b24 = Code.B;
                                                                                                                                                                                                                                                                                                    n46 = --Code.E - 1;
                                                                                                                                                                                                                                                                                                    b24[n46] <<= Code.B[Code.E];
                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                    iftrue(Label_0035:)(j() != j() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                                                                    return;
                                                                                                                                                                                                                                                                                                    m(h11 = h());
                                                                                                                                                                                                                                                                                                    ah = I(h11, ah + (Code.I[++ah] << 8) + (Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                    a = Code.A;
                                                                                                                                                                                                                                                                                                    ah = this.Code(a, Code(a, Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                Code(Code.J[Code.D - 1]);
                                                                                                                                                                                                                                                                                                Code.J[Code.D - 2] = Code.J[Code.D - 3];
                                                                                                                                                                                                                                                                                                Code.J[Code.D - 3] = Code.J[Code.D - 4];
                                                                                                                                                                                                                                                                                                Code.J[Code.D - 4] = Code.J[Code.D - 1];
                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                                I(1);
                                                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            ah += Code.I[ah];
                                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        n4 = (n3 + b4) / 2;
                                                                                                                                                                                                                                                                                        iftrue(Label_5993:)((code = Code(Code.I, n6 + n4 * n8)) <= j);
                                                                                                                                                                                                                                                                                        continue Label_6430_Outer;
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    Code(Code.J[Code.y + 1]);
                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                    Code.B[Code.E - 4] = ((Code.B[Code.E - 1] != Code.B[Code.E - 3] || Code.B[Code.E - 2] != Code.B[Code.E - 4]) ? 1 : 0);
                                                                                                                                                                                                                                                                                    Code.E -= 3;
                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                    ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                b4 = n4 - 1;
                                                                                                                                                                                                                                                                                continue Label_5728;
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            iftrue(Label_5386:)(j() <= j());
                                                                                                                                                                                                                                                                            break Block_39;
                                                                                                                                                                                                                                                                            I(++Code.B[Code.z]);
                                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                                            ++ah;
                                                                                                                                                                                                                                                                            iftrue(Label_0035:)(j() >= j());
                                                                                                                                                                                                                                                                            continue Label_7283_Outer;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        h12 = h();
                                                                                                                                                                                                                                                                        ah = this.Code(h12, Z(h12, (int)Code.I[++ah], Code.I[++ah] & 0xFF), ah);
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        Code.d[Code.I[++ah] & 0xFF] = h();
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        I(5);
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        iftrue(Label_0035:)((ah = k()) >= 0);
                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                        Code(Code.J[Code.y + Code.I[++ah]]);
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        Label_5386: {
                                                                                                                                                                                                                                                                            ah += 2;
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        I(i());
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        Label_4463:
                                                                                                                                                                                                                                                                        ah += 2;
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        I(++ah);
                                                                                                                                                                                                                                                                        ah += Code.I[ah];
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                        b25 = Code.B;
                                                                                                                                                                                                                                                                        n47 = Code.E - 1;
                                                                                                                                                                                                                                                                        --b25[n47];
                                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    iftrue(Label_2163:)((l = l(h8 + 1)) == 0);
                                                                                                                                                                                                                                                                    continue Label_5568_Outer;
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                I(((h13 = h()) != 0) ? l(h13 + 1) : 0);
                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                ah = I(Code.A, Code.c[Code.I[++ah] & 0xFF], ah);
                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                                b26 = Code.B;
                                                                                                                                                                                                                                                                n48 = --Code.E - 1;
                                                                                                                                                                                                                                                                b26[n48] += Code.B[Code.E];
                                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            ah += Code.I[ah];
                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                            I((int)((j() >= j()) ? 1 : 0));
                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                            Code.B[Code.z] = j();
                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                            --Code.E;
                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                            I((int)((j() < j()) ? 1 : 0));
                                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                                            n4 = (n3 + b4) / 2;
                                                                                                                                                                                                                                                            i3 = Code.I;
                                                                                                                                                                                                                                                            n49 = n6 + n4 * n8;
                                                                                                                                                                                                                                                            array = i3;
                                                                                                                                                                                                                                                            iftrue(Label_5931:)((n30 = (i3[n49] << 16) + ((array[n49 + 1] & 0xFF) << 8) + (array[n49 + 2] & 0xFF)) <= j);
                                                                                                                                                                                                                                                            break Block_55;
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        ah = I(l4, ah);
                                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                    m(Code.L = h());
                                                                                                                                                                                                                                                    c(ah + (Code.I[++ah] << 16 | (Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                                                    Code(Code.V);
                                                                                                                                                                                                                                                    Code.V = 0;
                                                                                                                                                                                                                                                    Code.L = 0;
                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                    Code.B[Code.E - 4] = ((Code.B[Code.E - 1] == Code.B[Code.E - 3] && Code.B[Code.E - 2] == Code.B[Code.E - 4]) ? 1 : 0);
                                                                                                                                                                                                                                                    Code.E -= 3;
                                                                                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                                                                                    I(n31);
                                                                                                                                                                                                                                                    break Label_1233;
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                b4 = n4 - 1;
                                                                                                                                                                                                                                                break Label_5850;
                                                                                                                                                                                                                                                iftrue(Label_0035:)(h() != h() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                a(Code.A + (Code.I[++ah] & 0xFF), h());
                                                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                                                iftrue(Label_0035:)(j() < j() || (ah = k()) >= 0);
                                                                                                                                                                                                                                                return;
                                                                                                                                                                                                                                                iftrue(Label_5342:)(j() < j());
                                                                                                                                                                                                                                                continue Block_7_Outer;
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            ah += Code.I[ah];
                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                            a(h() + ((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)), j());
                                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        ah += b6;
                                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    iftrue(Label_0035:)(n32-- <= 0);
                                                                                                                                                                                                                                    continue Block_31_Outer;
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            ah = ++ah + (Code.I[ah] << 8 | (Code.I[ah + 1] & 0xFF));
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            Label_5166: {
                                                                                                                                                                                                                                ah += 2;
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            I(-1);
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            Code.J[Code.y + 1] = h();
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            Code(l(Code.A + (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            b27 = Code.B;
                                                                                                                                                                                                                            n50 = --Code.E - 1;
                                                                                                                                                                                                                            b27[n50] &= Code.B[Code.E];
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            I((int)((j() > j()) ? 1 : 0));
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            b28 = Code.B;
                                                                                                                                                                                                                            n51 = --Code.E - 1;
                                                                                                                                                                                                                            b28[n51] >>>= Code.B[Code.E];
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            Code.J[Code.y] = h();
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            ah = I(-(Code.I[++ah] & 0xFF) - 1, ah);
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                            I(Code(Code.I, ah + 1));
                                                                                                                                                                                                                            ah += 4;
                                                                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        Code(Code.V);
                                                                                                                                                                                                                        Code.V = 0;
                                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    iftrue(Label_6009:)(n3 > b4);
                                                                                                                                                                                                                    continue Label_7614_Outer;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                ah = I(Code.A, ah + Code.I[++ah], ah);
                                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                                iftrue(Label_0035:)(j() <= j() || (ah = k()) >= 0);
                                                                                                                                                                                                                return;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            iftrue(Label_4573:)(l(k + 1) != j2);
                                                                                                                                                                                                            continue Label_6580_Outer;
                                                                                                                                                                                                        }
                                                                                                                                                                                                        Code(Code.d[Code.aq + (Code.I[++ah] & 0xFF)]);
                                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                                    }
                                                                                                                                                                                                    iftrue(Label_5526:)(i < 0 || i > b16);
                                                                                                                                                                                                    continue Label_7555_Outer;
                                                                                                                                                                                                }
                                                                                                                                                                                                Label_6053: {
                                                                                                                                                                                                    ah += B(Code.I, n6 + n4 * n8 + n9);
                                                                                                                                                                                                }
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                Code.B[Code.z + 1] = j();
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                Code.J[Code.D - 1] = l(Code.J[Code.D - 1] + (Code.I[++ah] & 0xFF));
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                b29 = Code.B;
                                                                                                                                                                                                n52 = Code.E - 1;
                                                                                                                                                                                                n53 = Code.B[Code.E - 1];
                                                                                                                                                                                                b29[n52] = (n53 | -n53) >>> 31;
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                c(Z(Code.L = h(), (int)Code.I[++ah], (Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF)));
                                                                                                                                                                                                Code(Code.V);
                                                                                                                                                                                                Code.V = 0;
                                                                                                                                                                                                Code.L = 0;
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                I(Code.B[Code.E - 2]);
                                                                                                                                                                                                I(Code.B[Code.E - 2]);
                                                                                                                                                                                                Code.B[Code.E - 3] = Code.B[Code.E - 5];
                                                                                                                                                                                                Code.B[Code.E - 5] = Code.B[Code.E - 2];
                                                                                                                                                                                                Code.B[Code.E - 4] = Code.B[Code.E - 1];
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                Code(Code.J[Code.y + 2]);
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                I(k(Code.I[++ah] & 0xFF));
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                                ah += Code.I[ah];
                                                                                                                                                                                                continue Block_38_Outer;
                                                                                                                                                                                            }
                                                                                                                                                                                            b4 = n4 - 1;
                                                                                                                                                                                            continue Label_5788;
                                                                                                                                                                                        }
                                                                                                                                                                                        b30 = Code.B;
                                                                                                                                                                                        n54 = Code.E - 1;
                                                                                                                                                                                        n55 = Code.B[Code.E - 1];
                                                                                                                                                                                        b30[n54] = ((n55 | -n55) >>> 31 ^ 0x1);
                                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                                    }
                                                                                                                                                                                    ah += Code.I[ah];
                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                    Code.B[Code.z + Code.I[++ah]] = j();
                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                    I(Code.B[Code.z + Code.I[++ah]]);
                                                                                                                                                                                    continue Block_38_Outer;
                                                                                                                                                                                    iftrue(Label_6191:)(h() == 0);
                                                                                                                                                                                    continue Label_6712_Outer;
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                            ah += Code.I[ah];
                                                                                                                                                                            continue Block_38_Outer;
                                                                                                                                                                            ++ah;
                                                                                                                                                                            iftrue(Label_0035:)(j() <= j());
                                                                                                                                                                            continue Label_7177_Outer;
                                                                                                                                                                        }
                                                                                                                                                                        C((Code.I[++ah] & 0xFF) << 8 | (Code.I[++ah] & 0xFF), j());
                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                        b31 = Code.B;
                                                                                                                                                                        n56 = Code.E - 3;
                                                                                                                                                                        b31[n56] |= Code.B[Code.E - 1];
                                                                                                                                                                        b32 = Code.B;
                                                                                                                                                                        n57 = Code.E - 4;
                                                                                                                                                                        b32[n57] |= Code.B[Code.E - 2];
                                                                                                                                                                        Code.E -= 2;
                                                                                                                                                                        continue Block_38_Outer;
                                                                                                                                                                    }
                                                                                                                                                                    catch (ArithmeticException ex) {
                                                                                                                                                                        ah = Code(ex, 15, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (ArrayIndexOutOfBoundsException ex2) {
                                                                                                                                                                        ah = Code(ex2, 16, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (NullPointerException ex3) {
                                                                                                                                                                        ah = Code(ex3, 21, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (IllegalArgumentException ex4) {
                                                                                                                                                                        ah = Code(ex4, 19, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (ClassCastException ex5) {
                                                                                                                                                                        ah = Code(ex5, 18, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (OutOfMemoryError outOfMemoryError) {
                                                                                                                                                                        ah = Code(outOfMemoryError, 22, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (StringIndexOutOfBoundsException ex6) {
                                                                                                                                                                        ah = Code(ex6, 24, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (IndexOutOfBoundsException ex7) {
                                                                                                                                                                        ah = Code(ex7, 20, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (EOFException ex8) {
                                                                                                                                                                        ah = Code(ex8, 27, ah);
                                                                                                                                                                    }
                                                                                                                                                                    catch (IOException ex9) {
                                                                                                                                                                        ah = Code(ex9, 26, ah);
                                                                                                                                                                    }
                                                                                                                                                                    finally {
                                                                                                                                                                        if (!c()) {
                                                                                                                                                                            ah = Code(t, Code.af, ah);
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                if (ah < 0) {
                                                                                                                                                                    break Block_38_Outer;
                                                                                                                                                                }
                                                                                                                                                                continue Label_6644_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -125: {
                                                                                                                                                                continue Label_7354_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -124: {
                                                                                                                                                                continue Label_6580_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -123: {
                                                                                                                                                                continue Label_7681_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -122: {
                                                                                                                                                                continue Label_8063_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -120: {
                                                                                                                                                                continue Label_6902_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -119: {
                                                                                                                                                                continue Label_7555_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -117: {
                                                                                                                                                                continue Label_6521_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -118: {
                                                                                                                                                                continue Label_7496_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -116: {
                                                                                                                                                                continue Label_6677_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -115: {
                                                                                                                                                                continue Label_7944_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -114: {
                                                                                                                                                                continue Label_7614_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -113: {
                                                                                                                                                                continue Label_6631_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -112: {
                                                                                                                                                                continue Label_6976_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -90: {
                                                                                                                                                                continue Label_7425_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -89: {
                                                                                                                                                                continue Label_8005_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -88: {
                                                                                                                                                                continue Label_7230_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -87: {
                                                                                                                                                                continue Label_7283_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -86: {
                                                                                                                                                                continue Label_7895_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -85: {
                                                                                                                                                                continue Label_6445_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -84: {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            case -83: {
                                                                                                                                                                continue Label_6827_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -82: {
                                                                                                                                                                continue Label_6657_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -81: {
                                                                                                                                                                continue Label_7124_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -80: {
                                                                                                                                                                continue Label_6475_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -77: {
                                                                                                                                                                continue Label_7797_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -76: {
                                                                                                                                                                continue Label_6737_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -75: {
                                                                                                                                                                continue Label_7177_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -74: {
                                                                                                                                                                continue Label_6712_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -73: {
                                                                                                                                                                continue Label_6753_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -72: {
                                                                                                                                                                continue Label_6430_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -71: {
                                                                                                                                                                continue Label_6415_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -70: {
                                                                                                                                                                continue Label_6730_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -79: {
                                                                                                                                                                continue Label_7748_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -78: {
                                                                                                                                                                continue Label_7846_Outer;
                                                                                                                                                            }
                                                                                                                                                            case -69: {
                                                                                                                                                                continue Label_7050_Outer;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                                break;
                                                                                                                            }
                                                                                                                            break;
                                                                                                                        }
                                                                                                                        break;
                                                                                                                    }
                                                                                                                    break;
                                                                                                                }
                                                                                                                break;
                                                                                                            }
                                                                                                            break;
                                                                                                        }
                                                                                                        break;
                                                                                                    }
                                                                                                    break;
                                                                                                }
                                                                                                break;
                                                                                            }
                                                                                            break;
                                                                                        }
                                                                                        break;
                                                                                    }
                                                                                    break;
                                                                                }
                                                                                break;
                                                                            }
                                                                            break;
                                                                        }
                                                                        break;
                                                                    }
                                                                    break;
                                                                }
                                                                break;
                                                            }
                                                            break;
                                                        }
                                                        break;
                                                    }
                                                    break;
                                                }
                                                break;
                                            }
                                            break;
                                        }
                                        break;
                                    }
                                    break;
                                }
                                break;
                            }
                            break;
                        }
                        break;
                    }
                    break;
                }
                break;
            }
        }
    }
    
    private Code(final boolean b, final short n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aS = true;
    }
    
    private static boolean I(int n, int n2) {
        if (n != 0) {
            final int l = l(n - 1);
            n = n2;
            n2 = l;
            int f;
            for (int n3 = l - 2; (f = f(n3)) != 0; n3 -= g(n3)) {
                if (f == n) {
                    return true;
                }
            }
            return Z(n2, n);
        }
        return false;
    }
    
    private static int I(final char c) {
        if (c < '\u0100') {
            return Code.t[c];
        }
        if (c >= '\ufffd') {
            return 0;
        }
        int n = 0;
        int length = Code.D.length;
        int n2;
        while (true) {
            n2 = (length + n) / 2;
            if (Code.D[n2] <= c) {
                if (Code.D[n2 + 1] > c) {
                    break;
                }
                n = n2;
            }
            else {
                length = n2;
            }
        }
        return Code.u[n2];
    }
    
    private static void h(final int n) {
        Code.T = l(n);
        final int l;
        int i = Code(Code.T)[(Code.T & 0x7FFF) + ((l = l(Code.V + 2)) & c(n, 2) - 1)];
        while (i != 0) {
            Label_0122: {
                if (n == Code.Y) {
                    if (l(Code.V + 1) == l(i + 1)) {
                        break Label_0122;
                    }
                }
                else {
                    final int v = Code.V;
                    final int n2 = i;
                    final int j = l(v + 1);
                    final int k = l(n2 + 1);
                    final int m = m(j);
                    if (m(k) == m && Code(j, k, m)) {
                        break Label_0122;
                    }
                }
                i = l(i);
                continue;
            }
            Code.V = i;
            Code.T = 0;
            return;
        }
        Code.T = 0;
        b(n, l);
    }
    
    private int Z(int n, int n2) {
        Code.L = b(d(n2), n2);
        if ((n2 = Code.d[n2 + 1]) < 0) {
            Code(Code.L);
            n = I(n2, n);
            Code(Code.L);
            Code.L = 0;
            return n;
        }
        final int c = c(n2);
        final int n3 = Code.D++ - c;
        System.arraycopy(Code.J, n3, Code.J, n3 + 1, c);
        Code.J[n3] = Code.L;
        n = I(Code.L, n2, n);
        Code.L = 0;
        return n;
    }
    
    private static void c(final int n) {
        Code.T = l(Code.ab);
        for (int i = Code(Code.T)[(Code.T & 0x7FFF) + (n & c(Code.ab, 2) - 1)]; i != 0; i = l(i)) {
            if (l(i + 1) == Code.L && l(i + 2) == n) {
                Code.V = i;
                Code.T = 0;
                return;
            }
        }
        Code.T = 0;
        a((Code.V = b(3, Code.q)) + 1, Code.L);
        a(Code.V + 2, n);
        b(Code.ab, n);
    }
    
    private static String Code(int l, int n, int n2) {
        l = l(l + 1);
        if (n < 0 || n2 < n) {
            Code.af = 19;
            throw Code.Code;
        }
        final byte[] z = Z(l);
        int n3;
        l = (n3 = (l & 0x3FFF)) + m(l);
        n2 -= n;
        while (n-- > 0) {
            if (n3 == l) {
                Code.af = 24;
                throw Code.Code;
            }
            n3 += y((int)z[n3]);
        }
        n = n3;
        while (n2-- > 0) {
            if (n3 == l) {
                Code.af = 24;
                throw Code.Code;
            }
            n3 += y((int)z[n3]);
        }
        return Code(z, n, n3);
    }
    
    private static void h() {
        Code.T = l(Code.aa);
        final int c = c(Code.aa, 2);
        final int m = m(Code.R);
        int j;
        for (int i = Code(Code.T)[(Code.T & 0x7FFF) + ((j = J(Code.R, m)) & c - 1)]; i != 0; i = l(i)) {
            final int l;
            if (m(l = l(i + 1)) == m && Code(l, Code.R, m)) {
                Code.V = i;
                Code.T = 0;
                Code.R = 0;
                return;
            }
        }
        Code.T = 0;
        a((Code.V = b(3, Code.p)) + 1, Code.R);
        Code.R = 0;
        a(Code.V + 2, j);
        b(Code.aa, j);
    }
    
    private void p() {
        if (Code.t) {
            return;
        }
        final int size = Code.I.size();
        int n3;
        if (Code.d != null) {
            final int n = Code.bz << 10;
            final Code c;
            int n2;
            if ((n2 = (c = Code.d.C).U(n)) > n) {
                n2 = Code(c, n);
            }
            n3 = n - Math.max(n2, 0);
            if (size > 1) {
                n3 /= size - 1;
            }
        }
        else {
            n3 = Code.bz << 10;
            if (size > 0) {
                n3 /= size;
            }
        }
        final int max = Math.max(1, n3);
        int n4 = 0;
        for (int i = 0; i < size; ++i) {
            final Code code;
            if ((code = Code.I.elementAt(i)) != Code.d) {
                final Code c2 = code.C;
                final int max2 = Math.max(1, max + n4);
                int n5;
                if ((n5 = c2.U(max2)) > max2) {
                    n5 = Code(c2, max2);
                }
                if (n5 > max) {
                    n4 -= n5 - max;
                }
                else {
                    n4 += max - n5;
                }
            }
        }
        if (n4 < 0) {
            this.J(Code.t = true);
            Code.t = false;
        }
    }
    
    private static void Code(final Runnable runnable) {
        new Thread(runnable).start();
    }
    
    private static void Code(final byte[] array, final int n, final int n2, final int n3) {
        array[0] = 1;
        array[1] = 16;
        array[2] = (byte)n;
        array[3] = (byte)(n2 >> 8);
        array[4] = (byte)n2;
        array[5] = (byte)n3;
    }
    
    private static int c(final int n, final int n2) {
        final int l = l(n + 1);
        int i = l(Code.T - 3);
        if (l > i * 3 / 4) {
            final int b = b(i << 1, -1);
            a(n, b);
            final int[] code = Code(Code.T);
            final int[] code2 = Code(b);
            final int n3 = Code.T & 0x7FFF;
            final int n4 = b & 0x7FFF;
            for (int j = 0; j < i; ++j) {
                int m;
                for (int k = code[n3 + j]; k != 0; k = m) {
                    m = l(k);
                    a(k, 0);
                    final int n5 = n4 + (l(k + n2) & (i << 1) - 1);
                    final int n6;
                    if ((n6 = code2[n5]) != 0) {
                        a(k, n6);
                    }
                    code2[n5] = k;
                }
            }
            Code.T = b;
            i <<= 1;
        }
        return i;
    }
    
    private static int Code(final String s, final byte[] array, final int n) {
        int n2 = 0;
        for (int i = 0; i < s.length(); ++i) {
            int char1;
            if ((char1 = s.charAt(i)) >= 55296 && char1 <= 56319) {
                char1 = 65536 + (char1 - 55296 << 10) + (s.charAt(++i) - '\udc00');
            }
            n2 += Code(char1, array, n + n2 + 2);
        }
        I(n2, array, n);
        return n2;
    }
    
    private static void s(int i) {
        final int l;
        if ((l = l(i - 1)) == -1) {
            I(Code(i), i & 0x7FFF, l(i - 3));
            return;
        }
        if (l == Code.r) {
            I(Code(i), (i & 0x7FFF) + 1, l(i));
            return;
        }
        if (l == Code.s) {
            return;
        }
        if (l == Code.t) {
            r(i + 1);
            return;
        }
        if (l == Code.p) {
            r(i + 1);
            q(i);
            return;
        }
        if (l == -2) {
            q(i);
            return;
        }
        if (l == Code.u) {
            final int j;
            if ((j = l(i)) != 0 && l(j - 2) == 0) {
                a(i, 0);
                return;
            }
            q(i);
        }
        else {
            if (l == Code.v) {
                final int k = l(i);
                int m = l(i + 1);
                int l2 = l(i + 2);
                if (m != 0) {
                    if (l(m - 2) == 0) {
                        a(i + 1, 0);
                        m = 0;
                    }
                    else {
                        q(i + 1);
                    }
                }
                if (l2 != 0) {
                    if (l(l2 - 2) == 0) {
                        a(i + 2, 0);
                        l2 = 0;
                    }
                    else {
                        q(i + 2);
                    }
                }
                if (k != 0) {
                    if (m == 0 && l2 == 0 && l(k - 2) == 0) {
                        a(i, 0);
                        return;
                    }
                    q(i);
                }
                return;
            }
            final int n = i;
            i = l;
            final int n2 = n;
            while (i != 0) {
                final int n3 = Code.d[i];
                I(Code(n2), (n2 & 0x7FFF) + ((n3 != 0) ? d(n3) : 0), e(i));
                i = n3;
            }
        }
    }
    
    private static int I(final char[] array, final int n, final int n2) {
        int n3 = 0;
        for (int i = 0; i < n2; ++i) {
            final char c;
            if ((c = array[n + i]) >= '\ud800' && c <= '\udbff') {
                n3 += 4;
                ++i;
            }
            else {
                n3 += x((int)c);
            }
        }
        k(n3);
        for (int j = 0; j < n2; ++j) {
            int n4;
            if ((n4 = array[n + j]) >= 55296 && n4 <= 56319) {
                n4 = 65536 + (n4 - 55296 << 10) + (array[n + ++j] - '\udc00');
            }
            Code.S += Code(n4, Code.Z, Code.S);
        }
        h();
        final int v = Code.V;
        Code.V = 0;
        return v;
    }
    
    private Code(final char c, final byte b) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
    }
    
    private static void g() {
        int n = Code.Z[0];
        for (int i = 1; i < Code.Z.length; ++i) {
            if (Code.Z[i] > n) {
                n = Code.Z[i];
            }
        }
        Code.Code = new boolean[n + 1];
        final int n2 = Code.Z[8];
        for (int j = 0; j < Code.Z.length; ++j) {
            final int n3 = Code.Z[j];
            Code.Code[n3] = Z(n3, n2);
        }
    }
    
    public static void B() {
        Code.J = new Code((short)0, 0);
    }
    
    private static Code Code(final Object o) {
        return (Code)((Object[])o)[0];
    }
    
    private static int c(final int n) {
        int n2 = Code.I[n] >> 4 & 0x3;
        if ((Code.I[n] & 0x1) != 0x0) {
            n2 += Code.I[n + 1];
        }
        return n2;
    }
    
    private static int Code(final int n, final int n2) {
        m(n);
        return Code.d[Code.d[l(n - 1) + 2 + n2 / 8] + n2 % 8];
    }
    
    private static long I() {
        long n = Code.I.length + (long)(Code.d.length << 2);
        for (int i = 0; i < Code.Code.length; ++i) {
            if (Code.Code[i] != null) {
                n += Code.Code[i].length << 2;
            }
        }
        for (int j = 0; j < Code.Code.length; ++j) {
            if (Code.Code[j] != null) {
                n += Code.Code[j].length;
            }
        }
        return n;
    }
    
    private static void Code(final int n, final int n2, final byte[] array, final int n3, final int n4) {
        if (n4 > 0) {
            System.arraycopy(Z(n), (n & 0x3FFF) + n2, array, n3, n4);
        }
    }
    
    private static char[] I(int l) {
        m(l);
        final byte[] z = Z((l = l(l + 1)) - 2);
        l = (l - 2 & 0x3FFF);
        final byte[] array = z;
        final int b = B(z, l);
        l += 2;
        return Code(array, l, l + b);
    }
    
    private static void I(final int n, final int n2) {
        final Object code;
        monitorenter(code = Code.Code);
        Code.c = n * 10;
        Code.d = n2 * 10;
        final int n3 = 0;
        try {
            a(n3);
        }
        finally {
            monitorexit(code);
        }
    }
    
    private static boolean Code(final char[] array, final int n) {
        return n >= 0 && n < array.length && a(array[n]);
    }
    
    private static boolean Z(int i, final int n) {
        while (i != n) {
            if ((i = Code.d[i]) == 0) {
                return false;
            }
        }
        return true;
    }
    
    private static void a(final int n) {
        final Object code;
        monitorenter(code = Code.Code);
        if (!Code.e) {
            return;
        }
        try {
            e();
            Code.e = Math.min(Code.c + (Code.d - Code.c) * n / 100, 1000);
            final int n2 = 0;
            final int i = Code.i;
            final int j = Code.j;
            final int h = Code.h;
            try {
                I(n2, i, j, h);
            }
            catch (NullPointerException ex) {}
        }
        finally {
            monitorexit(code);
        }
    }
    
    private static int Code(final byte[] array, final int n, final int n2, final byte[] array2, final int n3, final int n4) {
        k(n2 + n4);
        System.arraycopy(array, n, Code.Z, Code.S, n2);
        System.arraycopy(array2, n3, Code.Z, Code.S + n2, n4);
        h();
        final int v = Code.V;
        Code.V = 0;
        return v;
    }
    
    private static int m() {
        final int q = Code.Q;
        Code.Q = 0;
        return q;
    }
    
    private static void e() {
        if (Code.j == v() && Code.k == Code.B.a()) {
            return;
        }
        Code.j = v();
        Code.k = Code.B.a();
        Code.l = (Code.l = (Code.m = ((Code.j > 225) ? (Code.k * 80 / 100) : (Code.k - 45))) + Code.h / 2) + Math.min(15, (Code.k - Code.l - Code.g) / 2);
        Code.i = Code.m - Code.h / 2;
    }
    
    private static int Z(int n, final int n2, final int n3) {
        m(n);
        for (n = l(n - 1) - 2; f(n) != n2; n -= g(n)) {}
        return Code.d[Code.d[n - 1 - n3 / 8] + n3 % 8];
    }
    
    public static int Code(final String s) {
        k(c(s));
        for (int i = 0; i < s.length(); ++i) {
            int char1;
            if ((char1 = s.charAt(i)) >= 55296 && char1 <= 56319) {
                char1 = 65536 + (char1 - 55296 << 10) + (s.charAt(++i) - '\udc00');
            }
            Code.S += Code(char1, Code.Z, Code.S);
        }
        h();
        final int v = Code.V;
        Code.V = 0;
        return v;
    }
    
    private static void k() {
        while (Code.ar >= 0) {
            final int ar = Code.ar;
            Code.ar = l(Code.ar - 2);
            final int l;
            if ((l = l(ar - 1)) == -1) {
                ++Code.at;
                Code.au += l(ar - 3) - 1;
                Code(Code(ar), ar & 0x7FFF, l(ar - 3));
            }
            else if (l == Code.r) {
                final int i = l(ar);
                Code.au += i;
                Code(Code(ar), (ar & 0x7FFF) + 1, i);
            }
            else if (l == Code.s) {
                Code.at += l(ar);
            }
            else if (l == Code.t) {
                o(l(ar + 1));
            }
            else if (l == Code.p) {
                o(l(ar + 1));
            }
            else {
                if (l == Code.o) {
                    continue;
                }
                if (l == Code.q) {
                    n(l(ar + 1));
                }
                else if (l == Code.u) {
                    if (Code.ay >= l(ar + 1)) {
                        continue;
                    }
                    n(l(ar));
                }
                else if (l == Code.v) {
                    final int j;
                    if ((j = l(ar)) == 0) {
                        continue;
                    }
                    int k = l(ar + 1);
                    int m = l(ar + 2);
                    if (k != 0) {
                        if (Code.ay < l(ar + 3)) {
                            n(k);
                        }
                        if (l(k - 2) != 0) {
                            n(j);
                            k = 0;
                        }
                    }
                    if (m != 0) {
                        if (Code.ay < l(ar + 3)) {
                            n(m);
                        }
                        if (l(m - 2) != 0) {
                            n(j);
                            m = 0;
                        }
                    }
                    if (k == 0 && m == 0) {
                        continue;
                    }
                    a(ar - 2, Code.ax);
                    Code.ax = ar;
                }
                else {
                    final int n = ar;
                    int n2 = l;
                    final int n3 = n;
                    while (n2 != 0) {
                        final int n4 = Code.d[n2];
                        Code(Code(n3), (n3 & 0x7FFF) + ((n4 != 0) ? d(n4) : 0), e(n2));
                        n2 = n4;
                    }
                }
            }
        }
    }
    
    private static void p(final int n) {
        final int l;
        if ((l = l(n)) != 0) {
            int i = l(n + 1);
            final int[] code = Code(l);
            final int n2 = l & 0x7FFF;
            int j = l(l - 3);
            while (--j >= 0) {
                int n3 = n2 + j;
                int k = code[n3];
                int[] code2 = code;
                while (k != 0) {
                    final int m = l(k);
                    if (l(k - 2) != 0) {
                        final int n4;
                        code2 = Code(n4 = k);
                        n3 = (n4 & 0x7FFF);
                    }
                    else {
                        code2[n3] = m;
                        --i;
                    }
                    k = m;
                }
            }
            n(l);
            a(n + 1, i);
        }
    }
    
    private static void Code(final int n, final int n2, final boolean b) {
        final int l = l(n);
        if (n2 <= l(n - 3) - 1) {
            Code.Code = Code(n);
            Z((int[])(Object)(Code.Code = (n & 0x7FFF) + 1), Code.Code + l, n2 - l);
            a(n, n2);
            Code.Q = n;
            return;
        }
        final int max = Math.max(n2, l << 1);
        if (b) {
            Code.L = n;
            Z(max, n2);
            I(Code.L, 1, Code.Q, 1, l);
            Code.L = 0;
            return;
        }
        Z(max, n2);
    }
    
    private static boolean Code(final int n, final int n2, final int n3) {
        return Code(Z(n), n & 0x3FFF, Z(n2), n2 & 0x3FFF, n3);
    }
    
    public final int Code(final Code code) {
        return this.cp - code.cp;
    }
    
    private static void i() {
        if (C()) {
            final int[][] code = new int[Code.Code.length << 1][];
            System.arraycopy(Code.Code, 0, code, 0, Code.Code.length);
            Code.Code = code;
        }
    }
    
    private static void j() {
        if (a()) {
            final byte[][] code = new byte[Code.Code.length << 1][];
            System.arraycopy(Code.Code, 0, code, 0, Code.Code.length);
            Code.Code = code;
        }
    }
    
    private static void r(final int n) {
        a(n, o(l(n)));
    }
    
    private static void n(final int ar) {
        if (ar >= Code.am) {
            if (l(ar - 2) != 0) {
                return;
            }
            a(ar - 2, Code.ar);
            Code.ar = ar;
        }
    }
    
    private static int n(final int n) {
        if (n >= Code.am) {
            return l(n - 2);
        }
        return n;
    }
    
    private Code(final Code a, final char c) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        Code.J = new int[1024];
        Code.B = new int[1024];
        Code.C = new int[1024];
        Code.af = 11;
        Code.Code = new RuntimeException();
        Code.Code = new byte[16][];
        Code.Code = new int[16][];
        Code.ar = -1;
        Code.J = new byte[16];
        Code.Code = new Object[1024];
        Code.av = 0;
        Code.aw = 0;
        Code.ax = -1;
        Code.a = a;
    }
    
    private static int l() {
        final int q = Code.Q;
        Code.Q = 0;
        return q;
    }
    
    private static int g(final int n) {
        return Code.d[n] >> 16 & 0xFFFF;
    }
    
    private static int i() {
        return Code.B[Code.E - 1];
    }
    
    private static int k() {
        Code.D = Code.y;
        Code.E = Code.z;
        Code.F -= 5;
        Code.x = Code.C[Code.F + 4];
        Code.z = Code.C[Code.F + 2];
        Code.y = Code.C[Code.F + 1];
        Code.A = Code.C[Code.F];
        return Code.C[Code.F + 3];
    }
    
    private static int k(final int n) {
        return Code.d[Code.ao + n];
    }
    
    private static int l(final int n) {
        return Code(n)[n & 0x7FFF];
    }
    
    private static void f() {
        if (Code.H > Code.G) {
            final int n = Code.G + Code.K;
            try {
                final byte[] i = new byte[n];
                System.arraycopy(Code.I, 0, i, 0, Code.G);
                System.arraycopy(Code.I, Code.H, i, Code.G, Code.K);
                Code.H = Code.G;
                Code.I = i;
            }
            finally {}
        }
    }
    
    private static void u(final int n) {
        if (!Code.Code) {
            a(n);
        }
    }
    
    private static int Code(int b, final int n, final Object o) {
        if (o == null) {
            return 0;
        }
        if (!b()) {
            t(0);
            if (!b()) {
                t(1);
                if (!b()) {
                    Code.af = 22;
                    throw Code.Code;
                }
            }
        }
        a(b = b(n, Code.Z[b]), Code.as);
        Code.Code[Code.as] = o;
        return b;
    }
    
    private static int Code(final byte[] array) {
        if (array == null) {
            return 0;
        }
        return Z(array, 0, array.length);
    }
    
    private static boolean c() {
        return Code.v;
    }
    
    private static boolean B() {
        return j() != 0;
    }
    
    private int Code(final int n, final int n2, final int n3) {
        if (n2 < 0) {
            Code(n);
            return I(n2, n3);
        }
        return I(n, n2, n3);
    }
    
    private int b(final int n) {
        this.b(n);
        return j();
    }
    
    private static int g() {
        return Code.J[Code.D - 1];
    }
    
    public static int Code(final int n) {
        return l(n);
    }
    
    public static void Code(final int n) {
        Code.J[Code.D++] = n;
    }
    
    private static int a(int n, final int n2) {
        final int n3 = n;
        n = n2;
        return b(n3, Code.Z[n]);
    }
    
    private static void B(final int n, final int n2, final int n3) {
        if (n2 < 0 || n3 < 0 || n2 + n3 > n) {
            final int af = 16;
            new StringBuffer().append("offset=").append(n2).append(" length=").append(n3).append(" size=").append(n);
            Code.af = af;
            throw Code.Code;
        }
    }
    
    private static int b(final int n, final int n2) {
        if (n + 3 > 32768) {
            t(0);
            if (C()) {
                t(1);
            }
            int j = 0;
            try {
                j(n);
            }
            finally {
                Code.a.J(true);
                j = j(n);
            }
            final int[] array;
            (array = Code.Code[j])[0] = n;
            array[2] = n2;
            return (j << 15) + 3;
        }
        int[] array2 = null;
        int i = 0;
        while (i < 4) {
            if ((Code.al & 0x7FFF) + 3 + n > 32768) {
                Code.al = (Code.al >>> 15) + 1 << 15;
            }
            if ((array2 = Code.Code[Code.al >>> 15]) != null) {
                break;
            }
            if (i >= 2) {
                if (i == 2) {
                    final int n3 = Code.al >>> 15;
                    try {
                        g(n3);
                        array2 = Code.Code[Code.al >>> 15];
                        break;
                    }
                    finally {
                        Code.a.J(true);
                        ++i;
                        continue;
                    }
                }
                g(Code.al >>> 15);
                array2 = Code.Code[Code.al >>> 15];
                break;
            }
            t(i);
            ++i;
        }
        final int n4 = Code.al + 3;
        final int n5 = (Code.al & 0x7FFF) + 3;
        Code.al = n4 + n;
        array2[n5 - 3] = n;
        array2[n5 - 1] = n2;
        return n4;
    }
    
    private static int j() {
        return Code.B[--Code.E];
    }
    
    public static void I(final int n) {
        Code.B[Code.E++] = n;
    }
    
    private static int h() {
        return Code.J[--Code.D];
    }
    
    private static void f(final int n) {
        if (n == 0) {
            Code.Z = Z(Code.R = Code.ac);
            Code.S = (Code.R & 0x3FFF);
            return;
        }
        k(n);
    }
    
    private static void e(int l) {
        Code.L = l;
        if ((l = l(Code.Q)) >= l(Code.Q - 3) - 1) {
            final int n = (l << 1) + 1;
            final int b = B(n, n);
            I(Code.Q, 1, b, 1, l);
            Code.Q = b;
        }
        Code(Code.Q)[(Code.Q & 0x7FFF) + 1 + l] = Code.L;
        a(Code.Q, ++l);
        Code.L = 0;
    }
    
    private static int e(final int n) {
        return Code.d[n - 1] >> 16 & 0xFFFF;
    }
    
    private static int I(final int a, int x, int n) {
        if (Code.F + 10 >= Code.C.length) {
            Code.af = 23;
            throw Code.Code;
        }
        Code.C[Code.F] = Code.A;
        Code.C[Code.F + 1] = Code.y;
        Code.C[Code.F + 2] = Code.z;
        Code.C[Code.F + 3] = n;
        Code.C[Code.F + 4] = Code.x;
        Code.F += 5;
        Code.x = x;
        Code.y = Code.D;
        Code.z = Code.E;
        n = Code.I[x];
        int n2 = 3;
        int n3 = 3;
        if (n != 0) {
            Code.y -= (n >> 4 & 0x3);
            if ((n & 0x1) != 0x0) {
                Code.y -= Code.I[++x];
            }
            Code.z -= (n >> 6 & 0x3);
            if ((n & 0x2) != 0x0) {
                Code.z -= Code.I[++x];
            }
            if ((n & 0x4) != 0x0) {
                n2 = 3 + (1 + Code.I[++x]);
            }
            if ((n & 0x8) != 0x0) {
                n3 = 3 + (1 + Code.I[++x]);
            }
        }
        while (n2-- > 0) {
            Code.J[Code.D++] = 0;
        }
        if ((Code.E += n3) >= Code.B.length || Code.D >= Code.J.length) {
            Code.af = 23;
            throw Code.Code;
        }
        Code.A = a;
        return x;
    }
    
    private static int d(final int n) {
        return Code.d[n - 1] & 0xFFFF;
    }
    
    private static int f(final int n) {
        return -(Code.d[n] & 0xFFFF);
    }
    
    private static int I(int i, int l) {
        Code.C[Code.F] = Code.A;
        Code.C[Code.F + 1] = Code.y;
        Code.C[Code.F + 2] = Code.z;
        Code.C[Code.F + 3] = -1;
        Code.C[Code.F + 4] = Code.x;
        Code.F += 5;
        Label_13807: {
            switch (Code.x = i) {
                case -2: {
                    final String value;
                    final int length = (value = String.valueOf(j())).length();
                    for (int j = 0; j < length; ++j) {
                        Code.J[j] = (byte)value.charAt(j);
                    }
                    Z(Code.J, 0, length);
                    Code(Code.V);
                    Code.V = 0;
                    break;
                }
                case -3: {
                    final String value2;
                    int length2;
                    k(length2 = (value2 = String.valueOf(Code(h()))).length());
                    while (length2-- > 0) {
                        Code.Z[Code.S + length2] = (byte)value2.charAt(length2);
                    }
                    h();
                    Code(Code.V);
                    Code.V = 0;
                    break;
                }
                case -1: {
                    if (C(i = j())) {
                        final int x = x(i);
                        Code(i, Code.J, 0);
                        Z(Code.J, 0, x);
                        Code(Code.V);
                        Code.V = 0;
                        break;
                    }
                    Code.af = 25;
                    throw Code.Code;
                }
                case -4: {
                    i = j();
                    final int k = j();
                    B(l(Code.Q = h()), k, i);
                    if (!I(I(Code.Q), i(Code.Q) + k, i)) {
                        Code.af = 25;
                        throw Code.Code;
                    }
                    if (i <= Code.J.length) {
                        if (i > 0) {
                            System.arraycopy(I(Code.Q), i(Code.Q) + k, Code.J, 0, i);
                        }
                        Code.Q = 0;
                        Z(Code.J, 0, i);
                    }
                    else {
                        k(i);
                        Code(l(Code.Q + 1), k, Code.Z, Code.S, i);
                        Code.Q = 0;
                        h();
                    }
                    Code(Code.V);
                    Code.V = 0;
                    break;
                }
                case -5: {
                    final byte[] z = Z(i = l(h() + 1));
                    final int n = i & 0x3FFF;
                    i = m(i);
                    int m;
                    for (int n2 = m = j(), n3 = 0; n3 < i && n2 >= 0; n3 += y((int)z[n + n3])) {
                        if (n2-- <= 0) {
                            I(C(z, n + n3));
                            break Label_13807;
                        }
                    }
                    final int af = 24;
                    new StringBuffer().append(m).append(" max: ").append(i - 1);
                    Code.af = af;
                    throw Code.Code;
                }
                case -6: {
                    i = l(h() + 1);
                    final int l2 = l(h() + 1);
                    final int j2 = j();
                    final byte[] z2 = Z(i);
                    final byte[] z3 = Z(l2);
                    final int n4 = i & 0x3FFF;
                    final int n5 = l2 & 0x3FFF;
                    i = m(i);
                    final int m2 = m(l2);
                    int n6 = 0;
                    int n7 = 0;
                    while (n6 < i) {
                        if (n7 >= m2) {
                            I(1);
                            break Label_13807;
                        }
                        final int c = C(z2, n4 + n6);
                        final int c2 = C(z3, n5 + n7);
                        if (c != c2 && (j2 == 0 || h(c) != h(c2))) {
                            if (j2 == 0) {
                                I(c - c2);
                                break Label_13807;
                            }
                            I(h(c) - h(c2));
                            break Label_13807;
                        }
                        else {
                            n6 += y((int)z2[n4 + n6]);
                            n7 += y((int)z3[n5 + n7]);
                        }
                    }
                    if (n7 == m2) {
                        I(0);
                        break;
                    }
                    I(-1);
                    break;
                }
                case -7: {
                    Code.X = l(h() + 1);
                    i = m(Code.W = l(h() + 1));
                    final int m3 = m(Code.X);
                    k(i + m3);
                    Code(Code.X, 0, Code.Z, Code.S, m3);
                    Code(Code.W, 0, Code.Z, Code.S + m3, i);
                    Code.W = 0;
                    Code.X = 0;
                    h();
                    Code(Code.V);
                    Code.V = 0;
                    break;
                }
                case -8: {
                    i = l(h() + 1);
                    final int l3 = l(h() + 1);
                    final int m4 = m(i);
                    int m5 = m(l3);
                    if (m4 < m5) {
                        I(0);
                        break;
                    }
                    final byte[] z4 = Z(i);
                    final byte[] z5 = Z(l3);
                    i &= 0x3FFF;
                    final int n8 = l3 & 0x3FFF;
                    i += m4 - m5;
                    while (m5-- > 0) {
                        if (z4[i + m5] != z5[n8 + m5]) {
                            I(0);
                            break Label_13807;
                        }
                    }
                    I(1);
                    break;
                }
                case -9: {
                    k(i = m(Code.W = l(h() + 1)));
                    Code(Code.W, 0, Code.Z, Code.S, i);
                    Code.W = 0;
                    Code(n());
                    break;
                }
                case -10: {
                    i = l(h() + 1);
                    final int l4 = l(h() + 1);
                    final int j3 = j();
                    final int m6;
                    if ((m6 = m(l4)) != 0) {
                        final int j4 = j();
                        final byte[] z6 = Z(i);
                        final byte[] z7 = Z(l4);
                        final int n9 = i & 0x3FFF;
                        final int n10 = l4 & 0x3FFF;
                        i = m(i);
                        for (int n11 = 0, n12 = 0; n11 <= i - m6; n11 += y((int)z6[n9 + n11]), ++n12) {
                            if (n12 >= j4) {
                                int n13 = 0;
                                if (j3 == 0) {
                                    while (n13 < m6 && z6[n9 + n11 + n13] == z7[n10 + n13]) {
                                        ++n13;
                                    }
                                }
                                else {
                                    while (n13 < m6 && h(C(z6, n9 + n11 + n13)) == h(C(z7, n10 + n13))) {
                                        n13 += y((int)z6[n9 + n11 + n13]);
                                    }
                                }
                                if (n13 == m6) {
                                    I(n12);
                                    break Label_13807;
                                }
                            }
                        }
                        I(-1);
                        break;
                    }
                    break;
                }
                case -11: {
                    final byte[] z8 = Z(i = l(h() + 1));
                    final int n14 = i & 0x3FFF;
                    i = m(i);
                    final int j5 = j();
                    final int j6 = j();
                    final int j7;
                    final int h = h(j7 = j());
                    int n15 = 0;
                    for (int n16 = 0; n16 < i; n16 += y((int)z8[n14 + n16])) {
                        final int c3;
                        if (n15 >= j6 && ((c3 = C(z8, n14 + n16)) == j7 || (j5 != 0 && h(c3) == h))) {
                            I(n15);
                            break Label_13807;
                        }
                        ++n15;
                    }
                    I(-1);
                    break;
                }
                case -12: {
                    final byte[] z9 = Z(i = l(h() + 1));
                    final int n17 = i & 0x3FFF;
                    i = m(i);
                    final int j8 = j();
                    int n18 = 0;
                    int n19 = -1;
                    for (int n20 = 0; n20 < i; n20 += y((int)z9[n17 + n20])) {
                        if (C(z9, n17 + n20) == j8) {
                            n19 = n18;
                        }
                        ++n18;
                    }
                    I(n19);
                    break;
                }
                case -13: {
                    final byte[] z10 = Z(i = l(h() + 1));
                    final int n21 = i & 0x3FFF;
                    i = m(i);
                    int n22 = 0;
                    for (int n23 = 0; n23 < i; n23 += y((int)z10[n21 + n23])) {
                        ++n22;
                    }
                    I(n22);
                    break;
                }
                case -14: {
                    i = l(h() + 1);
                    final int l5 = l(h() + 1);
                    final int j9 = j();
                    int j10 = j();
                    final byte[] z11 = Z(i);
                    final byte[] z12 = Z(l5);
                    final int n24 = i & 0x3FFF;
                    final int n25 = l5 & 0x3FFF;
                    int m7 = m(l5);
                    int n26 = 0;
                    while (j10-- > 0) {
                        n26 += y((int)z11[n24 + n26]);
                    }
                    if (m(i) < m7 + n26) {
                        I(0);
                        break;
                    }
                    if (j9 == 0) {
                        while (m7-- > 0) {
                            i = z11[n24 + n26 + m7];
                            if (i != z12[n25 + m7]) {
                                I(0);
                                break Label_13807;
                            }
                        }
                    }
                    else {
                        while (m7 > 0) {
                            i = h(C(z11, n24 + n26 + m7 - 1));
                            if (i != h(C(z12, n25 + m7 - 1))) {
                                I(0);
                                break Label_13807;
                            }
                            m7 -= y((int)z11[n24 + n26 + m7 - 1]);
                        }
                    }
                    I(1);
                    break;
                }
                case -15: {
                    Code.W = l(h() + 1);
                    i = j();
                    int j11;
                    if ((j11 = j()) < 0 || i < j11) {
                        Code.af = 19;
                        throw Code.Code;
                    }
                    final byte[] z13 = Z(Code.W);
                    int n28;
                    final int n27 = (n28 = (Code.W & 0x3FFF)) + m(Code.W);
                    i -= j11;
                    while (j11-- > 0) {
                        if (n28 == n27) {
                            Code.af = 24;
                            throw Code.Code;
                        }
                        n28 += y((int)z13[n28]);
                    }
                    final int n29 = n28;
                    while (i-- > 0) {
                        if (n28 == n27) {
                            Code.af = 24;
                            throw Code.Code;
                        }
                        n28 += y((int)z13[n28]);
                    }
                    i = n28 - n29;
                    final int n30 = n29 - (Code.W & 0x3FFF);
                    k(i);
                    Code(Code.W, n30, Code.Z, Code.S, i);
                    h();
                    Code(Code.V);
                    Code.V = 0;
                    Code.W = 0;
                    break;
                }
                case -16: {
                    a(Code.M = h(), h());
                    Code.M = 0;
                    break;
                }
                case -38: {
                    final int h2 = h();
                    i = j();
                    final int n31 = h2;
                    if (h2 != 0 && !I(n31, i)) {
                        l = l(n31 - 1);
                        new StringBuffer().append("unknown(" + l + ")" + "@" + Integer.toString(n31, 16) + " cannot be cast to ").append("unknown(").append(i).append(")");
                        Code.af = 18;
                        throw Code.Code;
                    }
                    break;
                }
                case -17: {
                    i = h();
                    i();
                    Code(Code(i)[(i & 0x7FFF) + 1 + j()]);
                    break;
                }
                case -20: {
                    i = h();
                    i();
                    Code(i)[(i & 0x7FFF) + 1 + j()] = h();
                    break;
                }
                case -18: {
                    I(C(h(), h()));
                    break;
                }
                case -19: {
                    i = h();
                    final int j12 = j();
                    final int l6 = l(i);
                    if (j12 <= l(i - 3) - 1) {
                        Z(Code(i), (i & 0x7FFF) + 1 + l6, j12 - l6);
                        a(i, j12);
                        Code(i);
                        break;
                    }
                    Code.Q = i;
                    i = B(Math.max(j12, l6 << 1), j12);
                    I(Code.Q, 1, i, 1, l6);
                    Code(i);
                    Code.Q = 0;
                    break;
                }
                case -21: {
                    final int j13 = j();
                    Code(B(j13, j13));
                    break;
                }
                case -29:
                case -22: {
                    i = j();
                    final int j14 = j();
                    final int j15 = j();
                    final int h3 = h();
                    final int h4;
                    B(l(h4 = h()), j15, i);
                    B(l(h3), j14, i);
                    I(h4 + 1, j15, h3 + 1, j14, i);
                    break;
                }
                case -30:
                case -23: {
                    i = j();
                    final int j16 = j();
                    final int j17 = j();
                    int h5 = h();
                    int h6 = h();
                    int code = 1;
                    B(l(h6), j17, i);
                    B(l(h5), j16, i);
                    if (i > 0 && (h6 != h5 || j17 != j16)) {
                        ++h6;
                        ++h5;
                        code = (Code(Code(h6), j17 + (h6 & 0x7FFF), Code(h5), j16 + (h5 & 0x7FFF), i) ? 1 : 0);
                    }
                    I(code);
                    break;
                }
                case -41: {
                    final int n32 = i = j();
                    final int b = B(n32, n32);
                    System.arraycopy(Code.J, Code.D - i, Code(b), (b & 0x7FFF) + 1, i);
                    Code.D -= i;
                    Code(b);
                    break;
                }
                case -24: {
                    i = h();
                    i();
                    I(Code(i)[(i & 0x7FFF) + 1 + j()]);
                    break;
                }
                case -27: {
                    i = h();
                    final int j18 = j();
                    i();
                    Code(i)[(i & 0x7FFF) + 1 + j()] = j18;
                    break;
                }
                case -25: {
                    I(C(h(), j()));
                    break;
                }
                case -26: {
                    Code(h(), j(), true);
                    Code(m());
                    break;
                }
                case -28: {
                    final int j19 = j();
                    Z(j19, j19);
                    Code(m());
                    break;
                }
                case -42: {
                    final int n33 = i = j();
                    Z(n33, n33);
                    System.arraycopy(Code.B, Code.E - i, Code.Code, Code.Code, i);
                    Code.E -= i;
                    Code(m());
                    break;
                }
                case -31: {
                    i = h();
                    I((int)I(i)[i(i) + j()]);
                    break;
                }
                case -34: {
                    i = h();
                    final byte b2 = (byte)j();
                    i();
                    I(i)[i(i) + j()] = b2;
                    break;
                }
                case -32: {
                    i = h();
                    final int j20 = j();
                    final byte[] i2 = I(i);
                    final int i3 = i(i);
                    i = l(i);
                    for (int n34 = 0; n34 < i; ++n34) {
                        if (i2[i3 + n34] == j20) {
                            I(n34);
                            break Label_13807;
                        }
                    }
                    I(-1);
                    break;
                }
                case -33: {
                    i = h();
                    final int j21 = j();
                    final int l7 = l(i);
                    if (j21 <= m(l(i + 1))) {
                        final int l8 = l(i + 1);
                        c(Z(l8), (l8 & 0x3FFF) + l7, j21 - l7);
                        a(i, j21);
                        break;
                    }
                    Code.Q = i;
                    k(Math.max(j21, l7 << 1));
                    Code(l(Code.Q + 1), 0, Code.Z, Code.S, l7);
                    final int q = Code.Q;
                    i = Code.R;
                    a(q + 1, i);
                    a(Code.Q, j21);
                    Code.Q = 0;
                    Code.R = 0;
                    break;
                }
                case -35: {
                    f(j());
                    Code(n());
                    break;
                }
                case -36: {
                    i = j();
                    final int j22 = j();
                    final int j23 = j();
                    final int h7 = h();
                    Code(l(h() + 1), j23, I(h7), i(h7) + j22, i);
                    break;
                }
                case -37: {
                    i = j();
                    final int j24 = j();
                    final int j25 = j();
                    final int h8 = h();
                    final int h9 = h();
                    int i4 = 1;
                    if (i > 0 && (h9 != h8 || j25 != j24)) {
                        final int l9 = l(h9 + 1);
                        final int l10 = l(h8 + 1);
                        i4 = (I(Z(l9), j25 + (l9 & 0x3FFF), Z(l10), j24 + (l10 & 0x3FFF), i) ? 1 : 0);
                    }
                    I(i4);
                    break;
                }
                case -43: {
                    f(i = j());
                    for (int n35 = Code.E - i; n35 < Code.E; ++n35) {
                        Code.Z[Code.S++] = (byte)Code.B[n35];
                    }
                    Code.E -= i;
                    Code(n());
                    break;
                }
                case -44: {
                    final int n36 = (i = i()) / 2;
                    final int b3;
                    final int[] code2 = Code(b3 = B(n36, n36));
                    int n37 = (b3 & 0x7FFF) + 1;
                    for (i = Code.D - i; i < Code.D; i += 2) {
                        code2[n37++] = Code.J[i];
                    }
                    Code(b3);
                    break;
                }
                case -46: {
                    final int n38 = (i = j()) / 2;
                    Z(n38, n38);
                    for (int n39 = Code.E - i; n39 < Code.E; n39 += 2) {
                        Code.Code[Code.Code++] = Code.B[n39];
                    }
                    I(i);
                    Code(m());
                    break;
                }
                case -45: {
                    final int n40 = (i = j()) / 2;
                    final int b4 = B(n40, n40);
                    final int h10 = h();
                    final int[] code3 = Code(b4);
                    int n41 = (b4 & 0x7FFF) + 1;
                    for (int n42 = Code.D - i + 1; n42 < Code.D; n42 += 2) {
                        code3[n41++] = Code.J[n42];
                    }
                    Code.D -= i;
                    Code(h10);
                    Code(b4);
                    break;
                }
                case -47: {
                    final int n43 = (i = j()) / 2;
                    Z(n43, n43);
                    for (int n44 = Code.E - i + 1; n44 < Code.E; n44 += 2) {
                        Code.Code[Code.Code++] = Code.B[n44];
                    }
                    Code.E -= i;
                    Code(m());
                    break;
                }
                default: {
                    Label_13633: {
                        switch (i) {
                            case -50: {
                                final int j26 = j();
                                final int j27 = j();
                                final int j28 = j();
                                i = j();
                                Code.Code.Code(j26, j27, j28, i);
                                break Label_13807;
                            }
                            case -51: {
                                Code.aC = h();
                                break Label_13807;
                            }
                            case -55: {
                                I(((B)I(h())).Code.getWidth());
                                break Label_13807;
                            }
                            case -56: {
                                I(((B)I(h())).Code.getHeight());
                                break Label_13807;
                            }
                            case -57: {
                                I(((B)I(h())).Code());
                                break Label_13807;
                            }
                            case -58: {
                                final B b5 = (B)I(h());
                                final boolean b6 = B();
                                final int j29 = j();
                                final int j30 = j();
                                final int j31 = j();
                                final int j32 = j();
                                final int j33 = j();
                                final int j34 = j();
                                final int j35 = j();
                                final int j36 = j();
                                final int j37 = j();
                                final int j38 = j();
                                i = j();
                                Code(Code(b5.Code(i, j38, j37, j36, j35, j34, j33, j32, j31, j30, j29, b6)));
                                break Label_13807;
                            }
                            case -52: {
                                Code(Code(Code(j(), j())));
                                break Label_13807;
                            }
                            case -53: {
                                Code(Code(Code(h(), j(), j(), B())));
                                break Label_13807;
                            }
                            case -54: {
                                Code(Code(I(j(), B())));
                                break Label_13807;
                            }
                            case -60: {
                                I(((J)I(h())).b());
                                break Label_13807;
                            }
                            case -61: {
                                I(((J)I(h())).I(C(h())));
                                break Label_13807;
                            }
                            case -62: {
                                final int h11 = h();
                                final int j39 = j();
                                final int j40 = j();
                                i = h();
                                I(((J)Code(h11)).I(Code(i, j39, j40)));
                                break Label_13807;
                            }
                            case -63: {
                                final int h12 = h();
                                h();
                                final int j41 = j();
                                j();
                                final int j42 = j();
                                i = h();
                                final int n45 = j42;
                                final int n46 = j41;
                                final J n47 = (J)Code(h12);
                                final char[] i5 = I(i);
                                d(0);
                                Code(i5, n45, n46, 0, n47, null);
                                Code(l());
                                break Label_13807;
                            }
                            case -64: {
                                final int h13 = h();
                                final int h14 = h();
                                final boolean b7 = B();
                                final int j43 = j();
                                i = h();
                                final int n48 = j43;
                                final boolean b8 = b7;
                                final int n49 = h14;
                                final J n50 = (J)Code(h13);
                                String code4;
                                int i6;
                                if (n49 != 0) {
                                    code4 = Code(n49);
                                    i6 = n50.I(code4);
                                }
                                else {
                                    code4 = "";
                                    i6 = 0;
                                }
                                final char[] i7;
                                final int code5 = Code(i7 = I(i), b8 ^ true, n48, i6, n50);
                                Code((!b8 && code5 < i7.length) ? Code(new String(i7, 0, code5) + code4) : ((b8 && code5 > 0) ? Code(code4 + new String(i7, code5, i7.length - code5)) : i));
                                break Label_13807;
                            }
                            case -65: {
                                Code(Code(h(), h(), j(), j(), j(), h()));
                                break Label_13807;
                            }
                            case -59: {
                                final int n51 = 43;
                                final int j44 = j();
                                final int j45 = j();
                                i = j();
                                final int n52 = j45;
                                final int n53 = j44;
                                if (Code.j == null) {
                                    (Code.j = new int[4])[0] = (Code.ac ? 0 : Code.D.b());
                                    Code.j[1] = Code(64, 0, 8).b();
                                    Code.j[2] = Code(64, 0, 0).b();
                                    Code.j[3] = Code(64, 0, 16).b();
                                }
                                int n55;
                                final int n54 = (i <= Code.i[0] && !Code.ac) ? (n55 = 128) : ((i <= Code.i[1]) ? (n55 = 8) : ((i <= Code.i[2]) ? (n55 = 0) : (n55 = 16)));
                                i = n55;
                                Code(Code(n51, (n54 == 128) ? (((n52 & 0x1) != 0x0) ? Code.E : Code.D) : Code(n53, n52, i)));
                                break Label_13807;
                            }
                            case -66: {
                                final int j46 = j();
                                final int j47 = j();
                                final int j48 = j();
                                i = j();
                                final int n56 = j48;
                                final int n57 = j47;
                                final int n58 = j46;
                                Code.i[0] = i;
                                Code.i[1] = n56;
                                Code.i[2] = n57;
                                Code.i[3] = n58;
                                break Label_13807;
                            }
                            case -67: {
                                Code.v = true;
                                throw Code.Code;
                            }
                            case -70: {
                                t(0);
                                System.gc();
                                break Label_13807;
                            }
                            case -71: {
                                Code.Code.J(false);
                                break Label_13807;
                            }
                            case -72: {
                                Code(Code(Runtime.getRuntime().freeMemory()));
                                break Label_13807;
                            }
                            case -73: {
                                Code(Code(System.currentTimeMillis()));
                                break Label_13807;
                            }
                            case -74: {
                                I((int)System.currentTimeMillis());
                                break Label_13807;
                            }
                            case -75: {
                                final TimeZone default1;
                                final Calendar instance = Calendar.getInstance(default1 = TimeZone.getDefault());
                                Code(Code((long)default1.getOffset(1, instance.get(1), instance.get(2), instance.get(5), instance.get(7), 0)));
                                break Label_13807;
                            }
                            case -76: {
                                Code.aB = j();
                                Code.i = true;
                                break Label_13807;
                            }
                            case -77: {
                                Code(e(c()));
                                break Label_13807;
                            }
                            case -78: {
                                Code.B = C(h());
                                break Label_13807;
                            }
                            case -79: {
                                Code(e(d()));
                                break Label_13807;
                            }
                            case -80: {
                                Code.C = C(h());
                                break Label_13807;
                            }
                            case -81: {
                                I((Code.Code.J() ? 1 : 0) * 3 + 1);
                                break Label_13807;
                            }
                            case -82: {
                                B();
                                break Label_13807;
                            }
                            case -83: {
                                I(0);
                                break Label_13807;
                            }
                            case -84: {
                                C(h());
                                C(h());
                                break Label_13807;
                            }
                            case -85: {
                                C(h());
                                break Label_13807;
                            }
                            case -86: {
                                Code(e(Code(h(), h(), C(h()))));
                                break Label_13807;
                            }
                            case -87: {
                                Code(e(I(j(), j(), h())));
                                break Label_13807;
                            }
                            case -88: {
                                Code(a(C(h())));
                                break Label_13807;
                            }
                            case -89: {
                                final int j49 = j();
                                final int j50 = j();
                                final int h15 = h();
                                final int j51 = j();
                                final int j52 = j();
                                i = h();
                                final int n59 = j52;
                                final int n60 = j51;
                                final int n61 = h15;
                                final int n62 = j50;
                                final int n63 = j49;
                                B(i, n59);
                                final Code code6 = new Code(Code.Z, Code.S, n60);
                                B(n61, n62);
                                code6.B(Code.Z, Code.S, n63);
                                final byte[] array = new byte[32];
                                code6.C(array, 0, array.length);
                                Code(Code(array));
                                break Label_13807;
                            }
                            case -90: {
                                I((int)(B(j()) ? 1 : 0));
                                break Label_13807;
                            }
                            case -91: {
                                final String b9;
                                if ((b9 = B(j())) != null) {
                                    c(b9);
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -92: {
                                final String b10;
                                I(((Code.J = (((b10 = B(j())) != null) ? I(b10) : null)) == null) ? 0 : Code.J.size());
                                break Label_13807;
                            }
                            case -93: {
                                Code.L = h();
                                int n64 = 0;
                                Label_6050: {
                                    if (Code.J != null && Code.J.size() > 0) {
                                        final Code code7 = Code.J.elementAt(0);
                                        Code.J.removeElementAt(0);
                                        a(Code.L, Code(code7.b));
                                        a(Code.L + 1, Code(code7.d));
                                        a(Code.L + 2, Code(code7.f));
                                        final int l11 = Code.L;
                                        i = code7.az;
                                        a(l11 + 3, i);
                                        if (Code.J.size() > 0) {
                                            Code.L = 0;
                                            n64 = 1;
                                            break Label_6050;
                                        }
                                    }
                                    Code.J = null;
                                    Code.L = 0;
                                    n64 = 0;
                                }
                                I(n64);
                                break Label_13807;
                            }
                            case -94: {
                                Code(e(i(C(h()))));
                                break Label_13807;
                            }
                            case -95: {
                                Code(e(((Code)I(h())).b));
                                break Label_13807;
                            }
                            case -96: {
                                Code(e(((Code)I(h())).d));
                                break Label_13807;
                            }
                            case -97: {
                                I((int)(((Code)I(h())).j() ? 1 : 0));
                                break Label_13807;
                            }
                            case -98: {
                                I(h());
                                I(1);
                                break Label_13807;
                            }
                            case -99: {
                                I((int)(((Code)I(h())).k() ? 1 : 0));
                                break Label_13807;
                            }
                            case -100: {
                                I(h());
                                i = j();
                                Code(e(Code.I.Z(i)));
                                break Label_13807;
                            }
                            case -101: {
                                Code(e(Code.I.Code((Code)I(h()), C(h()))));
                                break Label_13807;
                            }
                            case -102: {
                                Code(Z((Code)I(h())));
                                break Label_13807;
                            }
                            case -103: {
                                I(h());
                                C(h());
                                C(h());
                                I(1);
                                break Label_13807;
                            }
                            case -104: {
                                I(h());
                                h();
                                B();
                                C(h());
                                C(h());
                                Code(0);
                                break Label_13807;
                            }
                            case -105: {
                                final int n65 = 52;
                                I(h());
                                Code(Code(n65, (Object)null));
                                break Label_13807;
                            }
                            case -106: {
                                Code(Code(54, new Code((Code)I(h()), C(h()), C(h()))));
                                break Label_13807;
                            }
                            case -107: {
                                Code(Code(((Code)I(h())).I(C(h()))));
                                break Label_13807;
                            }
                            case -108: {
                                I((int)(((Code)I(h())).Z(C(h())) ? 1 : 0));
                                break Label_13807;
                            }
                            case -109: {
                                I((int)(((Code)I(h())).Code(C(h())) ? 1 : 0));
                                break Label_13807;
                            }
                            case -110: {
                                I((int)(((Code)I(h())).I(C(h())) ? 1 : 0));
                                break Label_13807;
                            }
                            case -111: {
                                I(((Code)I(h())).Z(C(h())));
                                break Label_13807;
                            }
                            case -112: {
                                final Code code8 = (Code)I(h());
                                i = h();
                                final Code code9 = code8;
                                int n66;
                                if (!code8.i()) {
                                    n66 = 0;
                                }
                                else {
                                    final Code code10;
                                    final Object[] array2;
                                    final int n67 = (int)(array2 = (Object[])((code10 = code9).i() ? ((Object[])code10.Code.elementAt(code10.az++)) : null))[1] & 0x4;
                                    a((Code.O = i) + 2, (n67 | -n67) >>> 31);
                                    a(Code.O, Code((String)array2[2]));
                                    final int o = Code.O;
                                    i = Code((String)array2[0]);
                                    a(o + 1, i);
                                    a(Code.O + 3, 0);
                                    a(Code.O + 4, 0);
                                    Code.O = 0;
                                    n66 = 1;
                                }
                                I(n66);
                                break Label_13807;
                            }
                            case -113: {
                                final Code code11;
                                if ((code11 = (Code)I(h())) != null) {
                                    code11.close();
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -114: {
                                I((int)(Code.az ? 1 : 0));
                                break Label_13807;
                            }
                            case -115: {
                                Code(Code(53, Code.az ? Code.I : null));
                                break Label_13807;
                            }
                            case -116: {
                                C(h());
                                I(0);
                                break Label_13807;
                            }
                            case -117: {
                                I(b(C(h())));
                                break Label_13807;
                            }
                            case -118: {
                                I(Code.Code.checkPermission("javax.microedition.io.Connector.file.read"));
                                break Label_13807;
                            }
                            case -119: {
                                I(Code.Code.checkPermission("javax.microedition.io.Connector.file.write"));
                                break Label_13807;
                            }
                            case -123: {
                                final a a = (a)I(h());
                                final int j53 = j();
                                final int j54 = j();
                                i = h();
                                final int n68 = j54;
                                final int n69 = j53;
                                final a a2 = a;
                                B(i, n68);
                                I(a2.read(Code.Z, Code.S, n69));
                                break Label_13807;
                            }
                            case -124: {
                                I(((a)I(h())).Code(j()));
                                break Label_13807;
                            }
                            case -125: {
                                final a a3 = (a)I(h());
                                try {
                                    a3.close();
                                }
                                finally {}
                                break Label_13807;
                            }
                            case -126: {
                                I(((a)I(h())).j());
                                break Label_13807;
                            }
                            case -127: {
                                I(((a)I(h())).k());
                                break Label_13807;
                            }
                            case -128: {
                                I(((a)I(h())).l());
                                break Label_13807;
                            }
                            case -129: {
                                Code(Code(((a)I(h())).I()));
                                break Label_13807;
                            }
                            case -130: {
                                final a a4;
                                final int k2;
                                int ad;
                                if ((k2 = (a4 = (a)Code(h())).k()) < 0) {
                                    ad = 0;
                                }
                                else if (k2 == 0) {
                                    ad = Code.ad;
                                }
                                else {
                                    k(k2);
                                    a4.read(Code.Z, Code.S, k2);
                                    if (!I(Code.Z, Code.S, k2)) {
                                        Code.R = 0;
                                        Code.af = 25;
                                        throw Code.Code;
                                    }
                                    i = b(3, Code.p);
                                    a(i + 1, Code.R);
                                    a(i + 2, J(Code.R, m(Code.R)));
                                    Code.V = i;
                                    h(Code.aa);
                                    i = Code.V;
                                    Code.V = 0;
                                    Code.R = 0;
                                    ad = i;
                                }
                                Code(ad);
                                break Label_13807;
                            }
                            case -120: {
                                Code(w(j()));
                                break Label_13807;
                            }
                            case -121: {
                                Code(Code(57, a.Code(j())));
                                break Label_13807;
                            }
                            case -122: {
                                Code(Code(57, Code(C(h()))));
                                break Label_13807;
                            }
                            case -132: {
                                Code((I)I(h()), j(), j(), h());
                                break Label_13807;
                            }
                            case -133: {
                                final I n70 = (I)I(h());
                                try {
                                    n70.close();
                                }
                                finally {}
                                break Label_13807;
                            }
                            case -134: {
                                ((I)I(h())).Code(j());
                                break Label_13807;
                            }
                            case -135: {
                                ((I)I(h())).I(j());
                                break Label_13807;
                            }
                            case -136: {
                                ((I)I(h())).Z(j());
                                break Label_13807;
                            }
                            case -137: {
                                ((I)I(h())).Code(Code(h()));
                                break Label_13807;
                            }
                            case -138: {
                                final int h16 = h();
                                i = h();
                                final I n71 = (I)Code(h16);
                                final int l12;
                                Code.Z = Z(l12 = l(i + 1));
                                Code.S = (l12 & 0x3FFF);
                                i = m(l(i + 1));
                                n71.I(i);
                                n71.write(Code.Z, Code.S, i);
                                break Label_13807;
                            }
                            case -131: {
                                Code(Code(58, Code(C(h()))));
                                break Label_13807;
                            }
                            case -139: {
                                final int n72 = 57;
                                final String c4 = C(h());
                                i = j();
                                Code(Code(n72, a.Code(i, c4)));
                                break Label_13807;
                            }
                            case -140: {
                                Code(Code(C(h()), j()));
                                break Label_13807;
                            }
                            case -141: {
                                final int h17 = h();
                                final String c5 = C(h());
                                i = j();
                                Code((Runnable)new Code(I(i), Code(i, c5), I(h17)));
                                I(1);
                                break Label_13807;
                            }
                            case -142: {
                                final int n73 = 58;
                                final String c6 = C(h());
                                i = j();
                                Code(Code(n73, I.Code(i, c6)));
                                break Label_13807;
                            }
                            case -143: {
                                final int h18 = h();
                                final String c7 = C(h());
                                i = j();
                                final String s = c7;
                                final int n74 = h18;
                                final int l13 = l(h18);
                                B(n74, 0);
                                final String i8 = I(i);
                                final String code12 = Code(i, s);
                                final Code j55 = Code.J;
                                final String s2 = i8;
                                final String s3 = code12;
                                final byte[] z14 = Code.Z;
                                final int s4 = Code.S;
                                final int n75 = l13;
                                try {
                                    j55.Code(s2, s3, z14, s4, n75);
                                }
                                finally {}
                                break Label_13807;
                            }
                            case -144: {
                                final String c8 = C(h());
                                i = j();
                                final String s5 = c8;
                                final String i9 = I(i);
                                final String code13 = Code(i, s5);
                                final Code j56 = Code.J;
                                final String s6 = i9;
                                final Code code14 = j56;
                                RecordStore code15 = null;
                                final Code code16 = code14;
                                final String s7 = s6;
                                final boolean b11 = true;
                                Code code17;
                                RecordStore recordStore;
                                boolean b12;
                                try {
                                    code15 = code16.Code(s7, b11);
                                    if ((i = code14.Code(code15, code13)) > 0) {
                                        code15.deleteRecord(i);
                                    }
                                    code17 = code14;
                                    recordStore = code15;
                                    b12 = true;
                                    code17.Code(recordStore, b12);
                                    break Label_13807;
                                }
                                catch (RecordStoreException ex) {
                                    throw new IOException(((Throwable)ex).getMessage());
                                }
                                finally {
                                    code14.Code(code15, true);
                                }
                                try {
                                    code17.Code(recordStore, b12);
                                }
                                finally {
                                    break Label_13807;
                                }
                            }
                            case -145: {
                                I((int)(Code(C(h()), j()) ? 1 : 0));
                                break Label_13807;
                            }
                            case -146: {
                                final String i10 = I(i = j());
                                final Code j57 = Code.J;
                                RecordStore code18 = null;
                                final Code code19 = j57;
                                final String s8 = i10;
                                final boolean b13 = true;
                                Code code20;
                                RecordStore recordStore2;
                                boolean b14;
                                try {
                                    code18 = code19.Code(s8, b13);
                                    j57.Code(code18, null, i, 2);
                                    code20 = j57;
                                    recordStore2 = code18;
                                    b14 = true;
                                    code20.Code(recordStore2, b14);
                                    break Label_13807;
                                }
                                catch (RecordStoreException ex2) {
                                    throw new IOException(((Throwable)ex2).getMessage());
                                }
                                finally {
                                    j57.Code(code18, true);
                                }
                                try {
                                    code20.Code(recordStore2, b14);
                                }
                                finally {
                                    break Label_13807;
                                }
                            }
                            case -147: {
                                I((int)((Code.C != null) ? 1 : 0));
                                break Label_13807;
                            }
                            case -148: {
                                final byte[] c9 = Code.C;
                                Code.C = null;
                                Code(Code(c9));
                                break Label_13807;
                            }
                            case -149: {
                                Code.C = Code(h());
                                break Label_13807;
                            }
                            case -151: {
                                ((C)I(h())).I();
                                break Label_13807;
                            }
                            case -150: {
                                final int j58 = j();
                                final int h19 = h();
                                final boolean b15 = B();
                                final int j59 = j();
                                final String c10 = C(h());
                                final int h20 = h();
                                final String c11 = C(h());
                                final int n76 = h20;
                                final String s9 = c10;
                                final int n77 = j59;
                                final boolean b16 = b15;
                                final int n78 = h19;
                                final int n79 = j58;
                                int n80;
                                if (n77 == 1) {
                                    n80 = 1;
                                }
                                else {
                                    n80 = 0;
                                }
                                final C c12;
                                (c12 = new C(c11, n78, n76, s9, b16, n79, n80)).start();
                                Code(Code(61, 1, c12));
                                break Label_13807;
                            }
                            case -153: {
                                ((C)I(h())).Code();
                                break Label_13807;
                            }
                            case -154: {
                                ((C)I(h())).I();
                                break Label_13807;
                            }
                            case -152: {
                                final int n81 = 62;
                                final C c13;
                                (c13 = new C(C(h()), h(), h())).start();
                                Code(Code(n81, c13));
                                break Label_13807;
                            }
                            case -155: {
                                I(((Code)I(h())).az);
                                break Label_13807;
                            }
                            case -156: {
                                I(((Code)I(h())).C);
                                break Label_13807;
                            }
                            case -157: {
                                I((int)(((Code)I(h())).d() ? 1 : 0));
                                break Label_13807;
                            }
                            case -158: {
                                final Code code21;
                                Code(e((code21 = (Code)I(h())).d() ? code21.b : ""));
                                break Label_13807;
                            }
                            case -159: {
                                I(h());
                                I(0);
                                break Label_13807;
                            }
                            case -160: {
                                I((int)(((Code)I(h())).e() ? 1 : 0));
                                break Label_13807;
                            }
                            case -161: {
                                final Code code22;
                                Code(e((code22 = (Code)I(h())).e() ? code22.c : ""));
                                break Label_13807;
                            }
                            case -162: {
                                I((int)(((Code)I(h())).f() ? 1 : 0));
                                break Label_13807;
                            }
                            case -163: {
                                final Code code23;
                                I((int)(((code23 = (Code)I(h())).f() && !code23.C.c(code23.b).equals("")) ? 1 : 0));
                                break Label_13807;
                            }
                            case -164: {
                                I(h());
                                I(0);
                                break Label_13807;
                            }
                            case -165: {
                                I((int)(((Code)I(h())).g() ? 1 : 0));
                                break Label_13807;
                            }
                            case -166: {
                                final int n82 = ((Code)I(h())).r() - 102;
                                I((n82 | -n82) >>> 31 ^ 0x1);
                                break Label_13807;
                            }
                            case -167: {
                                final int n83 = ((Code)I(h())).r() - 97;
                                I((n83 | -n83) >>> 31 ^ 0x1);
                                break Label_13807;
                            }
                            case -168: {
                                final Code code24;
                                Code(e((code24 = (Code)I(h())).f() ? code24.C.c(code24.b) : null));
                                break Label_13807;
                            }
                            case -169: {
                                final Code code25 = (Code)I(h());
                                i = j();
                                final Code code26 = code25;
                                switch (i) {
                                    case 2: {
                                        final Code code27;
                                        if ((code27 = code26).e()) {
                                            Code((Runnable)new Code(code27, false));
                                            break Label_13807;
                                        }
                                        break Label_13807;
                                    }
                                    case 4: {
                                        final Code code28;
                                        if ((code28 = code26).f()) {
                                            String a5 = code28.C.c(code28.b);
                                            if (code28.g()) {
                                                a5 = C(a5);
                                            }
                                            Code.a = a5;
                                            break Label_13807;
                                        }
                                        break Label_13807;
                                    }
                                    case 5: {
                                        final Code code29;
                                        if ((code29 = code26).f()) {
                                            String a6 = code29.C.c(code29.b);
                                            if (code29.g()) {
                                                a6 = C(a6);
                                            }
                                            Code.a = a6;
                                            code29.C.I(code29.b, "");
                                            break Label_13807;
                                        }
                                        break Label_13807;
                                    }
                                    case 6: {
                                        final Code code30;
                                        if ((code30 = code26).f()) {
                                            code30.C.I(code30.b, Code.a);
                                            break Label_13807;
                                        }
                                        break Label_13807;
                                    }
                                }
                                break;
                            }
                            case -171: {
                                Code(((Code)I(h())).C.P());
                                break Label_13807;
                            }
                            case -172: {
                                final Code code31 = (Code)I(h());
                                i = (B() ? 1 : 0);
                                code31.C.d((boolean)(i != 0));
                                break Label_13807;
                            }
                            case -173: {
                                final Code code32 = (Code)I(h());
                                j();
                                j();
                                h();
                                B();
                                B();
                                B();
                                j();
                                final int h21 = h();
                                final int j60 = j();
                                final int j61 = j();
                                i = h();
                                code32.C.a(i, j61, j60, h21);
                                break Label_13807;
                            }
                            case -174: {
                                final Code code33 = (Code)I(h());
                                i = h();
                                Code(code33.C.R(i));
                                break Label_13807;
                            }
                            case -175: {
                                final Code code34 = (Code)I(h());
                                final int h22 = h();
                                j();
                                j();
                                h();
                                B();
                                B();
                                B();
                                j();
                                final int h23 = h();
                                final int j62 = j();
                                final int j63 = j();
                                i = h();
                                final int n84 = j63;
                                final int n85 = j62;
                                final int n86 = h23;
                                final int n87 = h22;
                                final Code code35 = code34;
                                code34.C.a(i, n84, n85, n86);
                                Code(code35.C.R(n87));
                                break Label_13807;
                            }
                            case -177: {
                                ((Code)I(h())).y();
                                break Label_13807;
                            }
                            case -178: {
                                final Code code36 = (Code)I(h());
                                final int h24 = h();
                                i = h();
                                I((int)(code36.C.C(h24, i) ? 1 : 0));
                                break Label_13807;
                            }
                            case -179: {
                                ((Code)I(h())).D();
                                break Label_13807;
                            }
                            case -180: {
                                final Code code37 = (Code)I(h());
                                i = j();
                                I((int)code37.C.f[i]);
                                break Label_13807;
                            }
                            case -181: {
                                final int h25 = h();
                                i = j();
                                final Code c14;
                                Code(((i = (c14 = ((Code)Code(h25)).C).Z(i, 't')) == 0) ? 0 : c14.K(i));
                                break Label_13807;
                            }
                            case -182: {
                                final int h26 = h();
                                i = j();
                                final Code c15;
                                Code(((i = (c15 = ((Code)Code(h26)).C).Z(i, 'o')) == 0) ? 0 : c15.L(i));
                                break Label_13807;
                            }
                            case -183: {
                                final int h27 = h();
                                i = j();
                                final Code c16 = ((Code)Code(h27)).C;
                                final int n88 = i;
                                final Code code38 = c16;
                                i = c16.F(i);
                                final int n89 = n88 + (2 + 10 * code38.f[n88 + 1]);
                                Code((i != 78) ? code38.L(n89) : code38.K(n89 + 2 + 2 + 3));
                                break Label_13807;
                            }
                            case -184: {
                                final Code code39 = (Code)I(h());
                                i = j();
                                final Code c17 = code39.C;
                                i += 2 + 10 * c17.f[i + 1];
                                I(c17.E(i + 2));
                                break Label_13807;
                            }
                            case -185: {
                                final Code code40 = (Code)I(h());
                                i = j();
                                final Code c18 = code40.C;
                                i += 2 + 10 * c18.f[i + 1];
                                I(c18.D(i + 4));
                                break Label_13807;
                            }
                            case -186: {
                                final Code code41 = (Code)I(h());
                                i = j();
                                final Code c19 = code41.C;
                                int n90 = 0;
                                c19.cD = i;
                                if (c19.O() == 67) {
                                    n90 = 16;
                                }
                                c19.cD += 10 * c19.O();
                                c19.cD += c19.N();
                                I(n90 | c19.Q());
                                break Label_13807;
                            }
                            case -187: {
                                final Code code42 = (Code)I(h());
                                final int j64 = j();
                                final int j65 = j();
                                i = h();
                                Code(code42.C.d(j64, j65, i));
                                break Label_13807;
                            }
                            case -188: {
                                final Code code43 = (Code)I(h());
                                final int j66 = j();
                                final int j67 = j();
                                final int h28 = h();
                                i = j();
                                Code(code43.C.Code(j66, j67, h28, i));
                                break Label_13807;
                            }
                            case -189: {
                                final Code code44 = (Code)I(h());
                                i = j();
                                I(code44.C.S(i));
                                break Label_13807;
                            }
                            case -190: {
                                ((Code)I(h())).E();
                                break Label_13807;
                            }
                            case -191: {
                                final int n91 = 67;
                                final Code code45 = (Code)I(h());
                                i = j();
                                Code(Code(n91, code45.C.Z(i)));
                                break Label_13807;
                            }
                            case -192: {
                                final Code code46 = (Code)I(h());
                                final int j68 = j();
                                i = h();
                                Code(code46.C.i(j68, i));
                                break Label_13807;
                            }
                            case -193: {
                                final Code code47 = (Code)I(h());
                                i = j();
                                Code(e(code47.C.b(i)));
                                break Label_13807;
                            }
                            case -194: {
                                final Code code48 = (Code)I(h());
                                i = j();
                                Code(e(code48.C.c(i)));
                                break Label_13807;
                            }
                            case -195: {
                                final int n92 = 43;
                                final Code code49 = (Code)I(h());
                                j();
                                if ((i = code49.b) >= 6) {
                                    i = 0;
                                }
                                Code(Code(n92, Code.Code[i]));
                                break Label_13807;
                            }
                            case -196: {
                                final Code code50 = (Code)I(h());
                                i = j();
                                Code(e(code50.C.d(i)));
                                break Label_13807;
                            }
                            case -197: {
                                ((Code)I(h())).Code(C(h()), j(), C(h()));
                                break Label_13807;
                            }
                            case -198: {
                                final Code code51 = (Code)I(h());
                                i = h();
                                code51.C.U(i);
                                break Label_13807;
                            }
                            case -199: {
                                final Code code52 = (Code)I(h());
                                i = j();
                                final Code c20 = code52.C;
                                String s10 = null;
                                Label_9539: {
                                    switch (i) {
                                        case 0: {
                                            if (c20.r != null && c20.K.J.containsKey(c20.r)) {
                                                s10 = c20.q;
                                                break Label_9539;
                                            }
                                            break;
                                        }
                                        case 1: {
                                            s10 = c20.r;
                                            break Label_9539;
                                        }
                                    }
                                    s10 = null;
                                }
                                Code(e(s10));
                                break Label_13807;
                            }
                            case -200: {
                                final Code code53 = (Code)I(h());
                                Z(4, 4);
                                code53.Code(Code.Code, Code.Code);
                                Code(m());
                                break Label_13807;
                            }
                            case -202: {
                                final Code code54 = (Code)I(h());
                                final int j69 = j();
                                final int j70 = j();
                                i = h();
                                Code(Code(63, 1, code54.C.Z(j70, j69, i)));
                                break Label_13807;
                            }
                            case -203: {
                                I(((Code)I(h())).C.C);
                                break Label_13807;
                            }
                            case -204: {
                                I(((Code)I(h())).C.bm);
                                break Label_13807;
                            }
                            case -205: {
                                I(((Code)I(h())).C.ck);
                                break Label_13807;
                            }
                            case -206: {
                                int n93 = switch (((Code)I(h())).C.I) {
                                    case 68,  79 -> 0;
                                    default -> 2;
                                };
                                I(n93);
                                break Label_13807;
                            }
                            case -207: {
                                I(((Code)I(h())).C.cm);
                                break Label_13807;
                            }
                            case -208: {
                                I(((Code)I(h())).C.ct);
                                break Label_13807;
                            }
                            case -209: {
                                I(((Code)I(h())).C.bh);
                                break Label_13807;
                            }
                            case -217: {
                                final Code code55 = (Code)I(h());
                                final String c21 = C(h());
                                final String c22 = C(h());
                                final String s11 = c21;
                                final Code c23 = code55.C;
                                final String s12 = c22;
                                final String s13 = s11;
                                final String s14 = s12;
                                final Code code56 = c23;
                                if (c23.K.B == null) {
                                    code56.K.B = new Hashtable();
                                }
                                code56.K.B.put(s13, new Object[] { s14, new Integer((int)Code.I.Code(s14)) });
                                break Label_13807;
                            }
                            case -218: {
                                final Code code57 = (Code)I(h());
                                final int j71 = j();
                                final int j72 = j();
                                final int j73 = j();
                                final int j74 = j();
                                h();
                                i = j74;
                                final int ci = j73;
                                final int cj = j72;
                                final int ck = j71;
                                final Code c24;
                                if ((c24 = code57.C).cs == 0) {
                                    c24.cG = -1;
                                    break Label_13807;
                                }
                                c24.cG = c24.cs;
                                c24.cH = i;
                                c24.cI = ci;
                                c24.cJ = cj;
                                c24.cK = ck;
                                break Label_13807;
                            }
                            case -219: {
                                final Code code58 = (Code)I(h());
                                final int h29 = h();
                                i = h();
                                I((int)(code58.C.B(h29, i) ? 1 : 0));
                                break Label_13807;
                            }
                            case -220: {
                                final Code code59 = (Code)I(h());
                                final int h30 = h();
                                final int j75 = j();
                                final int j76 = j();
                                final int j77 = j();
                                final int j78 = j();
                                i = h();
                                Code(code59.C.I(h30, j75, j76, j77, j78, i));
                                break Label_13807;
                            }
                            case -221: {
                                Code.d = (Code)I(h());
                                if (Code.bz > 0) {
                                    Code.Code.p();
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -222: {
                                I((int)(((Code)I(h())).C.aF ? 1 : 0));
                                break Label_13807;
                            }
                            case -223: {
                                ((Code)I(h())).x();
                                break Label_13807;
                            }
                            case -224: {
                                ((Code)I(h())).C.aE();
                                break Label_13807;
                            }
                            case -225: {
                                final Code code60 = (Code)I(h());
                                final int h31 = h();
                                final String c25 = C(h());
                                i = h();
                                final String s15 = c25;
                                final int o2 = h31;
                                final Code code61 = code60;
                                Code.O = o2;
                                final int[] array3 = { 0, 0, 0, 0 };
                                i = code61.C.Code(s15, array3, i);
                                a(Code.O, array3[0]);
                                a(Code.O + 1, array3[1]);
                                a(Code.O + 2, array3[2]);
                                a(Code.O + 3, array3[3]);
                                Code.O = 0;
                                I(i);
                                break Label_13807;
                            }
                            case -226: {
                                final Code code62 = (Code)I(h());
                                j();
                                Code(J(code62));
                                break Label_13807;
                            }
                            case -227: {
                                final Code code63 = (Code)I(h());
                                final int j79 = j();
                                final int j80 = j();
                                final boolean b17 = B();
                                i = h();
                                code63.Code(b17, j80, j79, i);
                                break Label_13807;
                            }
                            case -228: {
                                final Code code64 = (Code)I(h());
                                final int j81 = j();
                                final int j82 = j();
                                i = h();
                                code64.C(j82, j81, i);
                                break Label_13807;
                            }
                            case -229: {
                                ((Code)I(h())).f(h(), h());
                                break Label_13807;
                            }
                            case -230: {
                                ((Code)I(h())).g(h(), h());
                                break Label_13807;
                            }
                            case -231: {
                                final Code code65 = (Code)I(h());
                                final int j83 = j();
                                final int j84 = j();
                                i = h();
                                code65.a(j84, j83, i);
                                break Label_13807;
                            }
                            case -232: {
                                final Code code66 = (Code)I(h());
                                final int j85 = j();
                                final int j86 = j();
                                i = h();
                                code66.b(j86, j85, i);
                                break Label_13807;
                            }
                            case -233: {
                                ((Code)I(h())).F();
                                break Label_13807;
                            }
                            case -234: {
                                ((Code)I(h())).G();
                                break Label_13807;
                            }
                            case -235: {
                                Code(e(((Code)I(h())).f()));
                                break Label_13807;
                            }
                            case -236: {
                                I((int)(((Code)I(h())).l() ? 1 : 0));
                                break Label_13807;
                            }
                            case -237: {
                                final Code code67 = (Code)I(h());
                                final boolean b18 = B();
                                i = j();
                                code67.I(i, b18);
                                break Label_13807;
                            }
                            case -238: {
                                ((Code)I(h())).B(B());
                                break Label_13807;
                            }
                            case -242: {
                                Code(((Code)I(h())).C.S());
                                break Label_13807;
                            }
                            case -243: {
                                final Code code68 = (Code)I(h());
                                final int h32 = h();
                                i = j();
                                Code(code68.C.j(i, h32));
                                break Label_13807;
                            }
                            case -244: {
                                Code(((Code)I(h())).C.T());
                                break Label_13807;
                            }
                            case -245: {
                                final Code code69 = (Code)I(h());
                                final int h33 = h();
                                i = j();
                                code69.C.k(i, h33);
                                break Label_13807;
                            }
                            case -246: {
                                final Code code70 = (Code)I(h());
                                i = h();
                                code70.C.S(i);
                                break Label_13807;
                            }
                            case -247: {
                                final Code code71 = (Code)I(h());
                                B();
                                h();
                                code71.C.aB();
                                break Label_13807;
                            }
                            case -248: {
                                final Code code72 = (Code)I(h());
                                final int h34 = h();
                                final int j87 = j();
                                i = j();
                                Code(code72.C.Code(i, (char)j87, h34));
                                break Label_13807;
                            }
                            case -249: {
                                final Code code73 = (Code)I(h());
                                final int h35 = h();
                                i = h();
                                Code(code73.C.h(h35, i));
                                break Label_13807;
                            }
                            case -254: {
                                I(((Code)I(h())).a);
                                break Label_13807;
                            }
                            case -170: {
                                final int j88 = j();
                                final boolean b19 = B();
                                final boolean b20 = B();
                                final boolean b21 = B();
                                final int h36 = h();
                                final boolean b22 = B();
                                final boolean b23 = B();
                                final int j89 = j();
                                final int j90 = j();
                                final int j91 = j();
                                final int j92 = j();
                                final boolean b24 = B();
                                final int b25 = B() ? 1 : 0;
                                final int b26 = B() ? 1 : 0;
                                final int b27 = B() ? 1 : 0;
                                final boolean b28 = B();
                                final String c26 = C(h());
                                final int j93 = j();
                                final int j94 = j();
                                final String c27 = C(h());
                                final String c28 = C(h());
                                final String c29 = C(h());
                                final int j95 = j();
                                final Code code74 = (Code)I(h());
                                i = h();
                                final Code code75 = code74;
                                final int n94 = j95;
                                final String s16 = c29;
                                final String s17 = c28;
                                final String s18 = c27;
                                final int n95 = j94;
                                final int n96 = j93;
                                final String s19 = c26;
                                final boolean b29 = b28;
                                final int n97 = b27;
                                final int n98 = b26;
                                final int n99 = b25;
                                final boolean b30 = b24;
                                final int n100 = j92;
                                final int n101 = j91;
                                final int n102 = j90;
                                final int n103 = j89;
                                final boolean b31 = b23;
                                final boolean b32 = b22;
                                final int n104 = h36;
                                final boolean b33 = b21;
                                final boolean b34 = b20;
                                final boolean b35 = b19;
                                final int n105 = j88;
                                final Object[] array4 = new Object[110];
                                final int[] array5 = new int[110];
                                if (Code.an && !b35 && n104 != 0) {
                                    array4[86] = Code(n104);
                                }
                                array5[17] = n103;
                                array5[93] = n102;
                                array5[80] = n101;
                                final int n106;
                                array5[14] = (((n106 = n100) == 2) ? 2 : ((n106 != 1 && !Code.ac) ? 6 : 0));
                                array5[23] = (b30 ? Code.bG : 1);
                                final int[] array6 = array5;
                                final int n107 = 24;
                                array6[n107] |= n99 << 4;
                                final int[] array7 = array5;
                                final int n108 = 24;
                                array7[n108] |= n98 * 1073741824;
                                array5[21] = n97 * 15 + 100;
                                array5[56] = (b29 ? 1 : 0);
                                array5[106] = n105;
                                if (s19 != null) {
                                    array4[27] = s19;
                                    if (s19.startsWith("-")) {
                                        array5[17] = 1;
                                    }
                                }
                                array5[20] = n96;
                                array5[19] = n95;
                                array4[42] = s18;
                                array4[38] = s17;
                                array4[53] = s16;
                                if ("debug:".equals(s16)) {
                                    Code.s = true;
                                }
                                if (Code.s && "opera:routing".equals(s16)) {
                                    if (!Code.H) {
                                        Code.H = true;
                                    }
                                    else {
                                        Code.H = false;
                                    }
                                }
                                if (Code.an && !b35) {
                                    array5[99] = 2;
                                    array4[94] = Code.k;
                                    if (b32) {
                                        final int[] array8 = array5;
                                        final int n109 = 85;
                                        array8[n109] |= 0x2;
                                    }
                                    if (b34) {
                                        final int[] array9 = array5;
                                        final int n110 = 85;
                                        array9[n110] |= 0x1;
                                    }
                                    final int[] array10 = array5;
                                    final int n111 = 85;
                                    final int n112 = array10[n111];
                                    final int n113 = Code.C & 0x2;
                                    array10[n111] = (n112 | ((n113 | -n113) >>> 31 << 3 | (Code.C & 0x1) << 2));
                                }
                                final Object[] array11 = array4;
                                if (Code.a != null) {
                                    array11[77] = Code.a;
                                }
                                if (Code.c != null) {
                                    array11[73] = Code.c;
                                }
                                if (Code.d != null) {
                                    array11[79] = Code.d;
                                    Code.p = false;
                                }
                                String s20;
                                if ((s20 = Code.j) == null || s20.equals("")) {
                                    s20 = Code.Code.getAppProperty("OM-Campaign");
                                }
                                if (s20 != null && !s20.equals("") && !s20.equals("debug")) {
                                    array11[78] = s20;
                                }
                                array5[87] = 109;
                                array5[101] = 115;
                                array4[103] = "o";
                                final String c30 = C();
                                array5[76] = (c30.equals("hqvga") ? 4 : (c30.equals("qvga") ? 1 : (c30.equals("hvga") ? 2 : (c30.equals("vga") ? 3 : (c30.equals("svga") ? 6 : 0)))));
                                array5[15] = n94;
                                Code code76 = null;
                                Hashtable j96 = null;
                                if (code75 != null) {
                                    if (b31) {
                                        j96 = code75.J;
                                    }
                                    Label_11863: {
                                        final Code code77;
                                        final Code c31;
                                        if ((code76 = (((c31 = (code77 = code75).C).f == null || c31.cr != c31.f.length) ? null : code77.C)) != null) {
                                            array5[62] = code76.bl;
                                            if (code76.Code != null) {
                                                final String s21 = (String)array4[42];
                                                final String s22 = code76.Code[1];
                                                final String s23;
                                                if ((s23 = s21) != null && s22 != null) {
                                                    final String string;
                                                    if ((string = '&' + s23 + '&').indexOf('&' + s22 + '&') < 0) {
                                                        final int index;
                                                        if ((index = string.indexOf('&' + s22 + '=')) < 0) {
                                                            break Label_11863;
                                                        }
                                                        final int n114 = index + (s22.length() + 2);
                                                        if (f(string.substring(n114, string.indexOf(38, n114))) == null) {
                                                            break Label_11863;
                                                        }
                                                    }
                                                    final StringBuffer sb;
                                                    (sb = new StringBuffer((String)array4[42])).append("&");
                                                    sb.append(e(code76.Code[0]));
                                                    sb.append("=");
                                                    sb.append(e(Code.aa ? d.Code() : null));
                                                    array4[42] = sb.toString();
                                                }
                                            }
                                        }
                                    }
                                    array4[9] = code75.B;
                                }
                                final Code code78 = new Code(Code.Code, array4, array5, code76, j96, b33);
                                Code.I.addElement(code78);
                                Code.L = i;
                                a(Code.V = b(2, Code.u), Code.L);
                                a(Code.V + 1, Math.max(0, Math.min(99, 0)));
                                Code.L = Code.V;
                                Code.V = 0;
                                code78.bk = Code(65, 9, code78);
                                final int bk = code78.bk;
                                i = Code.L;
                                a(bk + 1, i);
                                Code.L = 0;
                                Code((Runnable)code78);
                                Code(code78.bk);
                                break Label_13807;
                            }
                            case -176: {
                                I(0);
                                break Label_13807;
                            }
                            case -201: {
                                I((int)(Code(j(), C(h())) ? 1 : 0));
                                break Label_13807;
                            }
                            case -210: {
                                final String c32 = C(h());
                                I((Code.J == -2 || Code(Code(c32, (String)null)).A()) ? 2 : ((Code.J == 0) ? 1 : 0));
                                break Label_13807;
                            }
                            case -211: {
                                I(d(C(h())));
                                break Label_13807;
                            }
                            case -212: {
                                final int j97 = j();
                                final boolean b36 = B();
                                final boolean b37 = B();
                                final String c33 = C(h());
                                final String c34 = C(h());
                                i = j();
                                final String s24 = c34;
                                final String s25 = c33;
                                final boolean b38 = b37;
                                final boolean b39 = b36;
                                final int n115 = j97;
                                final Code j98;
                                if ((j98 = J(i)) == null) {
                                    break Label_13807;
                                }
                                if (b39) {
                                    final Code code79 = j98;
                                    final String s26 = s24;
                                    final String s27 = s25;
                                    final String s28 = s26;
                                    final Code code80 = code79;
                                    code79.bo = 4;
                                    code80.Code(s28, s27, b38, n115);
                                    code80.ag();
                                    break Label_13807;
                                }
                                j98.Code(s24, s25, b38, n115);
                                break Label_13807;
                            }
                            case -213: {
                                final Code j99;
                                if ((j99 = J(j())) != null) {
                                    final Code code81;
                                    (code81 = j99).bo = 1;
                                    code81.aj();
                                    code81.ag();
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -214: {
                                final Code j100;
                                if ((j100 = J(j())) != null) {
                                    final Code code82;
                                    (code82 = j100).bo = 2;
                                    code82.aj();
                                    code82.ag();
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -215: {
                                final Code j101;
                                if ((j101 = J(j())) != null) {
                                    j101.al();
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -216: {
                                final Code j102;
                                I(((j102 = J(j())) != null) ? j102.bh : 0);
                                break Label_13807;
                            }
                            case -239: {
                                Code.b = Code(h());
                                q();
                                break Label_13807;
                            }
                            case -240: {
                                if ((Code.c = Code(h())).length == 0) {
                                    Code.c = null;
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -241: {
                                i = h();
                                if (Code.e == null) {
                                    if ((Code.d = Code(i)).length == 0) {
                                        Code.d = null;
                                    }
                                }
                                else {
                                    final int l14 = l(i);
                                    B(i, 0);
                                    Code.d = new byte[l14 + Code.e.length];
                                    System.arraycopy(Code.Z, Code.S, Code.d, 0, l14);
                                    System.arraycopy(Code.e, 0, Code.d, l14, Code.e.length);
                                    Code.d[0] = (byte)((Code.d.length - 1) / 4);
                                }
                                Code.p = true;
                                break Label_13807;
                            }
                            case -250: {
                                Code.ak = true;
                                I("md");
                                break Label_13807;
                            }
                            case -251: {
                                final String s29;
                                final int n116 = (s29 = "http://nada:4711").indexOf("://") + 3;
                                final int index2 = s29.indexOf(58, n116);
                                String string2;
                                if (n116 >= 3 && index2 >= 0) {
                                    final StringBuffer sb2;
                                    (sb2 = new StringBuffer()).append("http://").append(s29.substring(n116, index2)).append("/hrandom/connected?l=").append(c()).append("&b=hernskifers");
                                    string2 = sb2.toString();
                                }
                                else {
                                    string2 = null;
                                }
                                Code(e(string2));
                                break Label_13807;
                            }
                            case -252: {
                                final String f = Code.f;
                                Code.f = null;
                                Code(e(f));
                                break Label_13807;
                            }
                            case -253: {
                                R();
                                break Label_13807;
                            }
                            case -255: {
                                I("md");
                                break Label_13807;
                            }
                            case -256: {
                                I(Code.bT);
                                break Label_13807;
                            }
                            case -257: {
                                j();
                                I(100);
                                break Label_13807;
                            }
                            case -258: {
                                final int j103 = j();
                                i = j();
                                final int n117 = j103;
                                int n118;
                                if (Code.az) {
                                    final String code83 = Code.I.Code(i, n117);
                                    n118 = ((!Code.I.Z(code83) || Code.I.Code(code83)) ? 1 : 0);
                                }
                                else {
                                    n118 = 0;
                                }
                                I(n118);
                                break Label_13807;
                            }
                            case -259: {
                                final int j104 = j();
                                i = j();
                                final int n119 = j104;
                                String s30 = null;
                                if (Code.az) {
                                    s30 = Code.I.Code(i, n119);
                                }
                                if (s30 != null && !"".equals(s30)) {
                                    if (!s30.startsWith("file://")) {
                                        s30 = "file://" + s30;
                                    }
                                }
                                else {
                                    s30 = "";
                                }
                                Code(e(s30));
                                break Label_13807;
                            }
                            case -260: {
                                final int n120 = j() - 16;
                                I((n120 | -n120) >>> 31 ^ 0x1);
                                break Label_13807;
                            }
                            case -261: {
                                Code(D());
                                break Label_13807;
                            }
                            case -262: {
                                final int j105 = j();
                                i = j();
                                final int n121 = j105;
                                Object[] code84;
                                Code(e(Code.az ? (((code84 = Code.I.Code(i, n121)) != null) ? ((String)code84[0]) : null) : null));
                                break Label_13807;
                            }
                            case -263: {
                                final int j106 = j();
                                i = j();
                                final int n122 = j106;
                                Object[] code85;
                                Code(Code.az ? Code((byte[])(((code85 = Code.I.Code(i, n122)) != null) ? code85[2] : null)) : 0);
                                break Label_13807;
                            }
                            case -264: {
                                final int j107 = j();
                                i = j();
                                final int n123 = j107;
                                Object[] code86;
                                Code(e(Code.az ? (((code86 = Code.I.Code(i, n123)) != null) ? ((String)code86[1]) : null) : null));
                                break Label_13807;
                            }
                            case -265: {
                                final Object i11 = I(h());
                                Code(i11).I(i11);
                                break Label_13807;
                            }
                            case -266: {
                                final Object i12 = I(h());
                                I(Code(i12).Code(i12));
                                break Label_13807;
                            }
                            case -267: {
                                final int h37 = h();
                                i = j();
                                final Object code87 = Code(h37);
                                Code(Code(code87).Code(code87, i));
                                break Label_13807;
                            }
                            case -268: {
                                final Object i13 = I(h());
                                i = j();
                                Code(i13).I(i13, i);
                                break Label_13807;
                            }
                            case -269: {
                                final Object i14 = I(h());
                                I(Code(i14).Code(i14, (J)I(h()), j()));
                                break Label_13807;
                            }
                            case -270: {
                                final Object i15 = I(h());
                                i = j();
                                I((int)(Code(i15).Code(i15, i) ? 1 : 0));
                                break Label_13807;
                            }
                            case -271: {
                                Code(E());
                                break Label_13807;
                            }
                            case -272: {
                                Code(Code.am ? A() : 0);
                                break Label_13807;
                            }
                            case -273: {
                                i = (B() ? 1 : 0);
                                if (Code.am) {
                                    Code.an = (i != 0);
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -275: {
                                final Object i16 = I(h());
                                String string3 = null;
                                if (i16 != null) {
                                    string3 = ((TextBox)i16).getString();
                                }
                                Code(e(string3));
                                break Label_13807;
                            }
                            case -276: {
                                final Object i17 = I(h());
                                final String c35 = C(h());
                                final TextBox textBox = (TextBox)i17;
                                if (i17 != null) {
                                    textBox.setString(c35);
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -277: {
                                I(h());
                                B();
                                j();
                                j();
                                j();
                                j();
                                j();
                                j();
                                break Label_13807;
                            }
                            case -278: {
                                I(h());
                                break Label_13807;
                            }
                            case -279: {
                                I(h());
                                I(-1);
                                break Label_13807;
                            }
                            case -280: {
                                I(h());
                                B();
                                j();
                                C(h());
                                break Label_13807;
                            }
                            case -284: {
                                I(h());
                                j();
                                break Label_13807;
                            }
                            case -274: {
                                B();
                                j();
                                j();
                                j();
                                I(h());
                                j();
                                j();
                                j();
                                j();
                                j();
                                j();
                                j();
                                j();
                                final int j108 = j();
                                h();
                                Code.I = I(i = Code(68, 1, Code.b.Code(j108, C(h()), C(h()), j(), C(h()), C(h()))));
                                Code(i);
                                break Label_13807;
                            }
                            case -281: {
                                j();
                                I(0);
                                break Label_13807;
                            }
                            case -282: {
                                I(1);
                                break Label_13807;
                            }
                            case -283: {
                                I((int)Code.Code);
                                break Label_13807;
                            }
                            case -285: {
                                h();
                                j();
                                break Label_13807;
                            }
                            case -287: {
                                I(0);
                                break Label_13807;
                            }
                            case -288: {
                                I(0);
                                break Label_13807;
                            }
                            case -289: {
                                I(0);
                                break Label_13807;
                            }
                            case -290: {
                                C(h());
                                break Label_13807;
                            }
                            case -291: {
                                I((int)(Code.aD ? 1 : 0));
                                break Label_13807;
                            }
                            case -292: {
                                Code.a = C(h());
                                break Label_13807;
                            }
                            case -293: {
                                Code(e(Code.a));
                                break Label_13807;
                            }
                            case -294: {
                                final int length3 = Code.a.length();
                                I((length3 | -length3) >>> 31);
                                break Label_13807;
                            }
                            case -295: {
                                final int j109 = j();
                                final int j110 = j();
                                final String c36 = C(h());
                                final int n124 = j110;
                                final int n125 = j109;
                                if (Code.Code) {
                                    break Label_13807;
                                }
                                I(n124, n125);
                                if (c36 == null) {
                                    break Label_13807;
                                }
                                final Object code88;
                                monitorenter(code88 = Code.Code);
                                while (true) {
                                    if (Code.e) {
                                        try {
                                            e();
                                            final char[] charArray = c36.toCharArray();
                                            final int s31;
                                            if (((s31 = new Code(charArray, 0, 0, 0, null, Code.Code).s(0)) & 0xE) != 0x0) {
                                                i = Code(charArray, s31);
                                                Code.Z = new String(charArray, 0, i);
                                            }
                                            else {
                                                Code.Z = c36;
                                            }
                                            Code.f = Code.Code.I(Code.Z);
                                            I(0, Code.l, Code.j, Code.g);
                                            break Label_13807;
                                        }
                                        finally {
                                            monitorexit(code88);
                                        }
                                        break Label_13633;
                                    }
                                    continue;
                                }
                            }
                            case -296: {
                                i = j();
                                if (!Code.Code) {
                                    a(i);
                                    break Label_13807;
                                }
                                break Label_13807;
                            }
                            case -297: {
                                Code.l = true;
                                Code.k = true;
                                break Label_13807;
                            }
                            case -298: {
                                final Object code89;
                                monitorenter(code89 = Code.Code);
                                Code.e = false;
                                Code.Code = null;
                                Code.J = null;
                                Code.I = null;
                                Code.Z = null;
                                monitorexit(code89);
                                Code.Code.Code(0, 0, v(), Code.b.a());
                                break Label_13807;
                            }
                            case -300: {
                                Code.B = null;
                                int n126;
                                if (Code.q) {
                                    Code.q = false;
                                    (Code.Code = new C(B(), b())).start();
                                    n126 = Code.aL;
                                }
                                else if (Code.r) {
                                    Code.r = false;
                                    (Code.Code = new C(B(), Code.J)).start();
                                    n126 = Code.aL;
                                }
                                else {
                                    n126 = 0;
                                }
                                I(n126);
                                break Label_13807;
                            }
                            case -301: {
                                I(q());
                                break Label_13807;
                            }
                            case -302: {
                                I(Code.aK);
                                break Label_13807;
                            }
                        }
                    }
                    break;
                }
            }
        }
        Code.F -= 5;
        Code.x = Code.C[Code.F + 4];
        return l;
    }
    
    public static String Code(int l) {
        return Code(Z((l = l(l + 1)) - 2), l - 2 & 0x3FFF);
    }
    
    private static long Code(final int n) {
        return (long)l(n) << 32 | ((long)l(n + 1) & 0xFFFFFFFFL);
    }
    
    private static void d(final int n) {
        Code.Q = B(n, 0);
    }
    
    private static boolean Code(final String s, final String s2, final String s3) {
        return s.indexOf(s2 + "/" + s3) >= 0 || s.indexOf(s2 + "-" + s3) >= 0;
    }
    
    public static String I(String s) {
        if (s == null) {
            return null;
        }
        if (!s.startsWith("file://")) {
            if (!s.startsWith("/")) {
                s = "/" + s;
            }
            s = "file://" + s;
        }
        return s;
    }
    
    private static boolean c(final char c) {
        return c == '\n' || c == '\r' || c == '\u000b' || c == '\u0085' || c == '\f' || c == '\u2028' || c == '\u2029';
    }
    
    private String Code(final int n, int n2) {
        if (n2 == -1) {
            n2 = 16;
        }
        String s;
        if (!(s = this.Z()).endsWith("/")) {
            s += "/";
        }
        return s + n + ".obml" + n2;
    }
    
    private static boolean Code(int n, byte[] array, int n2) {
        final int n3 = n;
        final byte[] array2 = array;
        n = n2;
        array = array2;
        byte[] array3;
        int n4;
        int n5;
        int i;
        int b;
        int b2;
        int j;
        int k;
        int n6;
        int b3;
        Label_0226_Outer:Label_0205_Outer:
        while (true) {
        Label_0263_Outer:
            while (true) {
            Label_0214_Outer:
                while (true) {
                    while (true) {
                        switch (n3) {
                            case 0: {
                                if (n != 0) {
                                    break Label_0226_Outer;
                                }
                                break Label_0226_Outer;
                            }
                            case 2: {
                                break Label_0226_Outer;
                                n2 = 0;
                                array3 = array;
                                ++n2;
                                n4 = 0;
                                try {
                                    n5 = (array3[n4] & 0xFF);
                                    i = 0;
                                    while (i < n5) {
                                        if ((b = B(array, n2, n - n2)) >= 0) {
                                            n2 += b;
                                            if ((b2 = B(array, n2, n - n2)) > 2) {
                                                n2 += b2;
                                                if ((j = J(array, n2, n - n2)) >= 0) {
                                                    n2 += j;
                                                    if ((k = J(array, n2, n - n2)) >= 0) {
                                                        n2 += k;
                                                        ++i;
                                                        continue Label_0226_Outer;
                                                    }
                                                }
                                            }
                                        }
                                        return Code(array, n, false);
                                    }
                                    if (n2 == n) {
                                        return true;
                                    }
                                    return Code(array, n, false);
                                    n2 = 0;
                                    n6 = 0;
                                    while (true) {
                                        break Label_0226;
                                        return Code(array, n, true);
                                    Block_12:
                                        while (true) {
                                            iftrue(Label_0263:)((b3 = B(array, n2, n - n2)) < 0);
                                            break Block_12;
                                            return Code(array, n, true);
                                            Label_0220: {
                                                continue Label_0226_Outer;
                                            }
                                            iftrue(Label_0256:)(n6 >= 5);
                                            continue Label_0263_Outer;
                                        }
                                        n2 += b3;
                                        ++n6;
                                        continue Label_0205_Outer;
                                    }
                                    Label_0256: {
                                        iftrue(Label_0263:)(n2 != n);
                                    }
                                    return true;
                                    iftrue(Label_0220:)(n <= 0);
                                    return true;
                                }
                                finally {
                                    return false;
                                }
                                break;
                            }
                            case 3:
                            case 4:
                            case 5: {
                                continue Label_0263_Outer;
                            }
                            case 18: {
                                continue Label_0214_Outer;
                            }
                            case 30: {
                                continue;
                            }
                            case 31: {
                                continue Label_0205_Outer;
                            }
                        }
                        break;
                    }
                    break;
                }
                break;
            }
            break;
        }
    }
    
    private String i() {
        if (!this.aE || this.B.Code() || this.a.Code()) {
            return "";
        }
        final B code;
        final B b = ((code = B.Code(this.B, this.a)) != this.B) ? this.B : this.a;
        final StringBuffer sb = new StringBuffer();
        final B b2 = new B(code);
        while (b2.Code(b) < 0) {
            final StringBuffer sb2 = sb;
            final B b3;
            final String i = (b3 = b2).Code.I();
            Code j;
            sb2.append((char)((b3.Code < i.length()) ? i.charAt(b3.Code) : (((j = b3.Code.J()) == null) ? 0 : (b3.Code.Z(j) ? 32 : 10))));
            if (b2.I()) {
                break;
            }
        }
        return sb.toString();
    }
    
    public final String Z() {
        String s = null;
        if (this.n != null && !"".equals(this.n)) {
            s = this.n;
        }
        if (s == null || "".equals(s)) {
            s = this.b.J();
        }
        if (s == null || "".equals(s)) {
            Code code = null;
            final Code[] code2;
            if ((code2 = this.Code()).length > 0) {
                code = code2[0];
            }
            if (code != null) {
                String s2;
                if (!(s2 = code.d).endsWith("/")) {
                    s2 += "/";
                }
                s = s2 + "OperaSavedPages/";
            }
        }
        if (s == null || "".equals(s)) {
            s = "OperaSavedPages/";
        }
        return this.n = I(s);
    }
    
    private Object[] Code(int cx, int short1) {
        if (cx == this.cx) {
            return this.Z;
        }
        if (!e(short1)) {
            return null;
        }
        this.cx = cx;
        this.Z = null;
        final String code = this.Code(cx, short1);
        Code code2 = null;
        InputStream code3 = null;
        DataInputStream dataInputStream = null;
        Object[] z = null;
        final J b = this.b;
        final String s = code;
        final boolean b2 = false;
        final int n = 1;
        FileConnection code5 = null;
        try {
            code3 = (code2 = b.Code(s, b2, n)).Code();
            dataInputStream = new DataInputStream(code3);
            final byte[] array = new byte[4];
            int n2 = 0;
            while ((n2 += dataInputStream.read(array, n2, 4 - n2)) < 4) {}
            if (Code(array, 0) != 47404304) {
                final DataInputStream dataInputStream2 = dataInputStream;
                InputStream inputStream;
                try {
                    dataInputStream2.close();
                }
                finally {
                    inputStream = code3;
                }
                FileConnection code4;
                try {
                    inputStream.close();
                }
                finally {
                    code4 = code2.Code;
                }
                try {
                    e.Code(code4);
                }
                finally {
                    return null;
                }
            }
            Code((InputStream)dataInputStream, 3);
            if (dataInputStream.read() != short1) {
                final DataInputStream dataInputStream3 = dataInputStream;
                InputStream inputStream2;
                try {
                    dataInputStream3.close();
                }
                finally {
                    inputStream2 = code3;
                }
                inputStream2.close();
                e.Code(code2.Code);
                return null;
            }
            final int n3 = short1 - 15;
            cx = ((n3 | -n3) >>> 31) * -3 + 10;
            Code((InputStream)dataInputStream, cx);
            final String utf = dataInputStream.readUTF();
            byte[] array2 = new byte[short1 = dataInputStream.readShort()];
            dataInputStream.readFully(array2, 0, short1);
            if (short1 == 0) {
                array2 = null;
            }
            final String utf2 = dataInputStream.readUTF();
            String s2;
            if ((s2 = dataInputStream.readUTF()) != null && s2.length() > 0 && s2.charAt(0) == '\0') {
                s2 = utf2 + s2.substring(1, s2.length());
            }
            z = new Object[] { utf, s2, array2 };
        }
        finally {
            final DataInputStream dataInputStream4 = dataInputStream;
            InputStream inputStream3;
            try {
                dataInputStream4.close();
            }
            finally {
                inputStream3 = code3;
            }
            try {
                inputStream3.close();
            }
            finally {
                code5 = code2.Code;
            }
        }
        try {
            e.Code(code5);
        }
        finally {}
        return this.Z = z;
    }
    
    public static int Code(final String s, final String s2) {
        try {
            final Object[] code = Code(s);
            int i = 0;
            while (i < Code.Code.length) {
                final Code code2 = Code.Code[i];
                final String s3 = (String)code[0];
                final String s4 = (String)code[1];
                final int intValue = (int)code[2];
                final String s5 = (String)code[3];
                final int n = intValue;
                final String s6 = s4;
                final String s7 = s3;
                final Code code3 = code2;
                if (!I(code2.c, s7) || !I(code3.d, s6) || (code3.cp != 0 && n != code3.cp) || !I(code3.b, s5)) {
                    ++i;
                }
                else {
                    if (Code.Code[i].bm == 255) {
                        return Code(s2, (String)null);
                    }
                    return Code.Code[i].bm;
                }
            }
        }
        finally {
            return 0;
        }
    }
    
    private boolean z() {
        return (this.cI & 0x1) != 0x0;
    }
    
    private static boolean e(final int n) {
        return n == 15 || n == 16;
    }
    
    public Code() {
        this.bi = true;
        this.bh = true;
        this.bg = true;
        this.g = new byte[64];
        this.Code = new byte[32];
    }
    
    private Code(final J b) {
        this.bi = true;
        this.bh = true;
        this.bf = true;
        this.B = new Code[10];
        this.b = b;
    }
    
    private Code(final boolean b, final byte b2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aQ = true;
        this.J = new Code[10];
        Code((Runnable)this);
    }
    
    private static int Code(final Hashtable hashtable) {
        if (hashtable == null) {
            return 0;
        }
        int n = 7;
        final Enumeration keys = hashtable.keys();
        while (keys.hasMoreElements()) {
            final String s = (String)keys.nextElement();
            final Object[] array = hashtable.get(s);
            n = n + (2 + c(s)) + (2 + c((String)array[0])) + (4 + (int)array[1]);
        }
        return n;
    }
    
    private Code(final Font code) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aY = true;
        this.Code = code;
        this.at();
    }
    
    private static boolean a() {
        return Code.ak >= Code.Code.length - 1 || Code.Code[Code.Code.length - 1] != null;
    }
    
    public static void C() {
        C((int)System.currentTimeMillis());
    }
    
    private static boolean C() {
        return Code.an >= Code.Code.length - 1 || Code.Code[Code.Code.length - 1] != null;
    }
    
    private static int h(final int n) {
        if (n >= 65 && n <= 90) {
            return n + 32;
        }
        return n;
    }
    
    private static void B(final int n, final int n2) {
        Code.Z = I(n);
        Code.S = i(n) + n2;
    }
    
    private static boolean Code(final int n) {
        return n >= 0 && n < Code.Code.length && Code.Code[n];
    }
    
    private static int Code(final byte[] array, final int n, final int n2) {
        Z(array, n, n2);
        final int v = Code.V;
        Code.V = 0;
        return v;
    }
    
    private static boolean b() {
        final int as = Code.as;
        while (Code.Code[Code.as] != null) {
            if (++Code.as == Code.Code.length) {
                Code.as = 0;
            }
            if (as == Code.as) {
                return false;
            }
        }
        return true;
    }
    
    private static int B(int b, final int n) {
        a(b = b(b + 1, Code.r), n);
        return b;
    }
    
    private static int Code(final long n) {
        a(Code.V = b(2, Code.w), (int)(n >> 32));
        a(Code.V + 1, (int)n);
        final int v = Code.V;
        Code.V = 0;
        return v;
    }
    
    private static int Z(final byte[] array, final int n, final int n2) {
        f(n2);
        System.arraycopy(array, n, Code.Z, Code.S, n2);
        return n();
    }
    
    private static void Z(final byte[] array, final int n, final int n2) {
        Code.T = l(Code.aa);
        int j;
        for (int i = Code(Code.T)[(Code.T & 0x7FFF) + ((j = I(array, n, n2)) & c(Code.aa, 2) - 1)]; i != 0; i = l(i)) {
            final int l;
            if (m(l = l(i + 1)) == n2 && Code(Z(l), l & 0x3FFF, array, n, n2)) {
                Code.V = i;
                Code.T = 0;
                return;
            }
        }
        Code.T = 0;
        Code.V = b(3, Code.p);
        k(n2);
        if (n2 > 0) {
            System.arraycopy(array, n, Code.Z, Code.S, n2);
        }
        a(Code.V + 1, Code.R);
        Code.R = 0;
        a(Code.V + 2, j);
        b(Code.aa, j);
    }
    
    public static void Code(final Object o) {
        synchronized (o) {
            o.notifyAll();
        }
    }
    
    private Code(final char c, final char c2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
    }
    
    private static int x() {
        if (Code.ac) {
            return 6;
        }
        return 7;
    }
    
    private static void o(int n) {
        if (n >= Code.aj) {
            final int n2 = n -= 6;
            Z(n2)[n & 0x3FFF] = 1;
        }
    }
    
    private static int I(final byte[] array, final int n, int n2) {
        int n3 = 0;
        while (n2-- > 0) {
            n3 = n3 * 33 + array[n + n2];
        }
        return n3;
    }
    
    private static void Code(final Vector vector, final Object o) {
        final String lowerCase = ((String)((Object[])o)[2]).toLowerCase();
        int n;
        if ((n = vector.size() - 1) < 0 || lowerCase.compareTo(((String)((Object[])vector.lastElement())[2]).toLowerCase()) >= 0) {
            vector.addElement(o);
            return;
        }
        while (n > 0 && lowerCase.compareTo(((String)((Object[])vector.elementAt(n - 1))[2]).toLowerCase()) < 0) {
            --n;
        }
        vector.insertElementAt(o, n);
    }
    
    private static boolean B(String s) {
        final String s2 = s;
        boolean b = false;
        boolean b2 = false;
        if ((s = s) != null && s.startsWith("http://") && s.indexOf("&url=rtsp://") >= 0) {
            s = s.substring(s.indexOf("rtsp://"));
        }
        final String s3 = s;
        try {
            b = C(s3);
        }
        catch (ConnectionNotFoundException ex) {
            final int index;
            if ((index = s2.indexOf("&url=rtsp://")) < 0) {
                throw new IOException();
            }
            s = s2.substring(0, index);
            b2 = true;
        }
        if (b2) {
            final String s4 = s;
            try {
                b = C(s4);
            }
            catch (ConnectionNotFoundException ex2) {
                throw new IOException();
            }
        }
        return b;
    }
    
    private void Code(final DataInputStream dataInputStream) {
        Code((InputStream)dataInputStream, dataInputStream.readShort());
        final short short1 = dataInputStream.readShort();
        this.h = new int[short1];
        this.g = new int[short1];
        int n = short1 * 6 - 6;
        for (short n2 = 0; n2 < short1; ++n2) {
            dataInputStream.readShort();
            this.g[n2] = dataInputStream.readInt();
            this.h[n2] = n;
            n += this.g[n2] - 6;
        }
        this.C = true;
    }
    
    private static synchronized void E(final int bi) {
        if (Code.bi != 0) {
            Code.bi = (int)((3L * Code.bi + 7L * bi) / 10L);
            return;
        }
        Code.bi = bi;
    }
    
    public static byte[] Code() {
        if (Code.B != null) {
            return Code.B;
        }
        Code.e = null;
        return Code.B = I();
    }
    
    private static byte[] Code(final String s, final byte[] array, final int n, final int n2) {
        final int n3 = c(s) + 2;
        final byte[] array2 = new byte[n2 + n3 + 5];
        Code(s, array2, n2);
        int n4 = n2 + n3;
        I(n3, array2, n4);
        n4 += 2;
        array2[n4++] = 1;
        I(32528, array2, n4);
        System.arraycopy(array, n, array2, 0, n2);
        return array2;
    }
    
    private static int o(final int n) {
        if (n >= Code.aj) {
            return I(Z(n), (n & 0x3FFF) - 6) + 6;
        }
        return n;
    }
    
    private static void m(final int n) {
        if (n == 0) {
            Code.af = 21;
            throw Code.Code;
        }
    }
    
    private static void q(final int n) {
        final int l;
        if ((l = l(n)) >= Code.am) {
            a(n, l(l - 2));
        }
    }
    
    private static int J(final int n, final int n2) {
        return I(Z(n), n & 0x3FFF, n2);
    }
    
    private static int i(final int n) {
        return l(n + 1) & 0x3FFF;
    }
    
    public final synchronized void I() {
        while (true) {
            Label_0035: {
                if (!Code.f) {
                    break Label_0035;
                }
                try {
                    if (c()) {
                        Code.g = false;
                        throw new RuntimeException();
                    }
                    Code.g = true;
                    this.wait();
                    continue;
                    Code.g = false;
                    Code.f = true;
                }
                catch (InterruptedException ex) {}
            }
        }
    }
    
    private synchronized void r() {
        Code.e = null;
    }
    
    private static int Code(final Code code, final int n) {
        final int r;
        if (code.w() && (r = code.R()) <= n) {
            return r;
        }
        code.d(false);
        final int r2;
        if ((r2 = code.R()) <= n) {
            return r2;
        }
        code.d(true);
        return code.R();
    }
    
    private boolean q() {
        return this.Code.size() > 0;
    }
    
    public static int I(final int i) {
        while (i != 0) {
            for (int j = 1; j < Code.e.length; ++j) {
                if (Code.e[j] == i) {
                    final int[] f = Code.f;
                    final int n = j;
                    ++f[n];
                    return j;
                }
            }
            for (int k = 1; k < Code.e.length; ++k) {
                if (Code.e[k] == 0) {
                    final int[] f2 = Code.f;
                    final int n2 = k;
                    ++f2[n2];
                    Code.e[k] = i;
                    return k;
                }
            }
            final int[] e = new int[Code.e.length + 32];
            System.arraycopy(Code.e, 0, e, 0, Code.e.length);
            Code.e = e;
            final int[] f3 = new int[Code.f.length + 32];
            System.arraycopy(Code.f, 0, f3, 0, Code.f.length);
            Code.f = f3;
        }
        return 0;
    }
    
    private void v() {
        this.Code = new Vector();
        final Code[] code = this.i.Code();
        for (int i = 0; i < code.length; ++i) {
            if (code[i] != null) {
                Code(this.Code, new Object[] { code[i].d, new Integer(7), code[i].b, null });
            }
        }
    }
    
    private static int Code(final int[] array, final int n, int n2, final int n3, final int n4, final int n5) {
        int n6 = -1;
        while (n2 - n6 > 1) {
            final int n7 = n6 + n2 >>> 1;
            if ((array[n + n7 * n3] & n4) < n5) {
                n6 = n7;
            }
            else {
                n2 = n7;
            }
        }
        return n2;
    }
    
    public final int d() {
        if (this.aY) {
            return this.I;
        }
        return 0;
    }
    
    private boolean h() {
        if (!Code.ai) {
            return false;
        }
        final long currentTimeMillis = System.currentTimeMillis();
        return this.Code(currentTimeMillis) && this.Code(currentTimeMillis - Code.J);
    }
    
    private void d(final int n, final int b) {
        if (n <= 0) {
            this.C = 0;
            this.b = 0;
            return;
        }
        this.C = Math.max(1, n - b);
        this.b = b;
    }
    
    private int t(final int n) {
        return Code(this.h, this.az, 6, n);
    }
    
    private static int t() {
        switch (s()) {
            case -5: {
                return 42;
            }
            case -9:
            case -8:
            case -6:
            case -2: {
                return 35;
            }
            default: {
                return 48;
            }
        }
    }
    
    public final Code Z() {
        return this.q;
    }
    
    public static void Z(final int n) {
        Code.Code = Code(n);
        Code.Code = (n & 0x7FFF) + 1;
    }
    
    private static int C(int l, final int n) {
        final int[] code = Code(l);
        final int n2 = (l & 0x7FFF) + 1;
        l = l(l);
        for (int i = 0; i < l; ++i) {
            if (code[n2 + i] == n) {
                return i;
            }
        }
        return -1;
    }
    
    private static void Z(final int n, final int n2) {
        a(Code.Q = b(n + 1, Code.s), n2);
        Code.Code = Code(Code.Q);
        Code.Code = (Code.Q & 0x7FFF) + 1;
    }
    
    private static void J(final int n, final int n2) {
        Code.Code = Code(n);
        Code.Code = (n & 0x7FFF) + 1 + n2;
    }
    
    private static int y() {
        final String property = System.getProperty("com.sonyericsson.net.mcc");
        try {
            return Integer.parseInt(property);
        }
        finally {
            return -1;
        }
    }
    
    private static void h(int n, int n2) {
        final int n3 = n;
        n = n2;
        n2 = n3;
        Code.b = Code.Code;
        if (Code.Q) {
            Code.b += Code.Z * (n2 * n + 51200 + 102400);
        }
        else if (Code.W) {
            Code.b += 409600L;
        }
        if (Code.Q && Code.a <= 2097152L) {
            Code.bz = (int)((Code.a - Code.b) / 3072L);
        }
    }
    
    private static void I(final int n, final int n2, final int n3, final int n4, final int n5) {
        if (n5 > 0) {
            System.arraycopy(Code(n), (n & 0x7FFF) + n2, Code(n3), (n3 & 0x7FFF) + n4, n5);
        }
    }
    
    private static int n() {
        final int b = b(2, Code.t);
        a(b + 1, Code.R);
        a(b, m(Code.R));
        Code.R = 0;
        return b;
    }
    
    private static byte[] Code(final int n) {
        final int l;
        final byte[] array = new byte[l = l(n)];
        Code(l(n + 1), 0, array, 0, l);
        return array;
    }
    
    private static byte[] I(final int n) {
        return Z(l(n + 1));
    }
    
    private static byte Code(final byte b) {
        if ((b & 0x1) == 0x0) {
            return 1;
        }
        return 2;
    }
    
    private static String B() {
        final String j;
        if ((j = J("server-url")) != null && !j.equals("")) {
            return j;
        }
        return "http://mini5resource.opera-mini.net";
    }
    
    private static int[] Code(final int[] array, final int[] array2) {
        final int[] array3 = new int[array2.length];
        final int[] array4;
        Code(array4 = new int[array2.length << 1], array, array);
        Code(array4, array2);
        System.arraycopy(array4, array4.length - array3.length, array3, 0, array3.length);
        for (int i = 0; i < array4.length; ++i) {
            array4[i] = 0;
        }
        Code(array4, array3, array);
        Code(array4, array2);
        System.arraycopy(array4, array4.length - array3.length, array3, 0, array3.length);
        return array3;
    }
    
    private static int u(final int n) {
        int n2 = 0;
        switch (n & 0xFFF) {
            case 3: {
                n2 = 2;
                break;
            }
            case 4: {
                n2 = 1;
                break;
            }
            case 5: {
                n2 = 3;
                break;
            }
            case 6: {
                n2 = 4;
                break;
            }
            default: {
                n2 = 0;
                break;
            }
        }
        if ((0x1000 & n) != 0x0) {
            n2 |= 0x10000;
        }
        if ((0x2000 & n) != 0x0) {
            n2 |= 0x20000;
        }
        if ((0x4000 & n) != 0x0) {
            n2 |= 0x40000;
        }
        if ((0x8000 & n) != 0x0) {
            n2 |= 0x80000;
        }
        if ((0x10000 & n) != 0x0) {
            n2 |= 0x100000;
        }
        if ((0x20000 & n) != 0x0) {
            n2 |= 0x200000;
        }
        return n2;
    }
    
    public static int Z(final int n) {
        if (n <= 0 || n >= Code.e.length) {
            return 0;
        }
        return Code.e[n];
    }
    
    private static int j(final int n) {
        i();
        int an;
        for (an = Code.an; Code.Code[an] != null; ++an) {}
        Code.Code[an] = new int[n + 3];
        return an;
    }
    
    private static void g(final int n) {
        i();
        Code.Code[n] = new int[32768];
    }
    
    private static int[] Code(final int n) {
        return Code.Code[n >>> 15];
    }
    
    private static void Code(final byte[] array, final byte b, final int n, final int n2, final byte b2, final byte b3) {
        for (int i = n; i < n2; ++i) {
            if (array[i] == -128) {
                int j = i;
                while (++i < n2 && array[i] == -128) {}
                final byte b4 = (j > n) ? array[j - 1] : b2;
                final byte b5 = (i < n2) ? array[i] : b3;
                byte code;
                if (b4 == 1 && b5 == 1) {
                    code = 1;
                }
                else if ((b4 & 0x1A) != 0x0 && (b5 & 0x1A) != 0x0) {
                    code = 2;
                }
                else {
                    code = Code(b);
                }
                while (j < i) {
                    array[j] = code;
                    ++j;
                }
            }
        }
    }
    
    private static String C() {
        final int min;
        if ((min = Math.min(v(), Code.b.a())) < 210 || Code.W) {
            return "hqvga";
        }
        if (min < 300) {
            return "qvga";
        }
        if (min < 440) {
            return "hvga";
        }
        if (min < 600) {
            return "vga";
        }
        return "svga";
    }
    
    private static void C(final int n, final int n2) {
        Code.d[Code.ao + n] = n2;
    }
    
    private static void a(final int n, final int n2) {
        Code(n)[n & 0x7FFF] = n2;
    }
    
    private static void b(final int n, int n2) {
        final int l;
        n2 = ((l = l(n)) & 0x7FFF) + (n2 & l(l - 3) - 1);
        final int[] code = Code(l);
        a(Code.V, code[n2]);
        code[n2] = Code.V;
        n2 = l(n + 1) + 1;
        a(n + 1, n2);
    }
    
    private static Object Code(final int n) {
        return Code.Code[l(n)];
    }
    
    private static byte[] Z(final int n) {
        return Code.Code[n >>> 14];
    }
    
    private static int m(final int n) {
        return I(Z(n - 3), n - 3 & 0x3FFF);
    }
    
    private static void i(final int n) {
        if (n + 6 > 16384) {
            if (Code.Code[Code.ai >>> 14] != null) {
                c(Code.ai >>> 14, Code.ai & 0x3FFF);
                Code.ai = (Code.ai >>> 14) + 1 << 14;
            }
            Code.Z = new byte[n + 6];
            Code.Code[Code.ai >>> 14] = Code.Z;
            J(n, Code.Z, 3);
            Code.R = Code.ai + 6;
            Code.S = 6;
            Code.ai = (Code.ai >>> 14) + 1 << 14;
            return;
        }
        if ((Code.ai & 0x3FFF) + 6 + n > 16384) {
            c(Code.ai >>> 14, Code.ai & 0x3FFF);
            Code.ai = (Code.ai >>> 14) + 1 << 14;
        }
        if (Z(Code.ai) == null) {
            ++Code.ak;
            j();
            Code.Code[Code.ai >>> 14] = new byte[16384];
        }
        k(n);
    }
    
    private static void j(final int n) {
        j();
        int ak;
        for (ak = Code.ak; Code.Code[ak] != null; ++ak) {}
        Code.Z = new byte[n + 6];
        Code.Code[ak] = Code.Z;
        J(n, Code.Z, 3);
        Code.R = (ak << 14) + 6;
        Code.S = 6;
    }
    
    private static void k(final int n) {
        if (n + 6 > 16384) {
            t(0);
            if (a()) {
                t(1);
            }
            try {
                j(n);
                return;
            }
            finally {
                Code.a.J(true);
                j(n);
                return;
            }
        }
        byte[] z = null;
        int i = 0;
        while (i < 4) {
            if ((Code.ai & 0x3FFF) + 6 + n > 16384) {
                Code.ai = (Code.ai >>> 14) + 1 << 14;
            }
            if ((z = Code.Code[Code.ai >>> 14]) != null) {
                break;
            }
            if (i >= 2) {
                if (i == 2) {
                    final int n2 = Code.ai >>> 14;
                    try {
                        l(n2);
                        z = Code.Code[Code.ai >>> 14];
                        break;
                    }
                    finally {
                        Code.a.J(true);
                        ++i;
                        continue;
                    }
                }
                l(Code.ai >>> 14);
                z = Code.Code[Code.ai >>> 14];
                break;
            }
            t(i);
            ++i;
        }
        final int n3 = Code.ai & 0x3FFF;
        z[n3 + 2] = 1;
        J(n, z, n3 + 3);
        Code.R = Code.ai + 6;
        Code.Z = z;
        Code.S = n3 + 6;
        Code.ai = Code.R + n;
    }
    
    private synchronized void B(final boolean b) {
        this.m.b = b;
    }
    
    private static void c(final int n, final int n2) {
        ++Code.ak;
        j();
        Code.Code[n + 1] = Code.Code[n];
        Code.Code[n] = new byte[n2];
        System.arraycopy(Code.Code[n + 1], 0, Code.Code[n], 0, n2);
        c(Code.Code[n + 1], 0, 16384);
    }
    
    private static void l(final int n) {
        j();
        Code.Code[n] = new byte[16384];
    }
    
    private static void I(final int[] array, final int n, int n2) {
        while (n2-- > 0) {
            final int n3;
            if ((n3 = array[n + n2]) >= Code.am) {
                array[n + n2] = l(n3 - 2);
            }
        }
    }
    
    private static void Code(final int[] array, final int n, int n2) {
        while (n2-- > 0) {
            n(array[n + n2]);
        }
    }
    
    private static void l() {
        Code.L = 0;
        Code.M = 0;
        Code.Q = 0;
        Code.T = 0;
        Code.U = 0;
        Code.V = 0;
        Code.R = 0;
        Code.W = 0;
        Code.X = 0;
    }
    
    private void J(final byte[] array, int n, int n2) {
        this.az += n2;
        while (n2-- > 0) {
            if (this.C++ == 2775) {
                this.a %= 65521;
                this.b %= 65521;
                this.C = 0;
            }
            this.a += (array[n++] & 0xFF);
            this.b += this.a;
        }
    }
    
    private Code(final byte b, final char c) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
    }
    
    private void Z(final Code code) {
        for (int i = this.Code.size(); i > 0; --i) {
            final Code code2 = this.Code.elementAt(i - 1);
            final int n2;
            final int n;
            if ((n = (((n2 = code.f() - code2.f()) == 0) ? (code.Code() - code2.Code()) : n2)) == 0) {
                this.Code.insertElementAt(code, i);
                return;
            }
            if (n > 0) {
                this.Code.insertElementAt(code, i);
                return;
            }
        }
        this.Code.insertElementAt(code, 0);
    }
    
    private int r() {
        if (this.b <= 0) {
            return 0;
        }
        return this.C.S(this.b);
    }
    
    private Code(final byte b, final short n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.Code = new Vector();
    }
    
    private void I(final InputStream inputStream) {
        int n = 0;
        this.Code.removeAllElements();
        final a a;
        if ((a = new a(inputStream)).readByte() != 69 || a.readByte() != 80) {
            throw new IOException();
        }
        int code = 0;
        a a2;
        byte byte1;
        Code code2;
        boolean b;
        boolean b2;
        boolean d;
        int n2;
        Code code3;
        Label_0169_Outer:Label_0234_Outer:Label_0247_Outer:
        while (true) {
            a2 = a;
            Label_0059: {
                try {
                    byte1 = a2.readByte();
                    break Label_0059;
                }
                catch (EOFException ex) {
                    if (n == 0) {
                        throw new IOException();
                    }
                    return;
                    Label_0148: {
                        code2 = new Code(false);
                    }
                Label_0247:
                    while (true) {
                        Block_10: {
                            Block_12: {
                            Label_0208_Outer:
                                while (true) {
                                    Block_8: {
                                    Block_11:
                                        while (true) {
                                            Block_7: {
                                                Label_0195_Outer:Block_6_Outer:
                                                while (true) {
                                                    break Label_0169;
                                                    Label_0135:
                                                    code2 = new Code((short)0);
                                                    break Label_0169;
                                                    while (true) {
                                                        while (true) {
                                                            iftrue(Label_0208:)(!b);
                                                            break Block_7;
                                                            d = (b = (b2 = false));
                                                            continue Block_6_Outer;
                                                        }
                                                        code = code2.Code((DataInput)a, code);
                                                        d = (b = (b2 = (code2 instanceof Code)));
                                                        iftrue(Label_0195:)(!code2.bi);
                                                        continue Label_0234_Outer;
                                                    }
                                                    iftrue(Label_0284:)(!b2);
                                                    break Block_10;
                                                    Label_0122:
                                                    code2 = new Code('\0');
                                                    continue Label_0195_Outer;
                                                    Label_0108:
                                                    code2 = new Code((byte)0, (byte)0);
                                                    continue Label_0195_Outer;
                                                }
                                                iftrue(Label_0221:)(!code2.c);
                                                break Block_8;
                                                Label_0161:
                                                throw new IOException();
                                                iftrue(Label_0046:)(n2 >= code3.I.length);
                                                break Block_11;
                                                Label_0284:
                                                iftrue(Label_0297:)(!code2.c);
                                                break Block_12;
                                            }
                                            b2 = (d = code2.d);
                                            continue Label_0247_Outer;
                                        }
                                        this.Z(new Code(code3.I[n2], (byte)0));
                                        ++n2;
                                        continue Label_0247;
                                    }
                                    b2 = (d = false);
                                    Label_0221:
                                    iftrue(Label_0234:)(!d);
                                    Block_9: {
                                        break Block_9;
                                        switch([Lcom.strobel.decompiler.ast.Label;@14bc0a07)(byte1);
                                    }
                                    b2 = code2.b;
                                    continue Label_0208_Outer;
                                }
                                Label_0096:
                                iftrue(Label_0108:)(n == 0);
                                throw new IOException();
                            }
                            n = 1;
                            Label_0297:
                            this.Z(code2);
                            continue Label_0169_Outer;
                        }
                        code3 = code2;
                        n2 = 0;
                        continue Label_0247;
                    }
                }
            }
        }
    }
    
    private static String Z(final String s) {
        return s.substring(s.indexOf(45) + 1);
    }
    
    private static void Code(final InputStream inputStream, final OutputStream outputStream, final Code code) {
        final DataInputStream dataInputStream = new DataInputStream(inputStream);
        final DataOutputStream dataOutputStream = new DataOutputStream(outputStream);
        int n = 0;
        Code code2 = null;
        final byte[] array = new byte[1024];
        final Code code4;
        final Code code3;
        (code3 = (code4 = new Code((byte)0, (char)0))).a = 1;
        code3.b = 0;
        code3.C = 0;
        code3.az = 0;
        final Vector code5 = code.Code;
        for (int i = 0; i < code5.size(); ++i) {
            final Code code6;
            (code6 = code5.elementAt(i)).Code();
            code2 = code6;
        }
        int read;
        while ((read = dataInputStream.read(array)) >= 0) {
            code4.J(array, 0, read);
            dataOutputStream.write(array, 0, read);
            n += read;
        }
        final Code code8;
        final Code code7 = code8 = code4;
        code7.a %= 65521;
        final Code code9 = code8;
        code9.b %= 65521;
        final int n2 = code8.b << 16 | code8.a;
        final byte[] array2;
        (array2 = new byte[4])[3] = (byte)n2;
        array2[2] = (byte)(n2 >>> 8);
        array2[1] = (byte)(n2 >>> 16);
        array2[0] = (byte)(n2 >> 24);
        final byte[] array3 = array2;
        if (code2.b != n) {
            throw new IOException();
        }
        if (code2.Code.length != array3.length) {
            throw new IOException();
        }
        for (int j = 0; j < code2.Code.length; ++j) {
            if (code2.Code[j] != array3[j]) {
                throw new IOException();
            }
        }
    }
    
    private void J(final boolean b) {
        Code.I = System.currentTimeMillis();
        if (Code.Q) {
            t(99);
        }
        else {
            final int n = (b || Code.aH < 2) ? 1 : 0;
            for (int size = Code.I.size(), i = 0; i < size; ++i) {
                final Code code;
                if ((code = Code.I.elementAt(i)) != Code.d) {
                    code.C.d((boolean)(n != 0));
                }
                else {
                    code.C.d(false);
                }
            }
            t(n * 99);
        }
        System.gc();
        if (Code.bz > 0) {
            this.p();
        }
    }
    
    private static int q() {
        if (Code.aJ >= 4) {
            return -1;
        }
        if (Code.Code != null) {
            boolean b = false;
            Label_0441: {
                final int code;
                if ((code = Code.Code.Code) != -1) {
                    if (code == 0) {
                        return 0;
                    }
                    final int min = Math.min(Code.Code.I * 100 / code, 99);
                    final byte[] code2;
                    if ((code2 = Code.Code.Code) == null) {
                        return min;
                    }
                    final String a = a();
                    final String s = (Code.J != null) ? Code.J : J(a);
                    final byte[] array = code2;
                    final Code code3;
                    (code3 = new Code((short)0, (boolean)(0 != 0))).a(array, 0, array.length);
                    final byte[] array2 = new byte[32];
                    code3.I(array2);
                    final byte[] array3 = array2;
                    final int length = array2.length;
                    final byte[] array4 = array3;
                    final int min2 = Math.min(length, 128);
                    final StringBuffer sb = new StringBuffer();
                    for (int i = 0; i < min2; ++i) {
                        if ((array4[i] & 0xFF) < 16) {
                            sb.append('0');
                        }
                        sb.append(Integer.toString(array4[i] & 0xFF, 16));
                    }
                    if (sb.toString().equals(s)) {
                        Label_0323: {
                            if (Code.J != null) {
                                break Label_0323;
                            }
                            final byte[] array5 = new byte[0];
                            final Code j = Code.J;
                            final String s2 = "resource";
                            final byte[] array6 = code2;
                            try {
                                j.Code(s2, array6);
                                Code.J.Code("resource", a.getBytes());
                                Code.J.Code("resource", s.getBytes());
                                Code.J.Code("resource", array5);
                                Code.J.Code("resource", array5);
                                Code.r = ((Code.J = Code.Code.Code) != null);
                                Code.B = null;
                                break Label_0441;
                                try {
                                    if (new String(Code.J.Code("resource", 5)).equals(Code.J)) {
                                        Code.J = null;
                                        Code.B = null;
                                        Code.Code = null;
                                        return 0;
                                    }
                                }
                                catch (IOException ex) {
                                    final byte[] array7 = new byte[0];
                                    Code.J.Code("resource", array7);
                                    Code.J.Code("resource", array7);
                                }
                                Code.J.Code("resource", 4, code2);
                                Code.J.Code("resource", 5, s.getBytes());
                                Code.B = null;
                                break Label_0441;
                            }
                            catch (IOException ex2) {
                                Code.aK = -3;
                                Code.Code = null;
                                return -1;
                            }
                        }
                    }
                    b = true;
                }
                else {
                    b = true;
                }
            }
            if (b) {
                final String s3 = "resource";
                try {
                    RecordStore.deleteRecordStore(s3);
                }
                finally {}
                if (++Code.aJ < 4) {
                    (Code.Code = new C(B(), b())).start();
                    return 0;
                }
                Code.aK = -2;
                Code.Code = null;
                return -1;
            }
            else {
                Code.Code = null;
            }
        }
        return 100;
    }
    
    public static String I(final int n) {
        return "b_" + n;
    }
    
    public static String Code(final int n, final String s) {
        return (char)(n + 33) + s;
    }
    
    public final void Code() {
        DataInputStream dataInputStream = null;
        try {
            (dataInputStream = new DataInputStream(Code("/l"))).readFully(Code.t);
            dataInputStream.readFully(Code.u);
            for (int i = 0; i < 366; Code.D[i++] = (dataInputStream.readShort() & 0xFFFF)) {}
        }
        catch (Exception ex) {
            final DataInputStream dataInputStream2 = dataInputStream;
            try {
                dataInputStream2.close();
            }
            finally {}
        }
        finally {
            final DataInputStream dataInputStream3 = dataInputStream;
            try {
                dataInputStream3.close();
            }
            finally {}
        }
        Code.B = I("/v");
        d();
        Code.c = new Code(this, '\0');
        Code.b.H();
        C((int)System.currentTimeMillis());
        if (Code.az) {
            Code.I = B();
        }
        if ("debug".equals(Code.Code.getAppProperty("OM-Campaign"))) {
            Code.H = true;
        }
        Label_0277: {
            if (B().equals("undefined")) {
                final String s = "resource";
                try {
                    RecordStore.deleteRecordStore(s);
                }
                finally {}
            }
            else {
                if (a("resource")) {
                    try {
                        final String s2 = new String(Code.J.Code("resource", 2));
                        final String a = a();
                        if (new String(Code.J.Code("resource", 3)).equals(J(s2)) && Z(a).equals(Z(s2))) {
                            break Label_0277;
                        }
                        final String s3 = "resource";
                        try {
                            RecordStore.deleteRecordStore(s3);
                        }
                        finally {}
                    }
                    catch (IOException ex2) {}
                }
                Code.q = true;
            }
        }
        final int n;
        Code.aL = (((n = ((Code.q + Code.r) ? 1 : 0)) > 0) ? (50 / n) : 0);
        final String s4 = "zerorating";
        try {
            RecordStore.deleteRecordStore(s4);
        }
        finally {}
        final Code j = Code.J;
        final String s5 = "trafficrouting";
        final int n2 = 1;
        try {
            Code(Code(j.Code(s5, n2), 0), Code.J.Code("trafficrouting", 2));
        }
        finally {
            U();
        }
        q();
        new Thread(this).start();
    }
    
    private void m() {
        if (Code.m != Code.n) {
            Code.m = Code.n;
            if (Code.n) {
                Code.c.b(48);
            }
            else {
                Code.c.b(49);
            }
        }
        if (Code.l) {
            if (C().equals("hqvga") && Code.C == 0) {
                W();
            }
            Code.l = false;
            final int v = v();
            final int a = Code.b.a();
            h(v, a);
            int n = (v * a << 1) * Code.Z / 1024;
            if (Code.O) {
                n = n * 12 / 10;
            }
            Code.bx = Math.max(Math.max(n, (int)(Code.a * 3L / 10240L)), 150 * Code.Z);
            if (!Code.Q && Code.by > 0) {
                Code.bz = (Code.by - Code.bx) * 9 / 10;
            }
            if (!Code.Q && Code.by > 0 && Code.a <= 2097152L) {
                Code.bz = (Code.by - Code.bx) * 5 / 10;
            }
            I(Code.bx);
            Code.c.b(59);
            final int n2 = v;
            final int n3 = a;
            I(n2);
            I(n3);
            Code.c.b(50);
            if (Code.o) {
                I((int)(Code.Code.Z() ? 1 : 0));
                Code.c.b(51);
            }
            Code.c.b(46);
            Code((Object)this);
        }
        else {
            Code.c.b(46);
        }
        if (Code.k && !Code.Code) {
            Code.Code = true;
        }
        n();
    }
    
    public static void I(final C c) {
        Code.Z.removeElement(c);
    }
    
    public final synchronized void Z() {
        Code.D = 0;
        Code.E = 0;
        l();
        Code.f = false;
        this.notifyAll();
    }
    
    public final synchronized void Code(final boolean n) {
        Code.n = n;
        this.notifyAll();
    }
    
    public final synchronized void I(final boolean b) {
        M(v());
        Code.l = true;
        this.notifyAll();
        if (b) {
            while (Code.l) {
                Code((Object)this, 0);
            }
        }
    }
    
    private synchronized void o() {
        Code.h = true;
        Code.aA = 47;
        this.notifyAll();
    }
    
    public final synchronized void J() {
        if (!Code.f) {
            this.notifyAll();
        }
    }
    
    public static void J(final int aa) {
        Code.aA = aa;
    }
    
    public static int Code() {
        return (int)System.currentTimeMillis();
    }
    
    private synchronized void v(final int aa) {
        try {
            if (c()) {
                return;
            }
            Code.h = true;
            Code.aA = aa;
            this.notifyAll();
            while (Code.h) {
                this.wait();
            }
        }
        catch (InterruptedException ex) {}
    }
    
    private static String a() {
        if (Code.O && (Math.min(v(), Code.b.a()) < 210 || Code.W)) {
            return "qvga-touch";
        }
        return C() + "-" + (Code.O ? "touch" : "keypad");
    }
    
    private static String b() {
        return J(a());
    }
    
    private int I(final long n) {
        try {
            return Code(n);
        }
        catch (RuntimeException ex) {
            this.Z();
            throw ex;
        }
        catch (Error error) {
            this.Z();
            throw error;
        }
    }
    
    private int Z(final byte[] array, final int n) {
        final int n2 = 0;
        try {
            return Z(array, n2, n);
        }
        catch (RuntimeException ex) {
            this.Z();
            throw ex;
        }
        catch (Error error) {
            this.Z();
            throw error;
        }
    }
    
    private int C(final String s) {
        try {
            return Code(s);
        }
        catch (RuntimeException ex) {
            this.Z();
            throw ex;
        }
        catch (Error error) {
            this.Z();
            throw error;
        }
    }
    
    private int o() {
        try {
            return n();
        }
        catch (RuntimeException ex) {
            this.Z();
            throw ex;
        }
        catch (Error error) {
            this.Z();
            throw error;
        }
    }
    
    private int p() {
        try {
            return m();
        }
        catch (RuntimeException ex) {
            this.Z();
            throw ex;
        }
        catch (Error error) {
            this.Z();
            throw error;
        }
    }
    
    public static int J(final int n) {
        if (n <= 0 || n >= Code.e.length) {
            return 0;
        }
        final int n2 = Code.e[n];
        final int[] f = Code.f;
        if (--f[n] == 0) {
            Code.e[n] = 0;
        }
        return n2;
    }
    
    private static byte[] I(String code) {
        code = (String)Code(code);
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        final int n = 1024;
        try {
            final byte[] array = new byte[n];
            int read;
            while ((read = ((InputStream)code).read(array)) >= 0) {
                byteArrayOutputStream.write(array, 0, read);
            }
        }
        catch (Exception ex) {
            final String s = code;
            try {
                ((InputStream)s).close();
            }
            finally {
                return null;
            }
        }
        finally {
            final String s2 = code;
            try {
                ((InputStream)s2).close();
            }
            finally {}
        }
        return byteArrayOutputStream.toByteArray();
    }
    
    private static String B(final String s) {
        return Code().get(s);
    }
    
    public static void Code(final C c) {
        Code.Z.addElement(c);
    }
    
    private static String J(final String s) {
        if (Code.Code == null) {
            Code.Code = new Hashtable();
            final String trim = new String(I("/resources")).trim();
            int n;
            for (int i = 0; i < trim.length(); i = n + 1) {
                final int index = trim.indexOf(61, i);
                if ((n = trim.indexOf(10, index + 1)) < 0) {
                    n = trim.length();
                }
                Code.Code.put(trim.substring(i, index).trim(), trim.substring(index + 1, n).trim());
            }
        }
        return Code.Code.get(s);
    }
    
    private static Hashtable Code() {
        if (Code.I == null) {
            Code.I = new Hashtable();
            InputStream inputStream = null;
            try {
                inputStream = new ByteArrayInputStream(Code());
                final String utf;
                int n;
                int i;
                if ((utf = new DataInputStream(inputStream).readUTF()).indexOf(10) >= 0) {
                    n = 10;
                    i = 0;
                }
                else {
                    n = 38;
                    i = 0;
                }
                while (i < utf.length()) {
                    int n2;
                    if ((n2 = utf.indexOf(n, i)) < 0) {
                        n2 = utf.length();
                    }
                    final String trim;
                    if (!(trim = utf.substring(i, n2).trim()).equals("")) {
                        final int index;
                        String trim2;
                        String trim3;
                        if ((index = trim.indexOf(61)) >= 0) {
                            trim2 = trim.substring(0, index).trim();
                            trim3 = trim.substring(index + 1).trim();
                        }
                        else {
                            trim2 = trim;
                            trim3 = "true";
                        }
                        Code.I.put(trim2, trim3);
                    }
                    i = n2 + 1;
                }
            }
            catch (IOException ex) {
                final InputStream inputStream2 = inputStream;
                try {
                    inputStream2.close();
                }
                finally {}
            }
            finally {
                final InputStream inputStream3 = inputStream;
                try {
                    inputStream3.close();
                }
                finally {}
            }
        }
        return Code.I;
    }
    
    public static Code Code() {
        if (Code.e != null && Code.e.C) {
            return Code.e;
        }
        final DataInputStream dataInputStream = new DataInputStream(new ByteArrayInputStream(Code()));
        try {
            (Code.e = new Code((short)0, (byte)0)).Code(dataInputStream);
            return Code.e;
        }
        catch (IOException ex) {
            return null;
        }
    }
    
    private static byte[] I() {
        final Code j = Code.J;
        final String s = "resource";
        final int n = 1;
        try {
            final byte[] code = j.Code(s, n);
            final Code i = Code.J;
            final String s2 = "resource";
            final int n2 = 4;
            byte[] code2;
            try {
                if ((code2 = i.Code(s2, n2)) == null || code2.length == 0) {
                    return code;
                }
            }
            catch (IOException ex) {
                return code;
            }
            final ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(code);
            final ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(code2);
            final ByteArrayInputStream byteArrayInputStream3 = byteArrayInputStream;
            final Code code3;
            (code3 = new Code((byte)0, (short)0)).I(byteArrayInputStream2);
            final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            Code(byteArrayInputStream3, byteArrayOutputStream, code3);
            return byteArrayOutputStream.toByteArray();
        }
        catch (IOException ex2) {
            return I("/v");
        }
    }
    
    private static int I(final byte[] array) {
        return array.length - 5 - J(array, array.length - 5);
    }
    
    private static int Code(final B b) {
        if (b != null) {
            if (b.Code == 0) {
                b.Code = Code(42, 1, b);
            }
            return b.Code;
        }
        return Code(42, 1, (Object)null);
    }
    
    private Code(final char[] code, int code2, int length, int n, final String s, final J i) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.I = -1;
        this.Code = new Vector();
        this.Code = code;
        this.I = i;
        for (int j = 0; j < this.Code.length; ++j) {
            final byte code3;
            if ((code3 = Code(this.Code[j])) == 1) {
                this.I = 0;
            }
            else if ((code3 & 0x6) > 0) {
                if (this.I < 0) {
                    this.I = 1;
                }
                this.Code = this.Code(this.I);
                break;
            }
        }
        if (this.I < 0) {
            this.I = 0;
            this.Code = null;
        }
        if (code2 == 0) {
            code2 = Integer.MAX_VALUE;
        }
        if ((n & 0x1) == 0x0) {
            int n2 = 0;
            length = this.Code.length;
            if ((n & 0x6) != 0x0) {
                final int n3 = n & 0x4;
                n = (n3 | -n3) >>> 31;
                code2 = Code(this.Code, (boolean)(n != 0), code2, i.I(s), i);
                if (n != 0) {
                    length = code2;
                }
                else {
                    n2 = code2;
                }
            }
            if (n2 > 0) {
                this.y(0);
            }
            this.Code(this.Code, 0, n2, length, 0);
            if (length < this.Code.length) {
                this.y(0);
            }
            return;
        }
        final int n4 = n & 0x4;
        final int n5 = (n4 | -n4) >>> 31;
        Code(this.Code, code2, (n5 != 0) ? (length / i.b()) : 0, (n5 != 0) ? i.I(s) : 0, i, this);
    }
    
    private byte[] Code(final byte b) {
        byte[] array = new byte[this.Code.length];
        byte[] array2 = new byte[this.Code.length];
        for (int i = 0; i < this.Code.length; ++i) {
            final byte code = Code(this.Code[i]);
            array2[i] = (byte)((code == 4) ? 2 : code);
            array[i] = b;
        }
        byte b2 = b;
        byte b3 = -128;
        final Stack stack = new Stack();
        int n = 0;
        for (int j = 0; j < this.Code.length; ++j) {
            switch (this.Code[j]) {
                case '\u202b': {
                    stack.push(new byte[] { b2, b3 });
                    b2 += (byte)((b2 & 0x1) + 1);
                    b3 = -128;
                    break;
                }
                case '\u202a': {
                    stack.push(new byte[] { b2, b3 });
                    b2 += (byte)(-(b2 & 0x1) + 2);
                    b3 = -128;
                    break;
                }
                case '\u202e': {
                    stack.push(new byte[] { b2, b3 });
                    b2 += (byte)((b2 & 0x1) + 1);
                    b3 = 2;
                    break;
                }
                case '\u202d': {
                    stack.push(new byte[] { b2, b3 });
                    b2 += (byte)(-(b2 & 0x1) + 2);
                    b3 = 1;
                    break;
                }
                case '\u202c': {
                    if (!stack.empty()) {
                        final byte[] array3;
                        b2 = (array3 = stack.pop())[0];
                        b3 = array3[1];
                        break;
                    }
                    break;
                }
                default: {
                    array[j] = b2;
                    if (b3 != -128) {
                        array2[j] = b3;
                    }
                    ++n;
                    break;
                }
            }
        }
        if (n < this.Code.length) {
            final char[] code2 = new char[n];
            final byte[] array4 = new byte[n];
            final byte[] array5 = new byte[n];
            int k = 0;
            int n2 = 0;
            while (k < this.Code.length) {
                if (this.Code[k] < '\u202a' || this.Code[k] > '\u202e') {
                    code2[n2] = this.Code[k];
                    array4[n2] = array[k];
                    array5[n2] = array2[k];
                    ++n2;
                }
                ++k;
            }
            this.Code = code2;
            array = array4;
            array2 = array5;
        }
        int l = 0;
        int n3 = 1;
        byte b4 = b;
        while (l < array.length) {
            byte b5;
            for (b5 = array[l]; n3 < array.length && array[n3] == b5; ++n3) {}
            Code(array2, b5, l, n3, Code((byte)Math.max(b4, b5)), Code((byte)Math.max((n3 < array.length) ? array[n3] : b, b5)));
            Code(array2, array, l, n3);
            l = n3;
            b4 = b5;
        }
        return array;
    }
    
    private void Code(final char[] array, final int n, int n2, final int n3, final int n4) {
        if (n2 == n3) {
            this.Code.addElement(new Code(0, n2, n3, n, 0, n4));
            return;
        }
        if (this.Code == null) {
            if (n2 < n3) {
                int n5 = 0;
                for (int i = n2; i < n3; ++i) {
                    if (Code(array[i])) {
                        n5 = 2;
                        break;
                    }
                }
                this.Code.addElement(new Code(0, n2, n3, n, n5, n4));
            }
            return;
        }
        int j = n2;
        while (j < n3) {
            n2 = j;
            final int n6 = (this.Code[n2] & 0x1) - 1;
            final int n7 = (n6 | -n6) >>> 31 ^ 0x1;
            int n8 = 0;
            int n9 = 1;
            int n10 = 0;
            while (j < n3 && this.Code[j] == this.Code[n2]) {
                if (n10 == 0 && !Code.ad && n7 != 0 && "()<>[]{}«»\u2018\u2019\u201c\u201d\u2039\u203a".indexOf(this.Code[j]) >= 0) {
                    n10 = 1;
                }
                Label_0266: {
                    if (n9 != 0) {
                        final int n11 = n7;
                        final char c;
                        if (((Z(c = this.Code[j]) ? 2 : (B(c) ? 4 : (C(c) ? 8 : 0))) & Code.bF) != 0x0) {
                            if (n11 != 1) {
                                break Label_0266;
                            }
                        }
                        else if (n11 != 0) {
                            break Label_0266;
                        }
                        n9 = 0;
                    }
                }
                if (n8 == 0 && Code(this.Code[j])) {
                    n8 = 1;
                }
                ++j;
            }
            this.Code.addElement(new Code(this.Code[n2], n2, j, n, n8 << 1 | n9 << 2 | n10 << 3, n4));
        }
    }
    
    private static boolean Code(final char c) {
        return c(c) || c == '\u200e' || c == '\u200f';
    }
    
    private static String a(String s) {
        if (!s.startsWith("file://")) {
            if (!s.startsWith("/")) {
                s = "/" + s;
            }
            s = "file://" + s;
        }
        return s;
    }
    
    private String l() {
        return this.d + this.q.substring(0, 8);
    }
    
    private static J Code(final String s, final String s2) {
        return new Code(s, s2, Code.aB ^ true);
    }
    
    private static int[] Code(final int[] array, final int[] array2, final int[] array3) {
        for (int i = array3.length - 1; i >= 0; --i) {
            final long n = (long)array3[i] & 0xFFFFFFFFL;
            long n2 = 0L;
            for (int j = array2.length - 1; j >= 0; --j) {
                final long n3 = n2 + (n * ((long)array2[j] & 0xFFFFFFFFL) + ((long)array[i + j + 1] & 0xFFFFFFFFL));
                array[i + j + 1] = (int)n3;
                n2 = n3 >>> 32;
            }
            array[i] = (int)n2;
        }
        return array;
    }
    
    private static boolean a(final String s) {
        final String[] listRecordStores;
        if ((listRecordStores = RecordStore.listRecordStores()) != null) {
            for (int i = 0; i < listRecordStores.length; ++i) {
                if (listRecordStores[i].equals(s)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    private static int Code(int n, final int[] array) {
        while (array[n] == 0) {
            if (++n == array.length) {
                return 0;
            }
        }
        return array.length - n;
    }
    
    private static void q() {
        int n = 0;
        if (Code.b != null) {
            n = Code.b[0];
        }
        else if (Code.a != null) {
            n = Code.a[0] - 3;
        }
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream((n + 3) * 5 + 1);
        final DataOutputStream dataOutputStream2;
        final DataOutputStream dataOutputStream = dataOutputStream2 = new DataOutputStream(byteArrayOutputStream);
        final int n2 = n + 3;
        try {
            dataOutputStream.writeByte(n2);
            if (Code.b != null) {
                dataOutputStream2.write(Code.b, 1, Code.b.length - 1);
            }
            dataOutputStream2.writeByte(3);
            dataOutputStream2.writeInt(Code.n);
            dataOutputStream2.writeByte(4);
            dataOutputStream2.writeInt(Code.bM);
            dataOutputStream2.writeByte(17);
            dataOutputStream2.writeInt(Code.bw);
        }
        catch (IOException ex) {}
        Code.a = byteArrayOutputStream.toByteArray();
    }
    
    private void A(final int n) {
        this.k.F(n);
    }
    
    private static void K(final int n) {
        final Object i;
        monitorenter(i = Code.I);
        while (true) {
            if (Code.Z == null) {
                return;
            }
            final a z = Code.Z;
            try {
                z.I(n);
                Code.Z = Code.Z.Code();
                continue;
            }
            finally {
                monitorexit(i);
            }
        }
    }
    
    private void w() {
        Code.Code.I();
        monitorenter(this);
        if (this.bk != 0) {
            return;
        }
        final Code code = Code.Code;
        try {
            code.Z();
            throw new RuntimeException();
        }
        finally {
            monitorexit(this);
        }
    }
    
    private static synchronized int d(final String s) {
        final int n = ++Code.ch;
        new Code(n, s);
        return n;
    }
    
    private int s(final int n) {
        return this.Code.elementAt(n).bk;
    }
    
    private int p(final int n) {
        return this.Code.elementAt(n).bl;
    }
    
    private void y(final int n) {
        this.Code.addElement(new Code(n));
    }
    
    private static String d() {
        if (Code.C != null) {
            return Code.C;
        }
        if (Code.B != null && Code.B.length() >= 2) {
            return Code.B.substring(0, 2);
        }
        return "";
    }
    
    private static String C(final String s) {
        final char[] array = new char[s.length()];
        for (int i = 0; i < array.length; ++i) {
            array[i] = '*';
        }
        return new String(array);
    }
    
    private int q(final int n) {
        return this.Code.elementAt(n).a;
    }
    
    private static int w(int n) {
        n |= 0x8000;
        DataInputStream dataInputStream = null;
        while (true) {
            if ((n & 0x8000) == 0x0) {
                try {
                    dataInputStream = new DataInputStream(Code("/t"));
                    n = Code(n, dataInputStream);
                    while (true) {
                        f(n);
                        dataInputStream.readFully(Code.Z, Code.S, n);
                        final DataInputStream dataInputStream2 = dataInputStream;
                        try {
                            dataInputStream2.close();
                        }
                        finally {}
                        return n();
                        final a code = a.Code(n);
                        dataInputStream = new DataInputStream(code);
                        n = code.i();
                        continue;
                    }
                }
                catch (Exception ex) {
                    final DataInputStream dataInputStream3 = dataInputStream;
                    try {
                        dataInputStream3.close();
                    }
                    finally {}
                }
                finally {
                    final DataInputStream dataInputStream4 = dataInputStream;
                    try {
                        dataInputStream4.close();
                    }
                    finally {}
                }
                return n();
            }
            continue;
        }
    }
    
    private static byte[] J(int n2) {
        DataInputStream dataInputStream = null;
        Label_0031: {
            if ((n & 0x8000) != 0x0) {
                break Label_0031;
            }
            try {
                dataInputStream = new DataInputStream(Code("/t"));
                n = Code(n, dataInputStream);
                while (true) {
                    final byte[] array = new byte[n];
                    dataInputStream.readFully(array, 0, n);
                    n2 = (int)(Object)array;
                    final DataInputStream dataInputStream2 = dataInputStream;
                    try {
                        dataInputStream2.close();
                    }
                    finally {
                        return (byte[])(Object)n2;
                    }
                    final a code = a.Code(n);
                    dataInputStream = new DataInputStream(code);
                    n = code.i();
                    continue;
                }
            }
            catch (Exception ex) {
                final DataInputStream dataInputStream3 = dataInputStream;
                try {
                    dataInputStream3.close();
                }
                finally {
                    return null;
                }
            }
            finally {
                final DataInputStream dataInputStream4 = dataInputStream;
                try {
                    dataInputStream4.close();
                }
                finally {}
            }
        }
    }
    
    private static String c(final String s) {
        final StringBuffer sb = new StringBuffer();
        for (int i = 0; i < s.length(); ++i) {
            final char char1;
            if (((char1 = s.charAt(i)) <= '/' || char1 >= ':') && (char1 <= '@' || char1 >= '[') && (char1 <= '`' || char1 >= '{') && "-_.~".indexOf(char1) == -1 && "%&=".indexOf(char1) == -1) {
                sb.append('%').append(Integer.toString(char1, 16));
            }
            else {
                sb.append(char1);
            }
        }
        return sb.toString();
    }
    
    private void J(final byte[] array, final int n) {
        this.t = new Code(array, n, 32);
    }
    
    private static boolean Code(final byte[] array, final int n, final boolean b) {
        if (n == 0) {
            return false;
        }
        int n2 = 0;
        ++n2;
        for (int n3 = array[0] & 0xFF, i = 0; i < n3; ++i) {
            final int b2;
            if ((b2 = B(array, n2, n - n2)) < 0) {
                return false;
            }
            final int n4 = n2 + b2;
            final int b3;
            if ((b3 = B(array, n4, n - n4)) <= 2) {
                return false;
            }
            if ((n2 = n4 + b3) == n) {
                return false;
            }
            if (array[0 + n2++] != 0) {
                final int j;
                if ((j = J(array, n2, n - n2)) < 0) {
                    return false;
                }
                n2 += j;
            }
            if (b) {
                final int b4;
                if ((b4 = B(array, n2, n - n2)) < 0) {
                    return false;
                }
                n2 += b4;
            }
        }
        return n2 == n;
    }
    
    private String k() {
        final String j;
        if ((j = this.j()) != null && j.length() > 0 && j.charAt(0) == '\0') {
            return this.p + j.substring(1, j.length());
        }
        return j;
    }
    
    private static boolean Code(final Code code, final char[] array, final int n, int n2, final int n3, int n4, final int n5, final int n6) {
        if ((n4 = ((n4 > 0 && n3 >= n4 - 1) ? 1 : 0)) != 0 && n5 != 0 && n2 > 0 && array[n + n2 - 1] == ' ') {
            --n2;
        }
        if (code != null) {
            code.Code(array, n3, n, n + n2, n6);
            if (n4 != 0 && n5 != 0) {
                code.y(n3);
            }
        }
        else {
            e(I(array, n, n + n2 - n));
        }
        return n4 != 0;
    }
    
    private static B[] Code(final B[] array, final int n) {
        final B[] array2 = new B[n];
        System.arraycopy(array, 0, array2, 0, array.length);
        return array2;
    }
    
    private static int E() {
        if (!Code.am || Code.k == null) {
            return 0;
        }
        final Object j;
        monitorenter(j = Code.J);
        final byte[] k = Code.k;
        try {
            f(k.length / 3);
            for (int i = 0; i < Code.k.length; i += 3) {
                Code.Z[Code.S + i / 3] = Code.k[i];
            }
            return n();
        }
        finally {
            monitorexit(j);
        }
    }
    
    private Code(byte[] array, int n, int n2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.k = new Code((short)0, false);
        this.f = new byte[64];
        this.h = new byte[64];
        this.Code = new byte[32];
        if (n2 > 64) {
            this.k.a(array, n, n2);
            n = 0;
            n2 = 64;
            array = new byte[64];
            this.k.I(array);
            this.k.K();
        }
        System.arraycopy(array, n, this.f, 0, n2);
        System.arraycopy(array, n, this.h, 0, n2);
        for (int i = 0; i < 64; ++i) {
            final byte[] h = this.h;
            final int n3 = i;
            h[n3] ^= 0x36;
            final byte[] f = this.f;
            final int n4 = i;
            f[n4] ^= 0x5C;
        }
        this.k.a(this.h, 0, 64);
    }
    
    private static synchronized void Code(final DataOutputStream dataOutputStream) {
        dataOutputStream.writeBoolean(Code.E);
        dataOutputStream.writeByte(-1);
        dataOutputStream.writeByte(Code.J);
        dataOutputStream.writeByte(Code.B);
        dataOutputStream.writeUTF((Code.h == null) ? "" : Code.h);
        dataOutputStream.writeUTF((Code.g == null) ? "" : Code.g);
        dataOutputStream.writeByte(Code.bs);
        dataOutputStream.writeBoolean(Code.G);
        dataOutputStream.writeInt("mini5.opera-mini.net".hashCode());
        dataOutputStream.writeBoolean(Code.u);
        dataOutputStream.writeLong(Code.J);
        dataOutputStream.writeByte(Code.C.size());
        final Enumeration keys = Code.C.keys();
        while (keys.hasMoreElements()) {
            final String s = (String)keys.nextElement();
            dataOutputStream.writeUTF(s);
            final Code code = (Code)((Object[])Code.C.get(s))[0];
            Code(dataOutputStream, code.I);
            dataOutputStream.writeLong(code.Z);
            dataOutputStream.write(code.g);
            dataOutputStream.write(code.f.length);
            dataOutputStream.write(code.f);
            if (Code.I[1] == null) {
                dataOutputStream.writeInt(0);
            }
            else {
                Code(dataOutputStream, code.g);
                Code(dataOutputStream, code.h);
            }
        }
    }
    
    private synchronized void t() {
        if (this.h() || this.h == null) {
            this.s();
            return;
        }
        if (this.g != null) {
            final Code code = new Code((short)0, false);
            final byte[] code2;
            if ((code2 = Code(Code(this.g, this.I)))[0] != 0 || code2[1] != 1 || code2[code2.length - 32 - 1] != 0) {
                this.s();
                return;
            }
            for (int i = 2; i < code2.length - 32 - 2; ++i) {
                if (code2[i] != -1) {
                    this.s();
                    return;
                }
            }
            code.F((int)(this.Z >> 32));
            code.F((int)this.Z);
            code.a(Code(this.h), 0, this.h.length << 2);
            code.I(code2);
            for (int j = 0; j < 32; ++j) {
                if (code2[j] != code2[j + code2.length - 32]) {
                    this.s();
                    return;
                }
            }
            this.g = null;
            if (Code.I[1] != null) {
                I("md");
            }
        }
        if (this.Code == null) {
            final Code code3 = Code(this.h);
            final byte[] array = new byte[this.h.length << 2];
            for (int k = 2; k < array.length - 32; ++k) {
                while (array[k] == 0) {
                    code3.C(array, k);
                }
            }
            array[0] = 0;
            array[1] = 2;
            array[array.length - 32 - 1] = 0;
            code3.C(array, array.length - 32);
            this.g.J(array, array.length - 32);
            code3.J(array, array.length - 32);
            this.Code = Code(Code(Code(array, 0, array.length), this.h));
            this.a = 0;
        }
    }
    
    private synchronized int I(final Code code) {
        if (this.Code == null) {
            return -1;
        }
        final byte[] g;
        (g = code.g)[0] = (byte)(this.a >> 16);
        g[1] = (byte)this.a;
        this.g.B(g, 2);
        this.g.C(g, 0);
        (code.s = new Code(g, 0, 32)).B(this.g, 0, 8);
        this.g.C(g, 0);
        (code.t = new Code(g, 0, 32)).B(this.g, 0, 8);
        this.g.C(g, 0);
        (code.u = new Code(g)).d(g, 0, 1024);
        this.g.C(g, 0);
        (code.v = new Code(g)).d(g, 0, 1024);
        return this.a++;
    }
    
    private void ak() {
        if (this.Code != null) {
            final a code = this.Code;
            try {
                code.close();
            }
            finally {}
            this.Code = null;
        }
        if (this.a != null) {
            final J a = this.a;
            try {
                a.close();
            }
            finally {}
            this.a = null;
        }
    }
    
    private Code(final int a, final int n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this('\0', '\0');
        this.a = a;
    }
    
    private void I(final byte[] array) {
        final int n = this.bk << 3;
        this.Code((byte)(-128));
        while (this.C != 0) {
            this.Code((byte)0);
        }
        if (this.b > 14) {
            this.L();
        }
        this.h[15] = n;
        this.L();
        Code(this.bl, array, 0);
        Code(this.br, array, 4);
        Code(this.bo, array, 8);
        Code(this.a, array, 12);
        Code(this.bp, array, 16);
        Code(this.bn, array, 20);
        Code(this.bh, array, 24);
        Code(this.bm, array, 28);
        this.K();
    }
    
    private void i(final int n, final int n2) {
        this.Code.readFully(this.g, n, n2);
        Code(n2, 0L, 0L);
    }
    
    private synchronized void I(final Object o) {
        final Hashtable hashtable = (Hashtable)((Object[])o)[3];
        final StringBuffer sb = new StringBuffer();
        final Enumeration keys = hashtable.keys();
        while (keys.hasMoreElements()) {
            if (sb.length() > 0) {
                sb.append('\0');
            }
            sb.append(keys.nextElement());
        }
        this.I((int)((Object[])o)[1], sb.toString());
    }
    
    public final void I(final String s, final String s2) {
        final int length = this.B.length;
        if (this.cF >= length) {
            final Code[] b = new Code[length + 5];
            for (int i = 0; i < this.cF; ++i) {
                b[i] = this.B[i];
            }
            this.B = b;
        }
        this.B[this.cF++] = new Code(s, s2);
    }
    
    public static void Code(final InputStream inputStream, int i) {
        while (i > 0) {
            i -= (int)inputStream.skip(i);
        }
    }
    
    private synchronized int Code(final Object o) {
        return (int)((Object[])o)[5];
    }
    
    private static void Code(final DataOutputStream dataOutputStream, final int[] array) {
        if (array != null) {
            dataOutputStream.writeShort(array.length);
            dataOutputStream.write(Code(array));
            return;
        }
        dataOutputStream.writeShort(0);
    }
    
    private Code(final int[] i) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.g = new Code();
        this.f = new byte[0];
        this.g = new byte[8];
        this.h = new byte[32];
        this.I = i;
    }
    
    private static J Code(final int n, final int n2, final int n3) {
        final Integer n4 = new Integer(n | n2 | n3);
        Code code;
        if ((code = Code.Z.get(n4)) == null) {
            code = new Code(Font.getFont(n, n2, n3));
            Code.Z.put(n4, code);
        }
        return code;
    }
    
    private int r(final int n) {
        return this.q(n) - this.p(n);
    }
    
    private boolean g() {
        return this.r() == 112;
    }
    
    private static int Code(final char[] array, int n) {
        if ((n & 0x8) != 0x0) {
            for (int i = 0; i < array.length; ++i) {
                final int index;
                if ((index = "()<>[]{}«»\u2018\u2019\u201c\u201d\u2039\u203a".indexOf(array[i])) >= 0) {
                    array[i] = "()<>[]{}«»\u2018\u2019\u201c\u201d\u2039\u203a".charAt(((index & 0x1) == 0x0) ? (index + 1) : (index - 1));
                }
            }
        }
        if ((n & 0x4) != 0x0) {
            int length;
            for (int n2 = (length = array.length) / 2, j = 0; j < n2; ++j) {
                final char c = array[j];
                array[j] = array[length - j - 1];
                array[length - j - 1] = c;
            }
        }
        int length2 = array.length;
        if ((n & 0x2) != 0x0) {
            n = 0;
            for (int k = 0; k < array.length; ++k) {
                if (Code(array[n])) {
                    System.arraycopy(array, n + 1, array, n, array.length - (n + 1));
                }
                else {
                    ++n;
                }
            }
            length2 = n;
        }
        return length2;
    }
    
    private void Code(final boolean b, final int n) {
        if (this.Z(n)) {
            if (b) {
                this.run();
                return;
            }
            Code((Runnable)this);
        }
    }
    
    private void C(final byte[] array, final int n, final int n2) {
        this.k.I(this.Code);
        this.k.a(this.f, 0, 64);
        this.k.a(this.Code, 0, 32);
        this.k.I(this.Code);
        System.arraycopy(this.Code, 0, array, n, n2);
        this.k.a(this.h, 0, 64);
    }
    
    private static String c() {
        if (Code.B == null) {
            Code.B = B("locale");
        }
        return Code.B;
    }
    
    private void Code(final byte b) {
        this.h[this.C++] = b;
        if (this.C == this.h.length) {
            this.Code(this.h, 0);
            this.C = 0;
        }
        ++this.bk;
    }
    
    private Code(final byte b, final int n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
    }
    
    private Code(final Code c, final int az, final int c2, final String b, final String c3, final String d, final int b2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.C = c;
        this.az = az;
        this.C = c2;
        this.b = b;
        this.c = c3;
        this.d = d;
        this.b = b2;
    }
    
    private void a(final byte[] array, int n, int i) {
        while (this.C != 0 && i > 0) {
            this.Code(array[n]);
            ++n;
            --i;
        }
        while (i > this.h.length) {
            this.Code(array, n);
            n += this.h.length;
            i -= this.h.length;
            this.bk += this.h.length;
        }
        while (i > 0) {
            this.Code(array[n]);
            ++n;
            --i;
        }
    }
    
    private synchronized void Code(String replace, final int n, final String s) {
        switch (n) {
            case 112: {
                if (!this.J.containsKey(s)) {
                    this.Code.addElement(s);
                }
            }
            case 83:
            case 85:
            case 97:
            case 114:
            case 120: {
                if (n != 97 && replace != null && replace.length() > 0) {
                    replace = replace.replace('\r', ' ').replace('\n', ' ');
                }
                this.J.put(s, replace);
            }
            case 99: {
                if (this.J.get(s) == null) {
                    this.J.put(s, replace);
                    return;
                }
                this.J.remove(s);
            }
            case 115: {
                this.J.put(s, replace.replace(' ', '\0'));
                break;
            }
        }
    }
    
    public static void B(final int n) {
        if (Code.Z == null) {
            Code.Z = new Code(n, 0);
        }
    }
    
    private boolean d() {
        return this.b != null;
    }
    
    private void e(final int n, final int n2) {
        Code.Code.I();
        final int u;
        if ((u = this.u()) != 0) {
            I(n);
            Code.Code.Code(u, n2);
            return;
        }
        Code.Code.Z();
    }
    
    private boolean I(final int n) {
        return this.C == 0 || this.bh + n < this.C;
    }
    
    private static boolean Code(int bg, String i) {
        if ("cookies".equals(i)) {
            if (bg == 0) {
                return Code.aj = true;
            }
            Code.aj = false;
            return true;
        }
        else {
            if ("protocol".equals(i)) {
                final int n = bg;
                bg = ((n | -n) >>> 31 ^ 0x1);
                monitorenter(i = (String)Code.I);
                if ((Code.G ? 1 : 0) == bg) {
                    return true;
                }
                Code.G = (bg != 0);
                try {
                    R();
                    I("md");
                    return true;
                }
                finally {
                    monitorexit(i);
                }
            }
            if ("landscape".equals(i)) {
                if (bg != Code.aI) {
                    Code.aI = bg;
                    final int n2 = bg - 1;
                    bg = ((n2 | -n2) >>> 31 ^ 0x1);
                    Code.Code.Code((boolean)(bg != 0));
                    Code.l = true;
                }
                return true;
            }
            if ("imagequality".equals(i)) {
                Code.bG = bg;
                return true;
            }
            if ("fullscreen".equals(i)) {
                return true;
            }
            if ("eula_agreed".equals(i)) {
                final int n3 = bg;
                if ((Code.ai = ((n3 | -n3) >>> 31 != 0)) && Code.ah) {
                    I("mc");
                }
                return true;
            }
            return false;
        }
    }
    
    private void E() {
        final Enumeration elements = this.Code.elements();
        while (elements.hasMoreElements()) {
            this.J.remove(elements.nextElement());
        }
        this.Code.removeAllElements();
    }
    
    private boolean A() {
        return this.cq == 0;
    }
    
    private static void Code(final int n, final String s, final boolean b) {
        if (Code.I[n] == null || !Code.I[n].equals(s)) {
            Code.I[n] = s;
            if (n == 1) {
                if (b) {
                    Code.ah = true;
                    I("mc");
                }
                N();
            }
        }
    }
    
    private static void I(final String s) {
        try {
            final Z b = new Z();
            final DataOutputStream dataOutputStream = new DataOutputStream(b);
            if ("mc".equals(s)) {
                final DataOutputStream dataOutputStream2;
                (dataOutputStream2 = dataOutputStream).write(1);
                dataOutputStream2.writeUTF(Code.ai ? J(1) : "");
                dataOutputStream2.writeBoolean(false);
            }
            else if ("md".equals(s)) {
                final DataOutputStream dataOutputStream3;
                (dataOutputStream3 = dataOutputStream).write(8);
                final byte[] array = new byte[32];
                final Code a;
                monitorenter(a = Code.A);
                final Code a2 = Code.A;
                final byte[] array2 = array;
                try {
                    a2.I(array2);
                    Code.A.a(array, 0, 32);
                }
                finally {
                    monitorexit(a);
                }
                dataOutputStream3.write(array);
                dataOutputStream3.writeBoolean(false);
                Code(dataOutputStream3);
                dataOutputStream3.writeBoolean(Code.ak);
                dataOutputStream3.writeInt(0);
                dataOutputStream3.writeInt(Code.bG);
                dataOutputStream3.writeShort(Code.bI);
                dataOutputStream3.writeShort(Code.bJ);
                dataOutputStream3.writeInt(Code.bM);
                dataOutputStream3.writeUTF((Code.j != null) ? Code.j : "");
                dataOutputStream3.writeByte(Code.C);
                dataOutputStream3.writeUTF("");
                dataOutputStream3.write(Code.n, 0, 32);
                dataOutputStream3.write(Code.o, 0, 32);
            }
            final byte[] byteArray = b.toByteArray();
            final String s2 = s;
            try {
                RecordStore.deleteRecordStore(s2);
            }
            finally {}
            Code.J.Code(s, byteArray);
        }
        finally {}
    }
    
    private static synchronized void I(final int n, final byte[] array) {
        try {
            Code(n, array);
            final String s = "trafficrouting";
            try {
                RecordStore.deleteRecordStore(s);
            }
            finally {}
            final byte[] array2 = new byte[4];
            Z(Code.bw, array2, 0);
            Code.J.Code("trafficrouting", array2);
            Code.J.Code("trafficrouting", array);
        }
        finally {}
    }
    
    private static B Code(final int n, final boolean b) {
        final byte[] j = J(n);
        return Code.Z.Code(j, j.length, b);
    }
    
    private boolean Code(final B[] array, final int n, final B b) {
        final B b2;
        if ((b2 = array[n]) != null) {
            this.bh -= b2.Code();
            array[n] = null;
        }
        final int code = b.Code();
        if (!this.I(code)) {
            return false;
        }
        array[n] = b;
        this.bh += code;
        return true;
    }
    
    private boolean e() {
        return this.c != null;
    }
    
    private static DataInputStream Code(final int n) {
        final DataInputStream dataInputStream = new DataInputStream(Code("/t"));
        Code(n, dataInputStream);
        return dataInputStream;
    }
    
    private void z(final int a) {
        if (a != this.a) {
            this.I = new B[this.Code.length];
        }
        this.a = a;
    }
    
    private String e() {
        return (String)this.I[42];
    }
    
    private boolean f() {
        final int r;
        return (r = this.r()) == 97 || r == 120 || r == 112 || r == 83 || r == 85;
    }
    
    private void J(final Code code) {
        synchronized (code) {
            if (s() < 0) {
                Code.Code = this.Code("\u0000\u0000");
            }
            else {
                switch (s()) {
                    case 2: {
                        Code.Code = this.Code("\u0002\u0000");
                        break;
                    }
                    case 5: {
                        Code.Code = this.Code(Code.e);
                        break;
                    }
                    default: {
                        Code.Code = null;
                        break;
                    }
                }
            }
        }
    }
    
    private char[][] Code(final String s) {
        char[][] code = null;
        switch (s.charAt(0)) {
            case '\u0001': {
                code = this.Code("\u0000\f\u00020+0\u00171./:_-~%$?=&!+#*@,;\\'()1\u00042abc2\u00043def3\u00044ghi4\u00045jkl5\u00046mno6\u00057pqrs7\u00048tuv8\u00059wxyz9\u0000*\u0003# *#");
                break;
            }
            case '\u0002': {
                (code = new char[1][1])[0][0] = '\u0001';
                break;
            }
            case '\u0003': {
                (code = new char[25][])[0] = new char[1];
                code[0][0] = '\u0001';
                final String s2 = "QWERTYUIOPASDFGHJKZXCVBN";
                final String string = s2 + s2.toLowerCase();
                for (int i = 1; i <= 24; ++i) {
                    (code[i] = new char[3])[0] = (code[i][1] = string.charAt(2 * (i - 1)));
                    code[i][2] = string.charAt(2 * (i - 1) + 1);
                }
                break;
            }
            default: {
                code = new char[1][1];
                break;
            }
        }
        final char char1;
        final char[][] array = new char[(char1 = s.charAt(1)) + code.length][];
        for (int j = 0; j < code.length; ++j) {
            array[j] = code[j];
        }
        int n = 2;
        for (char c = '\0'; c < char1; ++c) {
            final int n2 = s.charAt(n++) + '\u0001';
            s.getChars(n, n + n2, array[code.length + c] = new char[n2], 0);
            n += n2;
        }
        return array;
    }
    
    private synchronized boolean l() {
        final Code n;
        if (!(n = this.n).aE || n.B.Code() || n.a.Code()) {
            return false;
        }
        final B b = n.B;
        final B a = n.a;
        final B b2 = b;
        if (b.Code() || a.Code()) {
            if (b2.Code() == a.Code()) {
                return false;
            }
        }
        else if (b2.Code(a) == 0) {
            return false;
        }
        return true;
    }
    
    private void u() {
        this.az = 0;
        if (!this.b.endsWith("/")) {
            this.b += "/";
        }
        if (this.b.equals("file:///") || this.b.equals("file://localhost/")) {
            this.v();
            return;
        }
        final Code i = Code.I;
        final String b = this.b;
        final boolean b2 = false;
        final int n = 1;
        try {
            this.j = i.Code(b, b2, n);
            this.Code = this.j.Code.list(this.d, false);
        }
        catch (IOException ex) {}
        finally {
            final FileConnection code = this.j.Code;
            try {
                e.Code(code);
            }
            finally {}
        }
        final FileConnection code2 = this.j.Code;
        try {
            e.Code(code2);
        }
        finally {}
        if (this.Code == null) {
            return;
        }
        this.Code = new Vector();
        final Vector code3 = new Vector();
        while (this.Code.hasMoreElements()) {
            final String s = this.Code.nextElement();
            final int n2;
            Code((((n2 = (0x3 | (s.endsWith("/") ? 1 : 0) << 2)) & 0x4) == 0x0) ? this.Code : code3, new Object[] { this.b + s, new Integer(n2), s, null });
        }
        for (int j = 0; j < this.Code.size(); ++j) {
            code3.addElement(this.Code.elementAt(j));
        }
        this.Code = code3;
    }
    
    private static String i(String j) {
        if (Code.az) {
            final Code i = Code.I;
            Label_0030: {
                if (j == null) {
                    break Label_0030;
                }
                final String s = "";
                final String s2 = j;
                try {
                    if (!s.equals(s2)) {
                        i.n = j;
                        return null;
                    }
                    i.n = null;
                    i.n = i.Z();
                    if ((j = i.b.J()) == null) {
                        j = "";
                    }
                    return "dialog:" + j;
                }
                finally {}
            }
        }
        return null;
    }
    
    private static void N() {
        final Object i;
        monitorenter(i = Code.I);
        int j = 0;
        final Vector b = Code.B;
        try {
            while (j < b.size()) {
                final Vector b2 = Code.B;
                final int n = j;
                try {
                    final Code code;
                    if ((code = b2.elementAt(n)) != null) {
                        Code.B.setElementAt(null, j);
                        code.x = false;
                        code.O();
                        if (code.Code.isEmpty()) {
                            code.Code(false, 0);
                        }
                    }
                }
                finally {
                    ++j;
                    continue;
                }
                break;
            }
        }
        finally {
            monitorexit(i);
        }
    }
    
    public static char[] Code(final int n) {
        if (Code.Code != null) {
            for (int i = Code.Code.length - 1; i > 0; --i) {
                if (Code.Code[i][0] == (char)n) {
                    return Code.Code[i];
                }
            }
            if (n >= 32 || n == 10) {
                if ((Code.Code[0][0] & '\u0001') != 0x0 && (n <= 255 || n == 10)) {
                    final char[] array2;
                    final char[] array = array2 = new char[2];
                    array[0] = (array2[1] = (char)n);
                    return array2;
                }
                if (Code()) {
                    final f code = Code.Code;
                    try {
                        final String keyName;
                        if (((keyName = code.getKeyName(n)).length() == 1 && Character.toLowerCase(keyName.charAt(0)) == Character.toLowerCase((char)n)) || (n == 32 && keyName.toLowerCase().equals("space"))) {
                            final char[] array4;
                            final char[] array3 = array4 = new char[2];
                            array3[0] = (array4[1] = (char)n);
                            return array4;
                        }
                    }
                    finally {}
                }
            }
        }
        return null;
    }
    
    private boolean Code(final int n, final boolean b, final B b2, final B b3) {
        B[] array;
        B[] array2;
        if (b) {
            array = this.Code;
            array2 = this.I;
        }
        else {
            array = this.I;
            array2 = this.Code;
        }
        if (!this.Code(array, n, b2)) {
            return false;
        }
        if (b3 != null) {
            this.Code(array2, n, b3);
        }
        return true;
    }
    
    private synchronized void s() {
        this.h = null;
        this.g = null;
        this.Code = null;
        System.arraycopy(this.h, 0, this.g, 0, 8);
    }
    
    private boolean Code(final long n) {
        return this.Z < n || this.Z - 1814400000L > n;
    }
    
    private boolean i() {
        return this.Code != null && this.az < this.Code.size();
    }
    
    private Code(final char c, final short n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
    }
    
    private Code(final byte b, final boolean b2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.h = new int[1536];
        this.Code = new B[256];
        this.I = new B[256];
    }
    
    private void D() {
        this.b = true;
        final a code = this.Code;
        try {
            code.close();
        }
        finally {}
        Code((Runnable)new Code(false, (short)0));
    }
    
    private static int s() {
        if (Code.bA == 0) {
            return Code.J;
        }
        return 0;
    }
    
    private void Code(final int n, final boolean b, final boolean b2) {
        final B b3;
        if (b && (b3 = this.I[n]) != null) {
            this.bh -= b3.Code();
            this.I[n] = null;
        }
        final B b4;
        if (b2 && (b4 = this.Code[n]) != null) {
            this.bh -= b4.Code();
            this.Code[n] = null;
        }
    }
    
    private boolean J(final int n, final int n2) {
        return n < this.az && this.h[n * 6] == n2;
    }
    
    private Code(final char c, final int n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
    }
    
    public static boolean Code() {
        return (Code.Code[0][0] & '\u0002') == 0x0;
    }
    
    private static int Z(final Code code) {
        final Code[] code2;
        d((code2 = code.Code()).length);
        for (int i = 0; i < code2.length; ++i) {
            if (code2[i] != null) {
                e(Code(52, 1, code2[i]));
            }
        }
        return l();
    }
    
    private synchronized void I(final Object o, final int n) {
        final Hashtable hashtable = (Hashtable)((Object[])o)[3];
        if (!(boolean)((Object[])o)[4]) {
            hashtable.clear();
        }
        final Integer n2 = new Integer(n);
        if (!hashtable.containsKey(n2)) {
            hashtable.put(n2, n2);
            return;
        }
        hashtable.remove(n2);
    }
    
    private Code(final Code h, final int n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.b = true;
        this.h = h;
    }
    
    private void D(final int bl) {
        if (this.bl != bl) {
            if (bl == 3 && this.bh == 0) {
                this.bh = this.Code.h();
            }
            this.e(this.bl = bl, 18);
        }
        if (bl >= 4) {
            Code(0L, this.bq, 0L);
            this.bq = 0;
        }
        V();
    }
    
    private Code(final Code i, String j, final String d) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        j = I(j);
        this.i = i;
        this.b = j;
        this.d = d;
        this.b = false;
        this.u();
    }
    
    private Code(final String b, final String s) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.b = b;
        this.d = a(s);
    }
    
    private boolean J(final String s) {
        if (this.d == null || s == null) {
            return this.d == null && s == null;
        }
        return this.d.equals(a(s));
    }
    
    private boolean k() {
        Code code = null;
        final Code i = Code.I;
        final String d = this.d;
        final boolean b = false;
        final int n = 2;
        try {
            final boolean s = (code = i.Code(d, b, n)).s();
            final FileConnection code2 = code.Code;
            try {
                e.Code(code2);
            }
            finally {
                return s;
            }
        }
        catch (IOException ex) {
            final FileConnection code3 = code.Code;
            try {
                e.Code(code3);
            }
            finally {
                return false;
            }
        }
        finally {
            final FileConnection code4 = code.Code;
            try {
                e.Code(code4);
            }
            finally {}
        }
    }
    
    private boolean j() {
        Code code = null;
        final Code i = Code.I;
        final String d = this.d;
        final boolean b = false;
        final int n = 1;
        try {
            final boolean exists = (code = i.Code(d, b, n)).Code.exists();
            final FileConnection code2 = code.Code;
            try {
                e.Code(code2);
            }
            finally {
                return exists;
            }
        }
        catch (IOException ex) {
            final FileConnection code3 = code.Code;
            try {
                e.Code(code3);
            }
            finally {
                return false;
            }
        }
        finally {
            final FileConnection code4 = code.Code;
            try {
                e.Code(code4);
            }
            finally {}
        }
    }
    
    private void B(final byte[] array, final int n, final int n2) {
        this.k.a(array, n, n2);
    }
    
    private B Code(int[] code, final int n, final int n2, final int n3, final int n4, final int n5) {
        code = Code(code, n, n2, n3, n4, 0, 0, 0, 0, n5, false);
        return this.Code(code, code.length / n4, n4, true, true);
    }
    
    private B Code(final byte[] array, final int n, final int n2, final int n3, final B[] array2, final boolean b) {
        return this.Code(array, n, n2, -1, -1, n3, array2, b);
    }
    
    private static void Code(final int[] array, final int n, final int n2, final int n3, final int[] array2, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (n7 == 0) {
            return;
        }
        int n9 = 0;
        while (true) {
            if (n9 >= n8) {
                return;
            }
            final int n10 = n + (n2 + n9) * n3;
            final int n11 = n4 + (n5 + n9) * n6;
            try {
                System.arraycopy(array, n10, array2, n11, n7);
                ++n9;
                continue;
            }
            catch (ArrayIndexOutOfBoundsException ex) {}
        }
    }
    
    private Code(final String c, final String b, final int az) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.C = true;
        this.c = c;
        this.b = b;
        this.az = az;
    }
    
    private Code(final char c, final boolean b) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this('\0', 0);
    }
    
    private Code(final Code l, final Object[] i, final int[] j, final Code code, final Hashtable k, final boolean c) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.d = true;
        this.J = new Hashtable();
        this.Code = new Vector();
        this.b = null;
        this.az = -1;
        this.l = l;
        this.I = i;
        this.I = j;
        if (k != null) {
            this.J = k;
        }
        this.C = c;
        this.b = j[14];
        this.B(code);
    }
    
    private void B(final Code code) {
        this.C = new Code(this, code, true, this.C);
        this.m = new Code(this.C, (byte)0);
        this.n = new Code(this.C);
    }
    
    private int u() {
        if (this.bk == 0) {
            return 0;
        }
        return l(l(this.bk + 1));
    }
    
    private synchronized void x() {
        if (this.bk != 0) {
            this.D();
            this.bk = 0;
            this.C.aC();
        }
    }
    
    private synchronized void Code(final boolean ae, int n, int n2, final int n3) {
        this.n.aE = ae;
        if (ae) {
            final Code m = this.m;
            final int n4 = n;
            final int n5 = n2;
            n = n4;
            n2 = n3;
            m.B.Code(n2, n, n5);
            this.n.I(this.m.B);
            this.n.Z(this.m.B);
        }
    }
    
    private synchronized void C(final int n, int char1, final int n2) {
        final B b;
        (b = this.n.B).Code(n2, n, char1);
        final String i = b.Code.I();
        if (b.Code > i.length()) {
            b.Code = i.length();
        }
        char char2;
        while (b.Code > 0 && (char2 = i.charAt(b.Code - 1)) != ' ' && char2 != '\n') {
            final B b2 = b;
            --b2.Code;
        }
        final B a;
        (a = this.n.a).Code(n2, n, char1);
        final String j = a.Code.I();
        while (a.Code < j.length() && (char1 = j.charAt(a.Code)) != 32 && char1 != 10) {
            final B b3 = a;
            ++b3.Code;
        }
        this.m.Code(this.n.a);
    }
    
    private synchronized void aE() {
        this.O = null;
        this.K.b = null;
        this.K.az = -1;
    }
    
    private static boolean Code(byte[] array, byte[] array2) {
        final byte[] array3 = array;
        array = array2;
        array2 = array3;
        return array3 == array || (array2 != null && array != null && array2.length == array.length && I(array2, 0, array, 0, array2.length));
    }
    
    private static boolean Code(final byte[] array, int n, final int n2) {
        return n2 > 8 && array[n++] == -119 && array[n++] == 80 && array[n++] == 78 && array[n++] == 71 && array[n++] == 13 && array[n++] == 10 && array[n++] == 26 && array[n] == 10;
    }
    
    private synchronized void F() {
        final Code n;
        (n = this.n).B.Code = null;
        n.a.Code = null;
    }
    
    private synchronized void f(final int n, final int n2) {
        this.C.I(this.n.B, n, n2);
    }
    
    private synchronized void g(final int n, final int n2) {
        this.C.I(this.n.a, n, n2);
    }
    
    private static int J(Code c) {
        c = c.C;
        Label_0112: {
            if (!Code.az) {
                break Label_0112;
            }
            int code = 0;
            while (true) {
                if (code >= 5) {
                    break Label_0112;
                }
                final String o = c.o;
                try {
                    int n;
                    if ((n = (o.hashCode() ^ new Long(System.currentTimeMillis()).hashCode()) % 100000000) < 0) {
                        n = -n;
                    }
                    if (n == 0) {
                        ++code;
                        continue;
                    }
                    final int code2;
                    int n3;
                    int n2;
                    if ((code2 = Code.I.Code(c.f, Code.I.Code(n, 16))) == 0) {
                        n2 = (n3 = n);
                    }
                    else {
                        if (code2 != 2) {
                            final Code i = Code.I;
                            i.I(i.Z());
                            ++code;
                            continue;
                        }
                        n2 = (n3 = 0);
                    }
                    final int n4 = n3;
                    if (n2 != 0) {
                        Z(2, 2);
                        code = Code.Code;
                        Code.Code[code++] = n4;
                        Code.Code[code] = 16;
                        return m();
                    }
                }
                finally {
                    return 0;
                }
                break;
            }
        }
    }
    
    private static Code B() {
        try {
            return new Code(new e());
        }
        finally {
            Code.az = false;
            return null;
        }
    }
    
    private static int w() {
        if (Code.aC || Code.W) {
            return 0;
        }
        return -1;
    }
    
    public Code(final int n, final boolean b) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.aF = true;
        this(0, (short)0);
    }
    
    private void K() {
        this.bk = 0;
        this.C = 0;
        for (int i = 0; i < this.h.length; ++i) {
            this.h[i] = 0;
        }
        this.b = 0;
        for (int j = 0; j < this.h.length; ++j) {
            this.h[j] = 0;
        }
        this.bl = 1779033703;
        this.br = -1150833019;
        this.bo = 1013904242;
        this.a = -1521486534;
        this.bp = 1359893119;
        this.bn = -1694144372;
        this.bh = 528734635;
        this.bm = 1541459225;
    }
    
    private static void Z(final int[] array, final int n, int n2) {
        while (n2-- > 0) {
            array[n + n2] = 0;
        }
    }
    
    private static byte[] Code(final int[] array) {
        final byte[] array2;
        int length = (array2 = new byte[array.length << 2]).length;
        while (--length >= 0) {
            array2[length] = (byte)(array[length / 4] >> 8 * (3 - length % 4));
        }
        return array2;
    }
    
    private static Code Code(final byte[] array) {
        final Code a;
        monitorenter(a = Code.A);
        final int n = Code.bL++;
        try {
            C(n);
            Code.A.I(array);
            Code.A.a(array, 0, 32);
        }
        finally {
            monitorexit(a);
        }
        final Code code;
        final byte[] array2;
        (code = new Code()).J(array2, 0);
        final byte[] i = Code.i;
        code.B(i, i.length);
        code.C(array2, 0);
        return code;
    }
    
    private synchronized void L(final int br) {
        this.C = System.currentTimeMillis();
        this.br = br;
    }
    
    private static boolean a(final char c) {
        return (c & '\uf800') == 0xD800;
    }
    
    private static int Code(final int[] array, final int n, final int n2, final int n3) {
        return Code(array, 0, n, n2, -1, n3);
    }
    
    private synchronized void a(int n, int n2, int n3) {
        final Code n4 = this.n;
        final int n5 = n3;
        final int n6 = n;
        n = n2;
        n2 = n6;
        n3 = n5;
        n4.B.Code(n3, n2, n);
        this.m.Code(this.n.B);
    }
    
    private synchronized void b(int n, int n2, int n3) {
        final Code n4 = this.n;
        final int n5 = n3;
        final int n6 = n;
        n = n2;
        n2 = n6;
        n3 = n5;
        n4.a.Code(n3, n2, n);
        this.m.Code(this.n.a);
    }
    
    private synchronized void Code(final int[] array, int n) {
        final B b = this.m.B;
        array[n++] = b.Z();
        array[n++] = b.J();
        array[n++] = ((b.Code() ^ true) ? 1 : 0);
        array[n] = b.B();
    }
    
    private synchronized void G() {
        final Code n;
        if ((n = this.n).aE) {
            Code.a = n.i();
        }
    }
    
    private static Code Code(final int n, final byte b, final boolean b2) {
        return new Code(n, b, b2);
    }
    
    private void Code(final String s, final int n, final byte[] array) {
        try {
            this.I(s, n, array);
        }
        catch (IOException ex) {
            Y();
            this.I(s, n, array);
        }
    }
    
    public final void Code(final String s, final String s2, final byte[] array, final int n, final int n2) {
        try {
            this.I(s, s2, array, n, n2);
        }
        catch (IOException ex) {
            Y();
            this.I(s, s2, array, n, n2);
        }
    }
    
    private static void I(final int n, final int n2, final int n3, final int n4) {
        if (Code.Code.B()) {
            Z(((Displayable)Code.Code).getWidth() - n2 - n4, n, n4, n3);
            return;
        }
        Z(n, n2, n3, n4);
    }
    
    private static void Z(final int n, final int n2, int n3, final int n4) {
        if (Code.ay) {
            n3 = ((Displayable)Code.Code).getWidth() - n;
        }
        Code.Code.repaint(n, n2, n3, n4);
    }
    
    private synchronized String f() {
        return this.n.i();
    }
    
    private static boolean m() {
        return Code.ar || Code.as || Code.T;
    }
    
    private synchronized void I(final int n, final boolean b) {
        Label_1027: {
            final B b2;
            if (!(b2 = this.m.B).Code()) {
                switch (n) {
                    case 1: {
                        b2.I = Integer.MIN_VALUE;
                        final B b3 = b2;
                        boolean b4 = true;
                        do {
                            if (b3.Code.J()) {
                                if (b3.Code > 0) {
                                    final B b5 = b3;
                                    --b5.Code;
                                }
                                else {
                                    final Code code;
                                    if ((code = (b3.Code.t() ? b3.Code.c() : b3.Code.b())) != null) {
                                        b3.Code = code.Code(code.Code(b3.Code) ^ true);
                                        b3.Code = code;
                                    }
                                    else {
                                        b4 = false;
                                    }
                                }
                            }
                            else {
                                final int length = b3.Code.I().length();
                                if (b3.Code < length - 1) {
                                    final B b6 = b3;
                                    ++b6.Code;
                                }
                                else {
                                    final Code code2 = b3.Code.t() ? b3.Code.c() : b3.Code.b();
                                    if (b3.Code == length - 1 && (code2 == null || b3.Code.Code(code2))) {
                                        b3.Code = length;
                                    }
                                    else if (code2 != null) {
                                        b3.Code = code2.Code(b3.Code == length && !b3.Code.Code(code2));
                                        b3.Code = code2;
                                    }
                                    else {
                                        b4 = false;
                                    }
                                }
                            }
                            if (b4) {
                                continue;
                            }
                            break;
                        } while (b3.Z() == b3.Z());
                        break;
                    }
                    case 2: {
                        b2.I = Integer.MIN_VALUE;
                        final B b7 = b2;
                        boolean b8 = true;
                        do {
                            if (b7.Code.J()) {
                                final int length2 = b7.Code.I().length();
                                if (b7.Code < length2 - 1) {
                                    final B b9 = b7;
                                    ++b9.Code;
                                }
                                else {
                                    final Code code3 = b7.Code.t() ? b7.Code.a() : b7.Code.d();
                                    if (b7.Code == length2 - 1 && (code3 == null || b7.Code.Code(code3))) {
                                        b7.Code = length2;
                                    }
                                    else if (code3 != null) {
                                        b7.Code = code3.I(b7.Code == length2 && !code3.Code(b7.Code));
                                        b7.Code = code3;
                                    }
                                    else {
                                        b8 = false;
                                    }
                                }
                            }
                            else if (b7.Code > 0) {
                                final B b10 = b7;
                                --b10.Code;
                            }
                            else {
                                final Code code4;
                                if ((code4 = (b7.Code.t() ? b7.Code.a() : b7.Code.d())) != null) {
                                    b7.Code = code4.I(b7.Code.Code(b7.Code) ^ true);
                                    b7.Code = code4;
                                }
                                else {
                                    b8 = false;
                                }
                            }
                            if (b8) {
                                continue;
                            }
                            break;
                        } while (b7.Z() == b7.Z());
                        break;
                    }
                    case 3: {
                        final B b11;
                        final int i = (b11 = b2).I();
                        final B b12;
                        final String j = (b12 = b11).Code.I();
                        int code5 = -1;
                        for (int k = b12.Code - 1; k >= 0; --k) {
                            if (j.charAt(k) == '\n') {
                                code5 = k;
                                break;
                            }
                        }
                        Label_0886: {
                            if (code5 == -1) {
                                Code code6 = null;
                                Code code7;
                                final int cs = (code7 = b11.Code).cs;
                                while (true) {
                                    while ((code7 = code7.C()) != null) {
                                        if (code7.cs + code7.G() - 1 < cs) {
                                            Code code9;
                                            Code code8 = code9 = code7;
                                            while (true) {
                                                final Code code10 = code9;
                                                if (code8 == null) {
                                                    break;
                                                }
                                                final Code code11;
                                                Code c;
                                                if ((c = (code11 = (code6 = code10)).C()) != null && !code11.Z(c)) {
                                                    c = null;
                                                }
                                                code8 = (code9 = c);
                                            }
                                            if (code6 != null) {
                                                b11.Code = code6;
                                                b11.Code = 0;
                                                final B b13;
                                                final String l = (b13 = b11).Code.I();
                                                for (int n2 = 0; n2 < l.length(); ++n2) {
                                                    if (l.charAt(n2) == '\n') {
                                                        b13.Code = n2 + 1;
                                                    }
                                                }
                                                break Label_0886;
                                            }
                                            break Label_1027;
                                        }
                                    }
                                    Code code9;
                                    Code code8 = code9 = null;
                                    continue;
                                }
                            }
                            b12.Code = code5;
                            while (b12.Code > 0 && j.charAt(b12.Code - 1) != '\n') {
                                final B b14 = b12;
                                --b14.Code;
                            }
                        }
                        b11.Code(i);
                        break;
                    }
                    case 4: {
                        final B b15;
                        final int m = (b15 = b2).I();
                        final B b16;
                        final String i2 = (b16 = b15).Code.I();
                        while (true) {
                        Label_1022:
                            while (true) {
                                for (int code12 = b16.Code; code12 < i2.length(); ++code12) {
                                    if (i2.charAt(code12) == '\n') {
                                        b16.Code = code12 + 1;
                                        b15.Code(m);
                                        break Label_1027;
                                    }
                                }
                                Code code13;
                                final int n3 = (code13 = b15.Code).cs + code13.G();
                                while ((code13 = code13.J()) != null) {
                                    if (code13.cs >= n3) {
                                        final Code code15;
                                        final Code code14 = code15 = code13;
                                        final Code code16 = code15;
                                        if (code14 != null) {
                                            b15.Code = code16;
                                            b15.Code = 0;
                                            continue Label_1022;
                                        }
                                        break Label_1027;
                                    }
                                }
                                break;
                            }
                            Code code15;
                            final Code code14 = code15 = null;
                            continue;
                        }
                    }
                }
            }
        }
        if (this.n.aE) {
            if (!b) {
                this.n.I(this.m.B);
            }
            this.n.Z(this.m.B);
        }
    }
    
    private Object Code(final RecordStore recordStore, final String s, final int n, final int n2) {
        String name = null;
        try {
            name = recordStore.getName();
            RecordEnumeration enumerateRecords;
            for (int numRecords = (enumerateRecords = recordStore.enumerateRecords((RecordFilter)null, (RecordComparator)null, (boolean)(0 != 0))).numRecords(), i = 0; i < numRecords; ++i) {
                final int nextRecordId;
                if ((nextRecordId = enumerateRecords.nextRecordId()) != 0) {
                    final byte[] record;
                    final byte[] array;
                    if ((array = (record = recordStore.getRecord(nextRecordId))) == null || array.length < 3 || J(array, array.length - 2) != 32528 || array[array.length - 3] != 1) {
                        recordStore.deleteRecord(nextRecordId);
                    }
                    else {
                        final String code = Code(record, I(record));
                        if (n2 == 0 && code.equals(s)) {
                            return new Integer(nextRecordId);
                        }
                        if (n2 == 1 && code.equals(s)) {
                            return record;
                        }
                        if (n2 == 2 && code.charAt(0) - '!' == n) {
                            recordStore.deleteRecord(nextRecordId);
                        }
                    }
                }
            }
            return null;
        }
        catch (NullPointerException ex) {
            if ("b_6".equals(name)) {
                this.Code(recordStore, true);
                RecordStore.deleteRecordStore(name);
            }
            throw ex;
        }
    }
    
    private static void U() {
        Code.Code = new Code[] { Code.w, Code.x };
        Code.I = new Code[0];
        Code.z = null;
        Code.bw = 0;
    }
    
    public final long Code() {
        return ((ContentConnection)this.Code).getLength();
    }
    
    private Code(final short n, final byte b) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.a = true;
    }
    
    public final int B(final int n) {
        if (this.C) {
            return this.h[n];
        }
        return -1;
    }
    
    private static int v() {
        if (Code.Code.B()) {
            return ((Displayable)Code.Code).getHeight();
        }
        return ((Displayable)Code.Code).getWidth();
    }
    
    private Code(final short n, final short n2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.x = true;
    }
    
    private Code(final short n, final int n2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.x = true;
        this((short)0, (short)0);
    }
    
    public final int C(final int n) {
        if (this.C) {
            return this.g[n];
        }
        return -1;
    }
    
    private static int z() {
        final String property = System.getProperty("com.sonyericsson.net.mnc");
        try {
            return Integer.parseInt(property);
        }
        finally {
            return -1;
        }
    }
    
    private static boolean C(String lowerCase) {
        final Browser code = Code.Code;
        final String s = lowerCase;
        try {
            final boolean platformRequest = code.platformRequest(s);
            lowerCase = lowerCase.toLowerCase();
            if (Code.aA || platformRequest || I("*operette*.jad*", lowerCase) || I("*operette*.jar*", lowerCase) || lowerCase.indexOf("mini.jad") >= 0 || lowerCase.indexOf("mini.jar") >= 0) {
                return true;
            }
        }
        catch (ConnectionNotFoundException ex) {
            throw ex;
        }
        finally {
            return false;
        }
    }
    
    private void Code(final RecordStore recordStore, final boolean b) {
        if (recordStore != null) {
            final RecordStore code = this.Code;
            try {
                if (recordStore.equals(code)) {
                    if (!b) {
                        return;
                    }
                    this.Code = null;
                }
                recordStore.closeRecordStore();
            }
            finally {}
        }
    }
    
    private static Vector Code(String numRecords) {
        RecordStore openRecordStore = null;
        final Vector vector = new Vector();
        final boolean b = false;
        try {
            (openRecordStore = RecordStore.openRecordStore(s, b)).getSizeAvailable();
            if ("s".equals(s)) {
                final RecordEnumeration enumerateRecords = openRecordStore.enumerateRecords((RecordFilter)null, (RecordComparator)null, false);
                int max = -1;
                for (int numRecords2 = enumerateRecords.numRecords(), i = 0; i < numRecords2; ++i) {
                    max = Math.max(max, enumerateRecords.nextRecordId());
                }
                vector.addElement(openRecordStore.getRecord(max));
            }
            else {
                numRecords = (String)openRecordStore.getNumRecords();
                int j = 1;
                while (j <= numRecords) {
                    final RecordStore recordStore = openRecordStore;
                    final int n = j;
                    try {
                        vector.addElement(recordStore.getRecord(n));
                        ++j;
                    }
                    catch (RecordStoreException ex) {
                        ++j;
                    }
                }
            }
            try {}
            finally {
                return vector;
            }
        }
        finally {
            openRecordStore.closeRecordStore();
            return vector;
        }
    }
    
    private boolean n() {
        return Code.B.elementAt(this.C) != this;
    }
    
    private Code(final short n, final char c) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.w = true;
    }
    
    private Code[] Code() {
        final J b = this.b;
        try {
            b.b();
        }
        finally {
            return this.B;
        }
    }
    
    public final int I() {
        return this.Code.getResponseCode();
    }
    
    public final int[] Code() {
        return this.b.Code();
    }
    
    private static InputStream Code(String string) {
        if ((string = string).charAt(0) != '/') {
            string = "/" + string;
        }
        return Code("Browser").getResourceAsStream(string);
    }
    
    private synchronized void Q() {
        if (this.a) {
            throw new IOException();
        }
        this.Z = System.currentTimeMillis();
    }
    
    private synchronized boolean o() {
        return this.br > 0 && ((this.Z >= this.C) ? (Math.max(this.Z, this.B) + 240000L) : ((this.I() ? this.C : Math.max(this.C, this.B)) + this.br)) - System.currentTimeMillis() < 0L;
    }
    
    private boolean y() {
        return this.b > 0;
    }
    
    public final boolean Z() {
        return this.b != null && this.b.length() > 0;
    }
    
    private boolean Code(final String s, final String s2) {
        RecordStore code = null;
        final boolean b = true;
        try {
            code = this.Code(s, b);
            return this.Code(code, s2) != -1;
        }
        catch (RecordStoreException ex) {
            throw new IOException(((Throwable)ex).getMessage());
        }
        finally {
            this.Code(code, false);
        }
    }
    
    private byte[] Code(final String s, final String s2) {
        RecordStore code = null;
        final boolean b = true;
        try {
            code = this.Code(s, b);
            return this.Code(code, s2);
        }
        catch (RecordStoreException ex) {
            throw new IOException(((Throwable)ex).getMessage());
        }
        finally {
            this.Code(code, false);
        }
    }
    
    private int Code(final RecordStore recordStore, final String s) {
        final Integer n;
        if ((n = (Integer)this.Code(recordStore, s, 0, 0)) == null) {
            return -1;
        }
        return n;
    }
    
    public static Code I() {
        return Code.o;
    }
    
    private byte[] Code(final RecordStore recordStore, final String s) {
        return (byte[])this.Code(recordStore, s, 0, 1);
    }
    
    public static a Code(final Object[] array, final int[] array2, final int n) {
        final a a;
        I(a = new a(array, array2, n));
        M();
        return a;
    }
    
    private int Code(final String s, final byte[] array) {
        RecordStore code = null;
        final boolean b = true;
        try {
            return (code = this.Code(s, b)).addRecord(array, 0, array.length);
        }
        catch (RecordStoreException ex) {
            throw new IOException(((Throwable)ex).getMessage());
        }
        finally {
            this.Code(code, true);
        }
    }
    
    private byte[] Code(final String s, final int n) {
        RecordStore code = null;
        final boolean b = false;
        try {
            (code = this.Code(s, b)).getSizeAvailable();
            return code.getRecord(n);
        }
        catch (RecordStoreException ex) {
            throw new IOException(((Throwable)ex).getMessage());
        }
        finally {
            this.Code(code, false);
        }
    }
    
    private synchronized void k(final int n, final int n2) {
        J(n2, 0);
        System.arraycopy(this.w, n * 5, Code.Code, Code.Code, 5);
    }
    
    private static int[] I(final int[] array, final int n) {
        final int[] array2 = new int[n];
        System.arraycopy(array, 0, array2, 0, array.length);
        return array2;
    }
    
    private static void G(final int bt) {
        if (bt != Code.bt) {
            K(0);
            Code.bt = bt;
            Code.z = true;
        }
    }
    
    private static void Code(final int n, final byte[] array, final int n2) {
        array[n2] = (byte)(n >> 24);
        array[n2 + 1] = (byte)(n >>> 16);
        array[n2 + 2] = (byte)(n >>> 8);
        array[n2 + 3] = (byte)n;
    }
    
    private static void Code(final char[] array, final int n) {
        for (int i = 0; i < array.length; ++i) {
            Code.Code.write(Math.max(0, Code(n, array[i])));
        }
    }
    
    public final a Code(final String s, final String s2) {
        a a = null;
        RecordStore code = null;
        final boolean b = true;
        try {
            code = this.Code(s, b);
            final byte[] code2;
            if ((code2 = this.Code(code, s2)) != null) {
                final int i = I(code2);
                (a = new a((byte)0)).Code = new DataInputStream(new ByteArrayInputStream(code2, 0, i));
                a.Code = i;
            }
            return a;
        }
        catch (RecordStoreException ex) {
            throw new IOException(((Throwable)ex).getMessage());
        }
        finally {
            this.Code(code, false);
        }
    }
    
    private void I(final String s, final int n, final byte[] array) {
        RecordStore code = null;
        final boolean b = true;
        try {
            (code = this.Code(s, b)).setRecord(n, array, 0, array.length);
        }
        catch (RecordStoreException ex) {
            throw new IOException(((Throwable)ex).getMessage());
        }
        finally {
            this.Code(code, true);
        }
    }
    
    private void I(final String s, final String s2, final byte[] array, final int n, final int n2) {
        RecordStore code = null;
        final boolean b = true;
        try {
            code = this.Code(s, b);
            final int code2;
            if ((code2 = this.Code(code, s2)) > 0) {
                final byte[] code3 = Code(s2, array, n, n2);
                code.setRecord(code2, code3, 0, code3.length);
            }
            else {
                final byte[] code4 = Code(s2, array, n, n2);
                code.addRecord(code4, 0, code4.length);
            }
        }
        catch (RecordStoreException ex) {
            throw new IOException(((Throwable)ex).getMessage());
        }
        finally {
            this.Code(code, true);
        }
    }
    
    private RecordStore Code(final String s, final boolean b) {
        if ("b_6".equals(s) && this.Code != null) {
            return this.Code;
        }
        final RecordStore openRecordStore = RecordStore.openRecordStore(s, b);
        if ("b_6".equals(s)) {
            this.Code = openRecordStore;
        }
        return openRecordStore;
    }
    
    private synchronized void aB() {
    }
    
    private Code(final short n, final boolean b) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.y = true;
        this.h = new byte[4];
        this.h = new int[64];
        this.K();
    }
    
    private void F(final int n) {
        this.Code((byte)(n >> 24));
        this.Code((byte)(n >>> 16));
        this.Code((byte)(n >>> 8));
        this.Code((byte)n);
    }
    
    private static int J(final int n, final int n2, final int n3) {
        return ((n >>> 6 | n << 26) ^ (n >>> 11 | n << 21) ^ (n >>> 25 | n << 7)) + ((n & n2) ^ (~n & n3));
    }
    
    private void C(final boolean b) {
        this.Code(b, 0);
    }
    
    private static int B(final int n, final int n2, final int n3) {
        return ((n >>> 2 | n << 30) ^ (n >>> 13 | n << 19) ^ (n >>> 22 | n << 10)) + ((n & n2) ^ (n & n3) ^ (n2 & n3));
    }
    
    private void I(final byte[] array, final int n) {
        this.Code.write(array, 0, n);
        if (this.I()) {
            this.Code.flush();
        }
        this.B = System.currentTimeMillis();
    }
    
    private Code(final int c, final byte b, final boolean b2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.L = true;
        this.Code = new Vector();
        this.g = new byte[1024];
        this.I = new Object[110];
        this.h = new int[110];
        this.d = false;
        this.C = c;
        if (b2) {
            this.q = I(c);
            this.d = true;
        }
        else {
            this.q = Code(c);
        }
        boolean b3 = false;
        int endsWith = 0;
        Label_0302: {
            final int y;
            if ((y = y()) == 460) {
                endsWith = 1;
            }
            else {
                if (y == -1) {
                    final String o;
                    final int index = (o = Code(0).o).indexOf(46);
                    final int index2 = o.indexOf("cn");
                    final int index3 = o.indexOf("china");
                    if ((index2 >= 0 && index2 < index) || (index3 >= 0 && index3 < index)) {
                        endsWith = 1;
                        break Label_0302;
                    }
                    final String property;
                    if ((property = System.getProperty("wireless.messaging.sms.smsc")) != null) {
                        endsWith = ((property.startsWith("+86") || property.startsWith("0086")) ? 1 : 0);
                        break Label_0302;
                    }
                    if (J(1).length() == 0) {
                        final String property2;
                        if ((property2 = System.getProperty("microedition.locale")) != null) {
                            endsWith = (property2.toLowerCase().endsWith("cn") ? 1 : 0);
                            break Label_0302;
                        }
                        final String c2;
                        if ((c2 = c()) != null && c2.toLowerCase().startsWith("zh")) {
                            endsWith = 1;
                            break Label_0302;
                        }
                    }
                }
                endsWith = 0;
            }
        }
        final int n = endsWith;
        this.Code = new String[n + 2];
        String[] array;
        int n2;
        String string;
        if (!this.q.A()) {
            array = this.Code;
            n2 = 0;
            string = "socket://" + this.q.o + ":" + this.q.cq;
        }
        else {
            array = this.Code;
            n2 = 0;
            string = "socket://do_not_use_me:0";
        }
        array[n2] = string;
        if (n != 0) {
            this.Code[1] = "http://10.0.0.172:80/";
        }
        this.Code[this.Code.length - 1] = this.g();
        if (this.Code.length != Code.bs) {
            Code.bs = this.Code.length;
            R();
            b3 = true;
        }
        final String l = this.q.l();
        final Object[] z;
        if ((z = Code.C.get(l)) != null) {
            this.Z = z;
            this.r = (Code)z[0];
        }
        else {
            this.r = new Code(Code(Z(this.q.q), 0, 160));
            (this.Z = new Object[2])[0] = this.r;
            this.Z[1] = "";
            Code.C.put(l, this.Z);
            b3 = true;
        }
        if (b3) {
            I("md");
        }
        this.I = (byte)((b != -1) ? b : ((Code.J >= 0 && !this.q.A()) ? Code.J : ((Code.B >= 0) ? Code.B : 1)));
        if (Code.B.size() <= c) {
            Code.B.setSize(c + 1);
        }
        Code.B.setElementAt(this, c);
        Code((Runnable)this);
    }
    
    private boolean p() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     3: dup            
        //     4: astore_1       
        //     5: monitorenter   
        //     6: getstatic       Code.A:Z
        //     9: ifne            16
        //    12: iconst_0       
        //    13: aload_1        
        //    14: monitorexit    
        //    15: ireturn        
        //    16: getstatic       Code.bu:I
        //    19: istore_2       
        //    20: iconst_0       
        //    21: putstatic       Code.A:Z
        //    24: iconst_1       
        //    25: putstatic       Code.D:Z
        //    28: getstatic       Code.Z:B
        //    31: aload_0        
        //    32: getfield        Code.Code:[Ljava/lang/String;
        //    35: arraylength    
        //    36: iconst_1       
        //    37: isub           
        //    38: if_icmplt       45
        //    41: iconst_m1      
        //    42: putstatic       Code.Z:B
        //    45: aload_0        
        //    46: astore_3       
        //    47: iconst_0       
        //    48: istore          4
        //    50: iconst_0       
        //    51: istore          5
        //    53: iload           4
        //    55: ifne            67
        //    58: getstatic       Code.Z:B
        //    61: iconst_1       
        //    62: iadd           
        //    63: i2b            
        //    64: putstatic       Code.Z:B
        //    67: getstatic       Code.Z:B
        //    70: aload_0        
        //    71: getfield        Code.Code:[Ljava/lang/String;
        //    74: arraylength    
        //    75: if_icmplt       217
        //    78: iload           5
        //    80: ifeq            97
        //    83: invokestatic    Code.S:()V
        //    86: iconst_0       
        //    87: putstatic       Code.D:Z
        //    90: invokestatic    Code.M:()V
        //    93: aload_1        
        //    94: monitorexit    
        //    95: iconst_1       
        //    96: ireturn        
        //    97: aload_0        
        //    98: getfield        Code.C:I
        //   101: invokestatic    Code.I:(I)LCode;
        //   104: astore          5
        //   106: aload_0        
        //   107: getfield        Code.q:LCode;
        //   110: getfield        Code.d:Ljava/lang/String;
        //   113: aload           5
        //   115: getfield        Code.d:Ljava/lang/String;
        //   118: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   121: ifeq            171
        //   124: aload_0        
        //   125: getfield        Code.q:LCode;
        //   128: getfield        Code.q:Ljava/lang/String;
        //   131: aload           5
        //   133: getfield        Code.q:Ljava/lang/String;
        //   136: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   139: ifeq            171
        //   142: aload_0        
        //   143: getfield        Code.q:LCode;
        //   146: getfield        Code.b:I
        //   149: aload           5
        //   151: getfield        Code.b:I
        //   154: if_icmpne       171
        //   157: invokestatic    Code.S:()V
        //   160: iconst_0       
        //   161: putstatic       Code.D:Z
        //   164: invokestatic    Code.M:()V
        //   167: aload_1        
        //   168: monitorexit    
        //   169: iconst_1       
        //   170: ireturn        
        //   171: iconst_1       
        //   172: istore          5
        //   174: getstatic       Code.C:Ljava/util/Hashtable;
        //   177: invokevirtual   java/util/Hashtable.elements:()Ljava/util/Enumeration;
        //   180: astore          6
        //   182: aload           6
        //   184: invokeinterface java/util/Enumeration.hasMoreElements:()Z
        //   189: ifeq            213
        //   192: aload           6
        //   194: invokeinterface java/util/Enumeration.nextElement:()Ljava/lang/Object;
        //   199: checkcast       [Ljava/lang/Object;
        //   202: iconst_0       
        //   203: aaload         
        //   204: checkcast       LCode;
        //   207: invokespecial   Code.s:()V
        //   210: goto            182
        //   213: iconst_0       
        //   214: putstatic       Code.Z:B
        //   217: aload_0        
        //   218: getfield        Code.Code:[Ljava/lang/String;
        //   221: getstatic       Code.Z:B
        //   224: aaload         
        //   225: ldc_w           "socket://"
        //   228: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //   231: ifeq            286
        //   234: getstatic       Code.J:B
        //   237: ifge            262
        //   240: getstatic       Code.G:Z
        //   243: ifne            262
        //   246: getstatic       Code.al:Z
        //   249: ifne            262
        //   252: aload_0        
        //   253: getfield        Code.q:LCode;
        //   256: invokespecial   Code.A:()Z
        //   259: ifeq            286
        //   262: getstatic       Code.G:Z
        //   265: ifne            274
        //   268: getstatic       Code.al:Z
        //   271: ifeq            280
        //   274: bipush          -2
        //   276: aconst_null    
        //   277: invokestatic    Code.Code:(BLjava/lang/String;)V
        //   280: iconst_0       
        //   281: istore          4
        //   283: goto            53
        //   286: aload_0        
        //   287: getfield        Code.r:LCode;
        //   290: invokespecial   Code.s:()V
        //   293: ldc_w           "md"
        //   296: invokestatic    Code.I:(Ljava/lang/String;)V
        //   299: aload_3        
        //   300: ifnonnull       319
        //   303: aload_0        
        //   304: getfield        Code.C:I
        //   307: getstatic       Code.Z:B
        //   310: iload           5
        //   312: invokestatic    Code.Code:(IBZ)LCode;
        //   315: astore_3       
        //   316: goto            351
        //   319: aload_3        
        //   320: aconst_null    
        //   321: putfield        Code.h:[B
        //   324: aload_3        
        //   325: aconst_null    
        //   326: putfield        Code.J:LJ;
        //   329: aload_3        
        //   330: getstatic       Code.Z:B
        //   333: putfield        Code.I:B
        //   336: getstatic       Code.B:Ljava/util/Vector;
        //   339: aload_3        
        //   340: aload_0        
        //   341: getfield        Code.C:I
        //   344: invokevirtual   java/util/Vector.setElementAt:(Ljava/lang/Object;I)V
        //   347: aload_3        
        //   348: invokestatic    Code.Code:(Ljava/lang/Runnable;)V
        //   351: getstatic       Code.E:Z
        //   354: ifeq            383
        //   357: aload_3        
        //   358: getfield        Code.a:Z
        //   361: ifne            383
        //   364: aload_3        
        //   365: invokespecial   Code.o:()Z
        //   368: ifne            383
        //   371: getstatic       Code.I:Ljava/lang/Object;
        //   374: sipush          1000
        //   377: invokestatic    Code.Code:(Ljava/lang/Object;I)V
        //   380: goto            351
        //   383: getstatic       Code.E:Z
        //   386: ifeq            396
        //   389: iload_2        
        //   390: getstatic       Code.bu:I
        //   393: if_icmpeq       407
        //   396: iconst_0       
        //   397: putstatic       Code.D:Z
        //   400: invokestatic    Code.M:()V
        //   403: aload_1        
        //   404: monitorexit    
        //   405: iconst_1       
        //   406: ireturn        
        //   407: aload_3        
        //   408: getfield        Code.bl:I
        //   411: iconst_1       
        //   412: if_icmpne       426
        //   415: iload           4
        //   417: ifne            426
        //   420: iconst_1       
        //   421: istore          4
        //   423: goto            429
        //   426: iconst_0       
        //   427: istore          4
        //   429: aload_3        
        //   430: getfield        Code.bl:I
        //   433: iconst_2       
        //   434: if_icmpne       462
        //   437: iconst_4       
        //   438: invokestatic    Code.K:(I)V
        //   441: iconst_m1      
        //   442: putstatic       Code.Z:B
        //   445: ldc_w           "md"
        //   448: invokestatic    Code.I:(Ljava/lang/String;)V
        //   451: iconst_0       
        //   452: putstatic       Code.D:Z
        //   455: invokestatic    Code.M:()V
        //   458: aload_1        
        //   459: monitorexit    
        //   460: iconst_1       
        //   461: ireturn        
        //   462: aload_3        
        //   463: invokevirtual   Code.I:()Z
        //   466: ifeq            499
        //   469: iload           4
        //   471: ifne            499
        //   474: aload_0        
        //   475: getfield        Code.Code:[Ljava/lang/String;
        //   478: getstatic       Code.Z:B
        //   481: iconst_1       
        //   482: iadd           
        //   483: aaload         
        //   484: ldc_w           "socket://"
        //   487: invokevirtual   java/lang/String.startsWith:(Ljava/lang/String;)Z
        //   490: ifne            499
        //   493: bipush          -2
        //   495: aconst_null    
        //   496: invokestatic    Code.Code:(BLjava/lang/String;)V
        //   499: aload_3        
        //   500: iconst_0       
        //   501: iconst_0       
        //   502: invokespecial   Code.Code:(ZI)V
        //   505: aconst_null    
        //   506: astore_3       
        //   507: goto            53
        //   510: pop            
        //   511: invokestatic    Code.S:()V
        //   514: iconst_0       
        //   515: putstatic       Code.D:Z
        //   518: invokestatic    Code.M:()V
        //   521: aload_1        
        //   522: monitorexit    
        //   523: iconst_1       
        //   524: ireturn        
        //   525: astore_2       
        //   526: iconst_0       
        //   527: putstatic       Code.D:Z
        //   530: invokestatic    Code.M:()V
        //   533: aload_2        
        //   534: athrow         
        //   535: astore_2       
        //   536: aload_1        
        //   537: monitorexit    
        //   538: aload_2        
        //   539: athrow         
        //    StackMap: 00 19 00 10 00 02 07 01 AF 07 01 DC 00 00 00 2D 00 03 07 01 AF 07 01 DC 01 00 00 00 35 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 00 43 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 00 61 00 05 07 01 AF 07 01 DC 01 07 01 AF 01 00 00 00 AB 00 05 07 01 AF 07 01 DC 01 07 01 AF 01 00 00 00 B6 00 07 07 01 AF 07 01 DC 01 07 01 AF 01 01 07 01 E8 00 00 00 D5 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 00 D9 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 06 00 06 07 01 AF 07 01 DC 01 07 01 AF 00 01 00 00 01 12 00 06 07 01 AF 07 01 DC 01 07 01 AF 00 01 00 00 01 18 00 06 07 01 AF 07 01 DC 01 07 01 AF 00 01 00 00 01 1E 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 3F 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 5F 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 7F 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 8C 00 02 00 07 01 DC 00 00 01 97 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 AA 00 06 07 01 AF 07 01 DC 01 07 01 AF 00 01 00 00 01 AD 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 CE 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 F3 00 06 07 01 AF 07 01 DC 01 07 01 AF 01 01 00 00 01 FE 00 02 00 07 01 DC 00 01 07 01 E6 02 0D 00 02 00 07 01 DC 00 01 07 01 E6 02 17 00 02 00 07 01 DC 00 01 07 01 E6
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type
        //  -----  -----  -----  -----  ----
        //  35     86     510    535    Any
        //  90     93     535    540    Any
        //  101    160    510    535    Any
        //  164    167    535    540    Any
        //  177    380    510    535    Any
        //  400    403    535    540    Any
        //  438    451    510    535    Any
        //  455    458    535    540    Any
        //  463    505    510    535    Any
        //  511    514    525    535    Any
        //  518    535    535    540    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0097:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2604)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:209)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:94)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:840)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:733)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:610)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:577)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:193)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:160)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:135)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:333)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:254)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:144)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    public final synchronized void Code(final a a) {
        if (this.o()) {
            this.Code(false, 2);
            if (a.Z()) {
                throw new IOException();
            }
        }
    }
    
    private static void S() {
        K(0);
        Code((byte)(-2), null);
        I((byte)(-2), null);
        Code.Z = -1;
        I("md");
    }
    
    private synchronized a Code(final int n) {
        for (int i = 0; i < this.Code.size(); ++i) {
            final a a;
            if ((a = this.Code.elementAt(i)).Z() == n) {
                return a;
            }
        }
        return null;
    }
    
    private String g() {
        return "http://" + this.q.o + ":" + this.q.b + "/";
    }
    
    private a Code() {
        synchronized (Code.I) {
            if (!this.I() && this == Code.B.elementAt(this.C)) {
                Code.B.setElementAt(null, this.C);
            }
            while (Code.Z == null || (Code.Z != null && (this.C != Code.Z.Code() || (this.I() && this.n() && this != Code.Z.Code())))) {
                if (this.y) {
                    for (int i = 0; i < this.Code.size(); ++i) {
                        final a a;
                        if ((a = this.Code.elementAt(i)).C() != 0) {
                            return a;
                        }
                    }
                }
                this.y = false;
                Code(Code.I, 0);
                if (this.a) {
                    M();
                    return null;
                }
            }
            if (this.a) {
                M();
                return null;
            }
            final a z;
            Code.Z = (z = Code.Z).Code();
            int n;
            for (n = 1; this.Code(n) != null; ++n) {}
            this.Code.addElement(z);
            z.Code(this, n);
            M();
            return z;
        }
    }
    
    private static void I(final a z) {
        final Object i;
        monitorenter(i = Code.I);
        final a z2 = Code.Z;
        try {
            z.Code(z2);
            Code.Z = z;
        }
        finally {
            monitorexit(i);
        }
    }
    
    private static void M() {
        final Object i;
        monitorenter(i = Code.I);
        if (Code.D) {
            monitorexit(i);
            return;
        }
        Label_0028: {
            if (!Code.z) {
                break Label_0028;
            }
            Code.z = false;
            try {
                R();
                if (Code.Z == null) {
                    return;
                }
                final int code2;
                final Code code = Code(code2 = Code.Z.Code());
                if (Code.J == -2 && Code.B == -2) {
                    Code((byte)(-1), null);
                    I((byte)(-1), null);
                }
                if (code.A() && Code.B == -2) {
                    I((byte)(-1), null);
                }
                if (((code.A() && Code.B == -1) || (!code.A() && (Code.J == -1 || (Code.J == -2 && Code.B == -1)))) && !Code.A) {
                    ++Code.bu;
                    Code.Z = -1;
                    Code.E = true;
                    Code.A = true;
                }
                if (Code.B.size() > code2 && Code.B.elementAt(code2) != null) {
                    Code(Code.I);
                }
                else {
                    Code(code2, (byte)(((Code.E ? 1 : 0) << 1) - 1), false);
                }
            }
            finally {
                monitorexit(i);
            }
        }
    }
    
    private boolean Z(final int n) {
        final Object i;
        monitorenter(i = Code.I);
        final Vector b = Code.B;
        final int c = this.C;
        try {
            if (b.elementAt(c) == this) {
                Code.B.setElementAt(null, this.C);
            }
            final boolean b2 = Code.E || this.x;
            for (int j = 0; j < this.Code.size(); ++j) {
                final a a;
                if (!(a = this.Code.elementAt(j)).Z() && !a.Code() && (b2 || !a.I())) {
                    if (!b2) {
                        a.Z();
                    }
                    a.Code();
                    I(a);
                }
                else {
                    a.I(n);
                }
            }
            this.Code.removeAllElements();
            if (!this.a) {
                this.a = true;
                this.Code = null;
                this.Code = null;
                M();
                Code(Code.I);
                return true;
            }
            return false;
        }
        finally {
            monitorexit(i);
        }
    }
    
    private static void R() {
        final Object i;
        monitorenter(i = Code.I);
        if (Code.D) {
            return;
        }
        final byte b = -1;
        final String s = null;
        try {
            Code(b, s);
            I((byte)(-1), null);
            ++Code.bu;
            Code.E = true;
            N();
        }
        finally {
            monitorexit(i);
        }
    }
    
    public static void Code(final a a, final boolean b) {
        synchronized (Code.I) {
            if (!a.Z()) {
                a.I(0);
                final Code code;
                if ((code = a.Code()) != null) {
                    int n = code.n() ? 1 : 0;
                    for (int n2 = 0; n != 0 && n2 < code.Code.size(); ++n2) {
                        final a a2;
                        if (!(a2 = code.Code.elementAt(n2)).Z() && a2.Code()) {
                            n = 0;
                        }
                    }
                    if (n == 0 && code.I()) {
                        code.y = true;
                        a.Z((b ? 1 : 0) + 6);
                        Code(Code.I);
                    }
                    else {
                        code.Code(false, 0);
                    }
                }
                else if (Code.Z != null) {
                    Code.Z = Code.Z.Code(a);
                }
            }
        }
    }
    
    private synchronized void O() {
        for (int i = 0; i < this.Code.size(); ++i) {
            final a a;
            if (!(a = this.Code.elementAt(i)).Code()) {
                this.J(a);
                --i;
            }
        }
    }
    
    private synchronized void H(final int n) {
        this.Z(this.Code(n));
    }
    
    private synchronized void Z(final a a) {
        if (a != null) {
            this.Code.removeElement(a);
        }
    }
    
    private synchronized void J(final a a) {
        this.Z(a);
        a.Code();
        I(a);
    }
    
    public final boolean I() {
        return this.Code[this.I].startsWith("socket://");
    }
    
    private static void Code(final byte j, final String g) {
        Code.J = j;
        Code.g = g;
    }
    
    private static String e(final String s) {
        final StringBuffer sb = new StringBuffer(s.length());
        for (int i = 0; i < s.length(); ++i) {
            final char char1;
            if ((char1 = s.charAt(i)) == '\0') {
                sb.append("%00");
            }
            else if ("%&=;".indexOf(char1) >= 0) {
                sb.append('%').append(Integer.toString(char1, 16));
            }
            else {
                sb.append(char1);
            }
        }
        return sb.toString();
    }
    
    private static void I(final byte b, final String h) {
        Code.B = b;
        Code.h = h;
    }
    
    private static String h() {
        final String s = "s";
        try {
            Label_0100: {
                final byte[] array;
                if ((array = Code(s).firstElement()) == null) {
                    break Label_0100;
                }
                final DataInputStream dataInputStream;
                final int unsignedByte;
                if ((unsignedByte = (dataInputStream = new DataInputStream(new ByteArrayInputStream(array))).readUnsignedByte()) < 9) {
                    Code((InputStream)dataInputStream, 5);
                    dataInputStream.readUTF();
                    Code((InputStream)dataInputStream, 6);
                    final String utf;
                    if ((utf = dataInputStream.readUTF()).length() == 64) {
                        return utf;
                    }
                    break Label_0100;
                }
                else {
                    final String utf2;
                    if (unsignedByte == 9 && (utf2 = dataInputStream.readUTF()).length() >= 64) {
                        return utf2;
                    }
                    break Label_0100;
                }
            }
        }
        finally {
            return null;
        }
    }
    
    private static String Code(int i, int j, final String s) {
        final int l;
        final String[] array = new String[l = l(i)];
        Z(i);
        for (i = 0; i < l; ++i) {
            array[i] = Code(Code.Code[Code.Code + i]);
        }
        final String[] array2 = new String[l];
        Z(j);
        for (j = 0; j < l; ++j) {
            array2[j] = Code(Code.Code[Code.Code + j]);
        }
        final StringBuffer sb = new StringBuffer(s.length());
        int k = 0;
        while (k < s.length()) {
            boolean b = false;
            for (int n = 0; n < l; ++n) {
                if (s.startsWith(array2[n], k)) {
                    sb.append(array[n]);
                    k += array2[n].length();
                    b = true;
                    break;
                }
            }
            if (!b) {
                sb.append(s.charAt(k++));
            }
        }
        return sb.toString();
    }
    
    private static int A() {
        int n = 0;
        final Object j;
        monitorenter(j = Code.J);
        Label_0121: {
            if (Code.m == null) {
                break Label_0121;
            }
            final int n2 = 6;
            try {
                final byte[] array = new byte[n2];
                final byte[] array2 = new byte[Code.m.length];
                for (int i = 0; i < Code.m.length; ++i) {
                    if ((Code.m[i] & 0x1) != 0x0) {
                        array2[n++] = Code.k[i * 3];
                        Code.k[i * 3 + 1] = 0;
                        Code.k[i * 3 + 2] = 0;
                        Code(array, Code.k[i * 3], 0, Code.m[i]);
                        if (!Code(i, array)) {
                            break;
                        }
                    }
                }
                aa();
            }
            finally {
                monitorexit(j);
            }
        }
        if (n > 0) {
            final byte[] array3;
            return Z(array3, 0, n);
        }
        return 0;
    }
    
    private static void Code(final I n, final int n2, final int n3, int q) {
        int n4 = 0;
        int n5 = q;
        int n6 = n3;
        while (true) {
            try {
                B(n5, n6);
                n.write(Code.Z, Code.S, n2);
            }
            finally {
                if (n4 != Code.aH) {
                    Code.Q = q;
                    Code.Code.J(n4 > 0);
                    q = Code.Q;
                    Code.Q = 0;
                    ++n4;
                    n5 = q;
                    n6 = n3;
                }
                continue;
            }
            break;
        }
    }
    
    public final int a() {
        if (this.aY) {
            return this.Code.getHeight();
        }
        if (this.aK) {
            return Code.a;
        }
        if (Code.Code.B()) {
            return ((Displayable)Code.Code).getWidth();
        }
        return ((Displayable)Code.Code).getHeight();
    }
    
    private static B Code(int code, final int n, final int n2, final boolean b) {
        Code.O = o;
        code = (int)null;
        int i = 0;
        while (i <= Code.aH) {
            final int o2 = Code.O;
            try {
                B(o2, n);
                code = (int)Code.Z.Code(Code.Z, Code.S, n2, 256, null, b);
            }
            finally {
                if (i != Code.aH) {
                    Code.Code.J(i > 0);
                    ++i;
                    continue;
                }
            }
            break;
        }
        Code.O = 0;
        return (B)code;
    }
    
    private void b(final byte[] array, final int n, final int n2) {
        int b;
        for (int i = n; i < n2; i += b + 6) {
            b = B(array, i + 4);
            this.s.A(this.bp++);
            this.s.B(array, i + 4, b + 2);
            this.s.C(array, i, 4);
        }
        this.u.d(array, n, n2 - n);
    }
    
    private static boolean Code(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        return n < n5 + n7 && n + n3 > n5 && n2 < n6 + n8 && n2 + n4 > n6;
    }
    
    private void Code(final a a, final byte[] array) {
        String s;
        final int index;
        if ((index = (s = this.Code[this.I]).indexOf(59)) >= 0) {
            s = s.substring(0, index);
        }
        Code.bv = this.C;
        Code.K = this.d;
        if (this.I()) {
            if (this.Code == null) {
                final Code b = new Code(s, Code.aB ^ true);
                this.B = b;
                this.Code = b.Code();
                this.I = this.Code;
                this.Code = b.Code();
                this.I = this.Code;
            }
            this.I(array, array.length);
            if (a != null) {
                a.B();
            }
            this.B(a);
            return;
        }
        String s2 = "";
        String s3;
        if (a != null) {
            final Object[] code;
            s3 = (String)(code = a.Code())[53];
            s2 = (String)code[42];
        }
        else {
            s3 = "server:test";
        }
        if ((this.q.cI & 0x2) != 0x0) {
            String s4 = Code(s3, s2);
            if (s3 != null && (s3.startsWith("b:") || s3.startsWith("javascript:"))) {
                s4 = Code((String)a.Code()[38], (String)null);
            }
            else if ("".equals(s4)) {
                if (s3 != null) {
                    s4 = s3;
                }
                else {
                    s4 = "internal";
                }
            }
            s += s4;
        }
        final J code2 = Code(s, "POST");
        this.B = code2;
        if (s.startsWith("http://10.0.0.172")) {
            final Object[] code3 = Code(this.g());
            final String string;
            if ((string = (String)code3[1] + ":" + code3[2]) != null) {
                code2.Code("X-Online-Host", string);
            }
        }
        code2.Code("Content-Type", "application/xml");
        this.Code = code2.Code();
        this.I = this.Code;
        this.I(array, array.length);
        this.B(a);
        this.Code.close();
        if (a != null) {
            a.B();
        }
        this.Code = null;
        this.Code = code2.Code();
        this.I = this.Code;
        final int i;
        if ((i = code2.I()) == 301 || i == 302 || i == 303 || i == 307) {
            this.bl = 1;
            final String code4;
            if (a != null && this.q.z() && (code4 = code2.Code("Location")) != null && code4.length() > 0) {
                if (a.J(code4)) {
                    this.J(a);
                    M();
                }
                else {
                    a.close();
                }
            }
            this.C(false);
            return;
        }
        if (i == 403) {
            this.bl = 2;
            try {
                final StringBuffer sb = new StringBuffer();
                int n = 0;
                int read;
                while ((read = this.Code.read()) > 32 && ++n <= 256) {
                    sb.append((char)read);
                    if (n == 4 && !sb.toString().toLowerCase().equals("http")) {
                        sb.setLength(0);
                        break;
                    }
                }
                if (sb.length() > 0) {
                    Code.f = sb.toString();
                }
                else {
                    Code.f = null;
                }
            }
            finally {}
            this.Code(false, 4);
        }
    }
    
    private boolean Code(a a) {
        if (this.g[0] != 72 || this.g[1] != 84 || this.g[2] != 84 || this.g[3] != 80) {
            return false;
        }
        this.i(5, 7);
        if (this.q.z() && this.g[8] == 32 && this.g[9] == 51 && this.g[10] == 48 && (this.g[11] == 49 || this.g[11] == 50 || this.g[11] == 51 || this.g[11] == 55)) {
            this.bl = 1;
            String b = null;
            final String s = "location";
            try {
                b = this.b(s);
            }
            finally {}
            if (b == null || b.length() == 0) {
                return false;
            }
            if (a != null) {
                if (a.J(b)) {
                    this.J(a);
                    M();
                }
                else {
                    a.close();
                }
            }
            final Object i;
            monitorenter(i = Code.I);
            a a2 = Code.Z;
        Label_0278_Outer:
            while (true) {
                while (true) {
                    if (a2 != null) {
                        final a a3 = a2;
                        try {
                            if (a3.Code() == this.C && !a2.Z() && a2 != a) {
                                if (a2.J(b)) {
                                    M();
                                }
                                else {
                                    a2.close();
                                }
                            }
                            a2 = a2.Code();
                            continue Label_0278_Outer;
                            monitorexit(i);
                        }
                        finally {
                            monitorexit(i);
                        }
                        break;
                    }
                    continue;
                }
            }
            this.Code(false, 0);
            return true;
        }
        else {
            if (this.g[8] == 32 && this.g[9] == 52 && this.g[10] == 48 && this.g[11] == 51) {
                this.bl = 2;
                a = (a)new StringBuffer();
                final String s2 = null;
                try {
                    this.b(s2);
                    int n = 0;
                Block_34:
                    while (++n <= 256) {
                        this.i(0, 1);
                        if (this.g[0] <= 32) {
                            break;
                        }
                        ((StringBuffer)a).append((char)this.g[0]);
                        if (n == 4 && !((StringBuffer)a).toString().toLowerCase().equals("http")) {
                            break Block_34;
                        }
                    }
                    ((StringBuffer)a).setLength(0);
                }
                finally {}
                Code.f = ((((StringBuffer)a).length() > 4) ? ((StringBuffer)a).toString() : null);
                this.Code(false, 4);
                return true;
            }
            return false;
        }
    }
    
    private String b(final String s) {
        final StringBuffer sb = new StringBuffer();
        while (true) {
            this.i(0, 1);
            if (this.g[0] == 13) {
                this.i(0, 1);
            }
            if (this.g[0] == 10) {
                if (sb.length() == 0) {
                    if (s != null) {}
                    return null;
                }
                final String string;
                final int index;
                if (s != null && (index = (string = sb.toString()).indexOf(58)) >= 0 && string.toLowerCase().startsWith(s)) {
                    return string.substring(index + 1).trim();
                }
                sb.setLength(0);
            }
            else {
                sb.append((char)this.g[0]);
            }
        }
    }
    
    private static String Code(String s, String s2) {
        String string = null;
        String s3 = null;
        Label_0111: {
            if ((s = s) == null) {
                s3 = (string = null);
            }
            else {
                final int length = s.length();
                final int index = s.indexOf(":/");
                final int index2 = s.indexOf(58);
                if (index >= 0 && index <= 10) {
                    s3 = (string = s);
                }
                else {
                    if (index2 != -1 && index == -1) {
                        if (index2 + 1 == length) {
                            s3 = (string = s);
                            break Label_0111;
                        }
                        final char char1;
                        if ((char1 = s.charAt(index2 + 1)) < '0' || char1 > '9') {
                            s3 = (string = s);
                            break Label_0111;
                        }
                    }
                    s3 = (string = "http://" + s);
                }
            }
        }
        s = string;
        if (s3 == null) {
            return "";
        }
        final int index3 = s.indexOf("https://");
        final int index4 = s.indexOf(47, index3 + 8);
        final StringBuffer sb = new StringBuffer(s);
        if (s2 != null && s2.length() > 0 && index3 == -1) {
            final int index5;
            if ((index5 = s2.indexOf("={\"c\":")) != -1) {
                s2 = s2.substring(0, index5);
            }
            s2 = c(s2);
            sb.append('?').append(s2);
        }
        if (index3 != -1 && index4 != -1) {
            sb.delete(index4, sb.length());
        }
        int n = 0;
        int n2 = 0;
        for (int i = sb.length() - 1; i >= 0; --i) {
            final char char2;
            if ((char2 = sb.charAt(i)) < '!' || char2 > '~' || "\"#;<>[]^`{|}~\\".indexOf(char2) >= 0) {
                sb.deleteCharAt(i);
            }
            else {
                if (char2 == '=') {
                    n = 1;
                }
                else if (char2 == '&') {
                    n2 = (n = 0);
                }
                else if (char2 == '.') {
                    n2 = 1;
                }
                if (i > s.length() && n != 0 && n2 != 0) {
                    sb.deleteCharAt(i);
                }
            }
        }
        sb.setLength(127);
        if (sb.charAt(126) == '%') {
            sb.setLength(126);
        }
        else if (sb.charAt(125) == '%') {
            sb.setLength(125);
        }
        return sb.toString().trim();
    }
    
    private static char[] Z(final int n) {
        final byte[] j;
        final char[] array = new char[(j = J(n)).length / 2];
        int n2 = 0;
        for (int i = 0; i < j.length; i += 2) {
            array[n2++] = (char)(j[i] << 8 | (j[i + 1] & 0xFF));
        }
        return array;
    }
    
    private static synchronized void Code(final DataInputStream dataInputStream, int byte1) {
        if (byte1 <= 5) {
            dataInputStream.readUTF();
            dataInputStream.readByte();
            dataInputStream.readByte();
            dataInputStream.readBoolean();
            dataInputStream.readBoolean();
            dataInputStream.readLong();
            dataInputStream.skip(8L);
            dataInputStream.skip(dataInputStream.readUnsignedByte());
            dataInputStream.skip(4 * dataInputStream.readUnsignedShort());
            dataInputStream.skip(4 * dataInputStream.readUnsignedShort());
            if (byte1 >= 4) {
                dataInputStream.readByte();
            }
            return;
        }
        Code.E = dataInputStream.readBoolean();
        dataInputStream.readByte();
        Code.J = dataInputStream.readByte();
        Code.B = dataInputStream.readByte();
        final String utf;
        Code.h = (((utf = dataInputStream.readUTF()).length() == 0) ? null : utf);
        final String utf2;
        Code.g = (((utf2 = dataInputStream.readUTF()).length() == 0) ? null : utf2);
        Code.bs = dataInputStream.readByte();
        if (byte1 >= 7) {
            Code.G = dataInputStream.readBoolean();
        }
        if (dataInputStream.readInt() != "mini5.opera-mini.net".hashCode()) {
            r();
        }
        Code.u = true;
        if (byte1 >= 8) {
            Code.u = dataInputStream.readBoolean();
            Code.J = dataInputStream.readLong();
        }
        byte1 = dataInputStream.readByte();
        for (int i = 0; i < byte1; ++i) {
            final String utf3 = dataInputStream.readUTF();
            final Code code;
            (code = new Code(Code(dataInputStream))).Z = dataInputStream.readLong();
            dataInputStream.readFully(code.g);
            final int unsignedByte;
            if ((unsignedByte = dataInputStream.readUnsignedByte()) != 0) {
                dataInputStream.readFully(code.f = new byte[unsignedByte]);
                Code.i = code.f;
            }
            code.g = Code(dataInputStream);
            code.h = Code(dataInputStream);
            if (!code.h()) {
                final Object[] array;
                (array = new Object[2])[0] = code;
                array[1] = "";
                Code.C.put(utf3, array);
            }
        }
    }
    
    private void T() {
        this.Q();
        this.r.s();
        final int n = ((this.g[1] & 0xFF) << 2) + 128;
        final int n2 = this.g[2] & 0xFF;
        this.i(5, n2 + 166 + n);
        this.P();
        this.r.f = new byte[n2 + 1];
        Code.i = this.r.f;
        System.arraycopy(this.g, 2, this.r.f, 0, n2 + 1);
        final int[] code = Code(this.g, n2 + 3, 160);
        final int[] code2 = Code(this.g, n2 + 163, n);
        final Code r = this.r;
        final byte[] g = this.g;
        final int n3 = n2 + 163 + n;
        r.Z = ((long)Code(g, n3) << 32 | ((long)Code(g, n3 + 4) & 0xFFFFFFFFL));
        this.r.g = code;
        this.r.h = code2;
        if (!Code.u) {
            Code.J = System.currentTimeMillis() - (this.r.Z - 1209600000L);
            Code.u = true;
        }
    }
    
    private Code(final int n, final char c) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.M = true;
        this.Code = new Vector();
        this.J = new Hashtable();
        this.bo = 0;
        this.a = 0;
    }
    
    private static byte[] B(int n) {
        final Object j;
        monitorenter(j = Code.J);
        if (Code.k == null) {
            final byte[] array = null;
            monitorexit(j);
            return array;
        }
        int n2 = -1;
        int n3 = 0;
        while (true) {
            final int n4 = n3;
            final byte[] k = Code.k;
            try {
                if (n4 < k.length) {
                    if (Code.k[n3] != (byte)n) {
                        n3 += 3;
                        continue;
                    }
                    n2 = n3 / 3;
                }
                if (n2 < 0) {
                    return null;
                }
                n = 0;
                while (true) {
                    final Code i = Code.J;
                    final String s = "mo";
                    final int n5 = n2 + 2;
                    try {
                        final byte[] code;
                        if ((code = i.Code(s, n5))[0] != 1) {
                            return null;
                        }
                        if (code[1] != 16) {
                            return null;
                        }
                        if (Code.l == null && (Code.k[n2 * 3] != code[2] || Code.k[n2 * 3 + 1] != code[3] || Code.k[n2 * 3 + 2] != code[4])) {
                            Code.l = new byte[Code.k.length];
                            System.arraycopy(Code.k, 0, Code.l, 0, Code.k.length);
                        }
                        if (Code.l != null) {
                            Code.l[n2 * 3] = code[2];
                            Code.l[n2 * 3 + 1] = code[3];
                            Code.l[n2 * 3 + 2] = code[4];
                        }
                        Code.m[n2] = code[5];
                        if (code.length == 6) {
                            return new byte[0];
                        }
                        final InputStream inputStream;
                        ((a)(inputStream = new a())).Code(new DataInputStream(new ByteArrayInputStream(code, 6, code.length - 6)));
                        final DataInputStream dataInputStream;
                        final int code2 = Code((DataInput)(dataInputStream = new DataInputStream(inputStream)));
                        int l = 0;
                        while (l < code2) {
                            int n6;
                            if ((dataInputStream.read() & 0xFF & 0x80) == 0x0) {
                                n6 = dataInputStream.readUnsignedShort();
                                l += n6 + 3;
                            }
                            else {
                                n6 = dataInputStream.readInt();
                                l += n6 + 5;
                            }
                            if (dataInputStream.skipBytes(n6) < n6) {
                                throw new EOFException();
                            }
                        }
                        final byte[] array2 = new byte[Code((DataInput)dataInputStream)];
                        dataInputStream.readFully(array2);
                        return array2;
                    }
                    finally {
                        if (n < Code.aH) {
                            Code.Code.I();
                            Code.Code.J(n > 0);
                            Code.Code.Z();
                            ++n;
                            continue;
                        }
                        W();
                        aa();
                        return null;
                    }
                }
            }
            finally {
                monitorexit(j);
            }
        }
    }
    
    private static B I(int n, final boolean b) {
        n |= 0x8000;
        int n2 = 0;
        int n3 = n;
        boolean b2 = b;
        try {
            return Code(n3, b2);
        }
        finally {
            if (n2 == Code.aH) {
                Code.af = 22;
                throw Code.Code;
            }
            Code.Code.J(n2 > 0);
            ++n2;
            n3 = n;
            b2 = b;
            return Code(n3, b2);
        }
    }
    
    private static String I(int i, int s, final int n) {
        B(n, s);
        final byte[] z = Code.Z;
        s = Code.S;
        final byte[] array = z;
        final int n2 = ((i << 2) + 2) / 3;
        final int n3 = (4 - n2 % 4) % 4;
        final byte[] array2 = new byte[n2 + n3];
        for (int j = 0; j < n2; ++j) {
            int n4 = 0;
            for (int k = 0; k < 6; ++k) {
                final int n5 = n4 << 1;
                final int n6 = j * 6 + k;
                int n7 = 0;
                if (n6 / 8 < i) {
                    n7 = array[s + n6 / 8];
                }
                n4 = (n5 | (n7 >> 7 - n6 % 8 & 0x1));
            }
            int n8;
            if (n4 < 26) {
                n8 = (char)(n4 + 65);
            }
            else if (n4 < 52) {
                n8 = (char)(97 + (n4 - 26));
            }
            else if (n4 < 62) {
                n8 = (char)(48 + (n4 - 52));
            }
            else if (n4 == 62) {
                n8 = 43;
            }
            else {
                n8 = 47;
            }
            array2[j] = (byte)n8;
        }
        for (i = 0; i < n3; ++i) {
            array2[n2 + i] = 61;
        }
        return new String(array2);
    }
    
    private static boolean c(final String s) {
        try {
            RecordStore.deleteRecordStore(s);
            return true;
        }
        finally {
            return false;
        }
    }
    
    private static int J(final byte[] array, final int n) {
        return (array[n] << 8) + (array[n + 1] & 0xFF);
    }
    
    private static boolean Z(final char c) {
        return '\u0590' <= c && c <= '\u05ff';
    }
    
    private int v(int n) {
        if ((n = n + 2 + this.C.E(n)) >= this.C.f.length || this.C.F(n) != 84) {
            return -1;
        }
        return n;
    }
    
    private static boolean C(final char c) {
        return ('\ufb50' <= c && c <= '\ufdff') || ('\ufe70' <= c && c <= '\ufefe');
    }
    
    private static synchronized void Code(final int bw, final byte[] array) {
        final DataInputStream dataInputStream = new DataInputStream(new ByteArrayInputStream(array));
        try {
            U();
            Code z = null;
            final int unsignedByte;
            final Code[] i = new Code[unsignedByte = dataInputStream.readUnsignedByte()];
            for (int j = 0; j < unsignedByte; ++j) {
                final int unsignedByte2 = dataInputStream.readUnsignedByte();
                final int unsignedByte3 = dataInputStream.readUnsignedByte();
                final String utf = dataInputStream.readUTF();
                i[j] = new Code(unsignedByte2, unsignedByte3, utf, dataInputStream.readUnsignedShort(), dataInputStream.readUnsignedShort(), dataInputStream.readUTF(), utf);
                if (i[j].cH == 255) {
                    z = i[j];
                }
            }
            final int unsignedByte4;
            final Code[] code;
            (code = new Code[(unsignedByte4 = dataInputStream.readUnsignedByte()) + 2])[0] = Code.x;
            for (int k = 1; k <= unsignedByte4; ++k) {
                code[k] = new Code(dataInputStream.readUTF(), dataInputStream.readUTF(), dataInputStream.readUnsignedShort(), dataInputStream.readUTF(), dataInputStream.readUnsignedByte());
            }
            code[unsignedByte4 + 1] = Code.w;
            Code.z = z;
            Code.I = i;
            Code.Code = code;
            Code.bw = bw;
        }
        catch (IOException ex) {
            throw ex;
        }
    }
    
    private static int[] Code(final DataInputStream dataInputStream) {
        final int unsignedShort;
        if ((unsignedShort = dataInputStream.readUnsignedShort()) == 0) {
            return null;
        }
        final byte[] array = new byte[unsignedShort << 2];
        dataInputStream.readFully(array);
        return Code(array, 0, array.length);
    }
    
    private static void Code(final StringBuffer sb, final char c) {
        sb.append('%');
        if (c < '\u0010') {
            sb.append('0');
        }
        sb.append(Integer.toHexString(c));
    }
    
    private static String d(String string) {
        final int index = string.indexOf(46);
        final int lastIndex = string.lastIndexOf(45, index - 1);
        final String s = string;
        final int n = lastIndex;
        final int n2 = index;
        try {
            final int int1;
            if ((int1 = Integer.parseInt(s.substring(n, n2))) >= -255 && int1 < 0) {
                string = string.substring(0, lastIndex) + string.substring(index);
            }
            return string;
        }
        finally {
            return string;
        }
    }
    
    private static Code I(final int n) {
        return new Code(n, Code.y.cI, Code(Code.y.o, 1), Code.y.b, Code.y.cq, Code.y.q, Code.y.o);
    }
    
    private static void I(final DataInputStream dataInputStream, int n) {
        while (n-- > 0) {
            C(dataInputStream.readInt());
        }
    }
    
    private static String Code(String string, final int n) {
        final int index;
        if ((index = string.indexOf(46)) > 0) {
            string = string.substring(0, index) + '-' + n + string.substring(index);
        }
        return string;
    }
    
    private static synchronized boolean r() {
        final String s = "trafficrouting";
        try {
            RecordStore.deleteRecordStore(s);
        }
        finally {}
        if (Code.bw != 0) {
            U();
            return true;
        }
        return false;
    }
    
    private static void Z(final String s) {
        final Code j = Code.J;
        final int n = 1;
        try {
            final DataInputStream dataInputStream = new DataInputStream(new ByteArrayInputStream(j.Code(s, n)));
            if ("mc".equals(s)) {
                final DataInputStream dataInputStream2;
                if ((dataInputStream2 = dataInputStream).readByte() == 1) {
                    final String utf;
                    if ((utf = dataInputStream2.readUTF()).length() >= 64) {
                        Code(1, utf, false);
                    }
                    dataInputStream2.readBoolean();
                }
                return;
            }
            if ("md".equals(s)) {
                final DataInputStream dataInputStream3;
                final byte byte1;
                if ((byte1 = (dataInputStream3 = dataInputStream).readByte()) <= 8) {
                    final DataInputStream dataInputStream4 = dataInputStream3;
                    final int n2 = 8;
                    try {
                        I(dataInputStream4, n2);
                        if (byte1 >= 8) {
                            dataInputStream3.readBoolean();
                        }
                        Code(dataInputStream3, byte1);
                        Code.ak = dataInputStream3.readBoolean();
                        dataInputStream3.readInt();
                        Code.bG = dataInputStream3.readInt();
                        if (byte1 >= 5) {
                            Code.bI = dataInputStream3.readShort();
                            Code.bJ = dataInputStream3.readShort();
                        }
                        Code.bM = dataInputStream3.readInt();
                        Code.j = dataInputStream3.readUTF();
                        Code.C = (byte)(dataInputStream3.readByte() & 0x3);
                        dataInputStream3.readUTF();
                        dataInputStream3.read(Code.n, 0, 32);
                        dataInputStream3.read(Code.o, 0, 32);
                    }
                    catch (IOException ex) {}
                }
            }
        }
        finally {
            if ("mc".equals(s)) {
                Code.ab = true;
            }
        }
    }
    
    public static int[] Code(final int[] array, final int n) {
        if (array.length < n) {
            return I(array, n);
        }
        return array;
    }
    
    private static Class Code(final String s) {
        try {
            return Class.forName(s);
        }
        finally {
            return null;
        }
    }
    
    public static void Code(final InputStream inputStream) {
        try {
            inputStream.close();
        }
        finally {}
    }
    
    public static void Code(final OutputStream outputStream) {
        try {
            outputStream.close();
        }
        finally {}
    }
    
    public static void Code(final Object o, final int n) {
        monitorenter(o);
        final long n2 = n;
        try {
            o.wait(n2);
        }
        catch (InterruptedException ex) {}
        finally {
            monitorexit(o);
        }
    }
    
    private static boolean b(final String s) {
        return Code(s) != null;
    }
    
    private static String f(String substring) {
        final StringBuffer sb = new StringBuffer(substring.length());
        int index;
        while ((index = substring.indexOf(37)) >= 0 && index + 3 <= substring.length()) {
            sb.append(substring.substring(0, index)).append((char)Integer.parseInt(substring.substring(index + 1, index + 3), 16));
            substring = substring.substring(index + 3, substring.length());
        }
        return sb.append(substring).toString();
    }
    
    private static byte[] Z(final String s) {
        final byte[] array = new byte[s.length() / 2];
        for (int i = 0; i < array.length; ++i) {
            array[i] = (byte)Integer.parseInt(s.substring(i << 1, (i << 1) + 2), 16);
        }
        return array;
    }
    
    public static void C(final int n) {
        final Code a;
        monitorenter(a = Code.A);
        final Code a2 = Code.A;
        try {
            a2.F(n);
        }
        finally {
            monitorexit(a);
        }
    }
    
    private static String g(String property) {
        if ((property = System.getProperty((String)property)) != null) {
            final byte[] bytes = ((String)property).getBytes();
            final Code a;
            monitorenter(a = Code.A);
            final Code a2 = Code.A;
            final byte[] array = bytes;
            final int n = 0;
            final byte[] array2 = bytes;
            try {
                a2.a(array, n, array2.length);
            }
            finally {
                monitorexit(a);
            }
        }
        return (String)property;
    }
    
    private static int Code(int a, int n, final int n2, int i, int n3, final int n4) {
        Code.O = a;
        final J n5 = (J)Code(Code.O);
        final String c = C(n);
        final Code code = new Code(I(n4), n3, i, n2, c, n5);
        d(0);
        Code code2;
        Object element;
        boolean b;
        boolean b3;
        boolean b2;
        boolean b8;
        boolean b7;
        boolean b6;
        boolean b5;
        boolean b4;
        boolean b9;
        boolean b23;
        boolean b22;
        boolean b21;
        boolean b20;
        boolean b19;
        boolean b18;
        boolean b17;
        boolean b16;
        boolean b15;
        boolean b14;
        boolean b13;
        boolean b12;
        boolean b11;
        boolean b10;
        int p6;
        int p7;
        Code code3;
        Code code4;
        char[] array;
        int n6;
        int j;
        J n7;
        char[] code5;
        int p8;
        int r;
        int p9;
        Code code6;
        int p10;
        int p11;
        Code code7;
        int p12;
        int p13;
        Code code8;
        int p14;
        for (i = 0; i < code.Code.size(); ++i) {
            Code.P = a(9, 44);
            code2 = code;
            n3 = i;
            if ((b = ((element = code2.Code.elementAt(n3)) instanceof Code)) && (b = ((Code)element).bi) && (b2 = (b3 = (b = ((Code)element).bh)))) {
                if (((Code)element).bg) {
                    b3 = (b2 = (b = false));
                }
                if (b2) {
                    if (((Code)element).bf) {
                        b = (b3 = false);
                    }
                    if (b3) {
                        b4 = (b5 = (b6 = (b7 = (b8 = (b = ((Code)element).be)))));
                        if ((b9 = b4) && b4) {
                            if (((Code)element).bd) {
                                b5 = (b9 = (b6 = (b7 = (b8 = (b = false)))));
                            }
                            if (b9 && b5) {
                                if (((Code)element).bc) {
                                    b7 = (b6 = (b8 = (b = false)));
                                }
                                if (b6) {
                                    if (((Code)element).bb) {
                                        b8 = (b7 = (b = false));
                                    }
                                    if (b7) {
                                        if (((Code)element).ba) {
                                            b = (b8 = false);
                                        }
                                        if (b8 && (b10 = (b11 = (b12 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b = ((Code)element).aZ)))))))))))))))) {
                                            if (((Code)element).aY) {
                                                b11 = (b10 = (b12 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b = false))))))))))))));
                                            }
                                            if (b10) {
                                                if (((Code)element).aX) {
                                                    b12 = (b11 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b = false)))))))))))));
                                                }
                                                if (b11 && b12) {
                                                    if (((Code)element).aW) {
                                                        b14 = (b13 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b = false)))))))))));
                                                    }
                                                    if (b13) {
                                                        if (((Code)element).aV) {
                                                            b15 = (b14 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b = false))))))))));
                                                        }
                                                        if (b14) {
                                                            if (((Code)element).aU) {
                                                                b16 = (b15 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b = false)))))))));
                                                            }
                                                            if (b15) {
                                                                if (((Code)element).aT) {
                                                                    b17 = (b16 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b = false))))))));
                                                                }
                                                                if (b16) {
                                                                    if (((Code)element).aS) {
                                                                        b18 = (b17 = (b19 = (b20 = (b21 = (b22 = (b23 = (b = false)))))));
                                                                    }
                                                                    if (b17) {
                                                                        if (((Code)element).aR) {
                                                                            b19 = (b18 = (b20 = (b21 = (b22 = (b23 = (b = false))))));
                                                                        }
                                                                        if (b18) {
                                                                            if (((Code)element).aQ) {
                                                                                b20 = (b19 = (b21 = (b22 = (b23 = (b = false)))));
                                                                            }
                                                                            if (b19) {
                                                                                if (((Code)element).aP) {
                                                                                    b21 = (b20 = (b22 = (b23 = (b = false))));
                                                                                }
                                                                                if (b20) {
                                                                                    if (((Code)element).aO) {
                                                                                        b22 = (b21 = (b23 = (b = false)));
                                                                                    }
                                                                                    if (b21) {
                                                                                        if (((Code)element).aN) {
                                                                                            b23 = (b22 = (b = false));
                                                                                        }
                                                                                        if (b22) {
                                                                                            if (((Code)element).aM) {
                                                                                                b = (b23 = false);
                                                                                            }
                                                                                            if (b23 && (b = ((Code)element).aL)) {
                                                                                                b = ((Code)element).aE;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (b) {
                p6 = Code.P;
                n3 = n5.I(c);
                a(p6 + 4, n3);
                n3 = Code(c);
            }
            else {
                p7 = Code.P;
                code3 = code;
                n3 = i;
                code4 = code3;
                if ((code3.s(n3) & 0x2) != 0x0) {
                    array = new char[code4.Code.length];
                    n6 = 0;
                    for (j = code4.p(n3); j < code4.q(n3); ++j) {
                        if (!Code(code4.Code[j])) {
                            array[n6++] = code4.Code[j];
                        }
                    }
                    n7 = code4.I;
                    code5 = array;
                    p8 = 0;
                    r = n6;
                }
                else {
                    n7 = code4.I;
                    code5 = code4.Code;
                    p8 = code4.p(n3);
                    r = code4.r(n3);
                }
                n3 = n7.Code(code5, p8, r);
                a(p7 + 4, n3);
                n3 = I(code.Code, code.p(i), code.r(i));
            }
            a(Code.P, n3);
            p9 = Code.P;
            code6 = code;
            n3 = i;
            n3 = ((Code)code6.Code.elementAt(n3)).br;
            a(p9 + 2, n3);
            p10 = Code.P;
            n3 = Code.O;
            a(p10 + 1, n3);
            p11 = Code.P;
            code7 = code;
            n3 = i;
            n3 = ((Code)code7.Code.elementAt(n3)).bm;
            a(p11 + 3, n3);
            p12 = Code.P;
            n3 = n5.b();
            a(p12 + 5, n3);
            p13 = Code.P;
            code8 = code;
            n3 = i;
            n3 = ((Code)code8.Code.elementAt(n3)).bq;
            a(p13 + 6, n3);
            p14 = Code.P;
            n3 = code.s(i);
            a(p14 + 8, n3);
            e(Code.P);
        }
        Code.O = 0;
        Code.P = 0;
        a(a = a(2, 45), l());
        final int n8 = a;
        final int n9 = code.I - 1;
        n = ((n9 | -n9) >>> 31 ^ 0x1);
        a(n8 + 1, n);
        return a;
    }
    
    private static char[] I() {
        final char[] array = new char[Code.bP + Code.bR];
        final char[] z = Z(8);
        int bp = Code.bP;
        for (int i = 0; i < z.length; i = (char)(i + 2)) {
            for (char c = z[i]; c <= z[i + 1]; ++c) {
                array[bp++] = c;
            }
        }
        final char[] z2 = Z(7);
        final int n = 0;
        final char[] array2 = array;
        final int bp2 = Code.bP;
        final char[] array3 = array;
        int n2 = 0;
        final char[] array4 = array3;
        int n3 = bp2;
        final char[] array5 = array2;
        int n4 = n;
        for (char[] array6 = z2; n4 < array6.length || n3 < array5.length; array4[n2++] = ((n3 == array5.length) ? array6[n4++] : ((n4 != array6.length && array6[n4] < array5[n3]) ? array6[n4++] : array5[n3++]))) {}
        return array;
    }
    
    private static synchronized void a(final boolean b) {
        Code.bT = 0;
        if (!b && Code.j != null && Code.j.length == 32) {
            return;
        }
        final Code code = new Code((short)0, false);
        Code.Code = new Z(Code.bQ);
        ab();
        Code.bS = (6 + (((Code.ac ^ true) ? 1 : 0) << 1)) * 17312;
        if (b) {
            final int bs = Code.bS;
            Code.Code.I();
            I(bs);
            Code.Code.v(26);
        }
        if (!Code.ac) {
            if (b && (Code.D == null || Code.E == null)) {
                Code.ac = true;
            }
            else {
                code.F(-516829686);
                code.F(950495394);
            }
        }
        for (int i = 0; i < 6; ++i) {
            N(i);
        }
        code.a(Code.Code.Code(), 0, Code.Code.size());
        Code.Code.reset();
        Code(Z(5), 5);
        code.a(Code.Code.Code(), 0, Code.Code.size());
        Code.Code.reset();
        final byte[] bytes = (System.getProperty("microedition.platform") + System.getProperty("device.software.version")).getBytes();
        code.a(bytes, 0, bytes.length);
        final byte[] n = new byte[32];
        code.I(n);
        if (!Code(n, Code.n) || Code(Code.o, new byte[32])) {
            Code.n = n;
            final char[] z = Z(6);
            final Code code2 = new Code((short)0, false);
            final byte[][] array = new byte[3][32];
            int n2 = 0;
            do {
                for (int j = 0; j < 6; ++j) {
                    N(j);
                    Code((5 == j) ? I() : z, j);
                    code2.a(Code.Code.Code(), 0, Code.Code.size());
                    Code.Code.reset();
                }
                if (!Code.ac) {
                    Code.Code.write(Code.a - 2);
                    Code.Code.write(2);
                    Code(z, 6);
                    Code.Code.write(Code.a - 2);
                    Code.Code.write(2);
                    Code(z, 7);
                    code2.a(Code.Code.Code(), 0, Code.Code.size());
                    Code.Code.reset();
                }
                code2.I(Code.o);
                System.arraycopy(Code.o, 0, array[n2 % array.length], 0, 32);
                ++n2;
            } while (Code.P && n2 <= 10 && (!Code(array[0], array[1]) || !Code(array[0], array[2])));
            I("md");
        }
        Code.Code.write(Code.o, 0, 32);
        if (b) {
            for (int k = 0; k < 6; ++k) {
                Code.Code.write(k >> 8 & 0xFF);
                Code.Code.write(k & 0xFF);
                N(k);
                O(k);
            }
            if (!Code.ac) {
                for (int l = 6; l < 8; ++l) {
                    Code.Code.write(l >> 8 & 0xFF);
                    Code.Code.write(l & 0xFF);
                    Code.Code.write(Code.a - 2);
                    Code.Code.write(2);
                    O(l);
                }
            }
        }
        Code.j = Code.Code.toByteArray();
        Code.Code = null;
        if (b) {
            Code.Code.I();
            Code.Code.v(27);
        }
    }
    
    private static void Code(final Code code, final int n, final char[] array, final int n2, final int n3, final int n4, final int n5, final int n6) {
        if (n >= 6) {
            Z(n).Code(code, array, n2, n3, n4, n5, n6);
            return;
        }
        if (Code.S) {
            code.Code(new String(array, n2, n3), n4, n5 + Code.Code[n].d(), Code.Code[n], n6);
            return;
        }
        code.Code(array, n2, n3, n4, n5 + Code.Code[n].d(), Code.Code[n], n6);
    }
    
    private static void ab() {
        if (!Code.ac && (Code.D == null || Code.E == null)) {
            final String b;
            if ((b = B("language")) != null && b.length() > 0 && Code.k.indexOf(b + ",") >= 0) {
                Code.ac = true;
                return;
            }
            try {
                Code.D = new Code(false, Code.Z);
                Code.E = new Code(true, Code.Z);
                if (Code.D.b() >= Code(64, 0, 8).b()) {
                    Code.ac = true;
                    Code.D = (Code.E = null);
                }
            }
            catch (OutOfMemoryError outOfMemoryError) {
                System.gc();
                Code.ac = true;
                Code.j = null;
            }
        }
    }
    
    private static String J(final int n) {
        if (Code.I[n] != null) {
            return Code.I[n];
        }
        return "";
    }
    
    private static void W() {
        if (Code.C < 3) {
            ++Code.C;
            Y();
        }
    }
    
    private static boolean Code(final int n, final byte[] array) {
        final Object j;
        monitorenter(j = Code.J);
        int n2 = -1;
        final Code i = Code.J;
        final String s = "mo";
        final int n3 = 1;
        try {
            final byte[] code;
            if ((code = i.Code(s, n3)).length == 1) {
                n2 = code[0];
            }
        }
        finally {}
        if (n2 == -1) {
            final String s2 = "mo";
            try {
                RecordStore.deleteRecordStore(s2);
            }
            finally {}
        }
        Label_0072: {
            if (n >= n2) {
                break Label_0072;
            }
            final Code k = Code.J;
            final String s3 = "mo";
            final int n4 = n + 2;
            try {
                k.Code(s3, n4, array);
                boolean b = true;
                while (true) {
                    while (true) {
                    Block_11:
                        while (true) {
                            monitorexit(j);
                            return b;
                            iftrue(Label_0142:)(n2 >= n);
                            break Block_11;
                            Label_0142: {
                                Code.J.Code("mo", array);
                            }
                            b = true;
                            continue;
                        }
                        Code.J.Code("mo", new byte[0]);
                        ++n2;
                        continue;
                        n2 = 0;
                        final byte[] array2;
                        Code.J.Code("mo", array2);
                        continue;
                        Label_0106: {
                            Code.J.Code("mo", 1, array2);
                        }
                        continue;
                    }
                    final byte[] array2;
                    final byte[] array3 = array2 = new byte[] { 0 };
                    array3[0] = (byte)(n + 1);
                    iftrue(Label_0106:)(n2 != -1);
                    continue;
                }
            }
            finally {
                try {
                    Y();
                    W();
                    return false;
                }
                finally {
                    monitorexit(j);
                }
            }
        }
    }
    
    private static void X() {
        final Object j;
        monitorenter(j = Code.J);
        Label_0081: {
            if (Code.k != null && Code.m != null) {
                break Label_0081;
            }
            final String s = "mo";
            try {
                if (!a(s)) {
                    return;
                }
                int n = 0;
                final Code i = Code.J;
                final String s2 = "mo";
                final int n2 = 1;
                try {
                    final byte[] code;
                    if ((code = i.Code(s2, n2)).length == 1) {
                        n = code[0];
                    }
                }
                finally {}
                if (n == 0) {
                    Y();
                    return;
                }
                Code.l = new byte[n * 3];
                Code.m = new byte[n];
                if (Code.l == null) {
                    Code.l = new byte[Code.k.length];
                    System.arraycopy(Code.k, 0, Code.l, 0, Code.k.length);
                }
            Label_0251:
                for (int k = 0; k < Code.l.length / 3; ++k) {
                    int n3 = 0;
                    while (true) {
                        final Code l = Code.J;
                        final String s3 = "mo";
                        final int n4 = k + 2;
                        try {
                            final byte[] code2;
                            if ((code2 = l.Code(s3, n4))[0] != 1) {
                                Y();
                                return;
                            }
                            if (code2[1] != 16) {
                                Y();
                                return;
                            }
                            Code.l[k * 3] = code2[2];
                            Code.l[k * 3 + 1] = code2[3];
                            Code.l[k * 3 + 2] = code2[4];
                            Code.m[k] = code2[5];
                            break;
                        }
                        finally {
                            if (n3 < Code.aH) {
                                Code.Code.J(n3 > 0);
                                ++n3;
                                continue;
                            }
                            W();
                            Y();
                            monitorexit(j);
                            return;
                        }
                        break Label_0251;
                    }
                }
                aa();
            }
            finally {
                monitorexit(j);
            }
        }
    }
    
    private static void aa() {
        final Object j;
        monitorenter(j = Code.J);
        if (Code.l != null) {
            Code.k = Code.l;
            Code.l = null;
        }
        monitorexit(j);
    }
    
    private static void Y() {
        final Object j;
        monitorenter(j = Code.J);
        Code.k = null;
        Code.l = null;
        Code.m = null;
        final String s = "mo";
        try {
            RecordStore.deleteRecordStore(s);
        }
        finally {}
        monitorexit(j);
    }
    
    private static Code Z(final int n) {
        if (J(n)) {
            return Code.E;
        }
        return Code.D;
    }
    
    private static boolean J(final char c) {
        return B(c) || C(c);
    }
    
    private static boolean Code(final String s, final char c, final J n) {
        final B code2;
        final Code code = (code2 = Code(Math.max(n.Code(c) / 2, 1), n.a())).Code();
        final int[] array = new int[code2.Code.getWidth() * code2.Code.getHeight()];
        final int[] array2 = new int[code2.Code.getWidth() * code2.Code.getHeight()];
        code.J(0, 0, code2.Code.getWidth(), code2.Code.getHeight(), 16777215);
        code.Code(s, 0, 0, n, 0);
        code2.Code(array, code2.Code.getWidth(), 0, 0, code2.Code.getWidth(), code2.Code.getHeight());
        code.J(0, 0, code2.Code.getWidth(), code2.Code.getHeight(), 16777215);
        code.Code(c, n);
        code2.Code(array2, code2.Code.getWidth(), 0, 0, code2.Code.getWidth(), code2.Code.getHeight());
        final int[] array3 = array;
        final int[] array4 = array2;
        final int[] array5 = array3;
        return array3 != array4 && (array5.length != array4.length || !Code(array5, 0, array4, 0, array5.length));
    }
    
    private static int Code(final char[] array, final boolean b, final int n, final int n2, final J n3) {
        if (n3.Code(array, 0, array.length) <= n) {
            if (b) {
                return array.length;
            }
            return 0;
        }
        else {
            int i = 0;
            int j = array.length;
            if (b) {
                while (j > 0) {
                    final int n4 = j / 2;
                    if (n3.Code(array, 0, n4) + n2 <= n) {
                        break;
                    }
                    j = n4;
                }
                while (j > 0 && n3.Code(array, 0, j) + n2 > n) {
                    --j;
                }
                return j;
            }
            while (i < j) {
                final int n5 = i + (j - i) / 2 + 1;
                if (n3.Code(array, n5, j - n5) + n2 <= n) {
                    break;
                }
                i = n5;
            }
            while (i < j && n3.Code(array, i, j - i) + n2 > n) {
                ++i;
            }
            return i;
        }
    }
    
    private static boolean b(final char c) {
        return (c & '\ufc00') == 0xDC00;
    }
    
    private static boolean I(final char c) {
        return Z(c) || J(c);
    }
    
    private static boolean B(final char c) {
        return '\u0600' <= c && c <= '\u06ff';
    }
    
    public static int Code(final int n, final char[] array, final int n2, final int n3) {
        if (n >= 6) {
            return Z(n).Code(array, n2, n3);
        }
        if (!Code.ao) {
            return Code.Code[n].Code(array, n2, n3);
        }
        return I(n, array, n2, n3);
    }
    
    public static int a(final int n) {
        if (n >= 6) {
            return Code.a;
        }
        return Code.Code[n].b();
    }
    
    private static int Code(final int n, final char c) {
        if (n >= 6) {
            return Z(n).Code(c);
        }
        return I(n, c);
    }
    
    private static int Code(final int n, final String s) {
        if (n >= 6) {
            return Z(n).I(s);
        }
        if (!Code.ao) {
            return Code.Code[n].I(s);
        }
        return I(n, s.toCharArray(), 0, s.length());
    }
    
    private static String h(final String s) {
        StringBuffer sb = null;
        for (int i = 0; i < s.length(); ++i) {
            final char char1 = s.charAt(i);
            if ('\ufe80' <= char1 && char1 <= '\ufefc') {
                if (sb == null) {
                    sb = new StringBuffer(s);
                }
                if (char1 < '\ufef5') {
                    sb.setCharAt(i, (char)(1536 + (0xFF & Code.q[char1 - '\ufe80'])));
                }
                else {
                    sb.setCharAt(i, '\u0644');
                    ++i;
                    sb.insert(i, (char)(1536 + (0xFF & Code.p[char1 - '\ufef5'])));
                }
            }
        }
        if (sb == null) {
            return s;
        }
        return sb.toString();
    }
    
    private static int I(final int n, final char[] array, final int n2, final int n3) {
        int n4 = 0;
        for (int i = n2; i < n2 + n3; ++i) {
            n4 += I(n, array[i]);
        }
        return n4;
    }
    
    private static void N(int n) {
        final int max = Math.max(0, Code.Code[n].b() - ((Code.Code[n].c() > 0) ? Code.Code[n].c() : (Code.Code[n].b() - Code.Code[n].d())) - Code.Code[n].d());
        n = Code.Code[n].b() - max;
        Code.Code.write(n);
        Code.Code.write(max);
    }
    
    private static int I(final int n, final char c) {
        if (!Code.ao || c == ' ' || c > '\u07ff') {
            return Code.Code[n].Code(c);
        }
        if (Code.I[n][c] != -1) {
            return Code.I[n][c];
        }
        final int a = Code.Code[Code.Code.length - 1].a();
        if (Code.C == null) {
            Code.C = Code(32, a);
        }
        final Code code;
        (code = Code.C.Code()).J(0, 0, 32, a, 16777215);
        code.Code(c, Code.Code[n]);
        final int[] array = new int[a << 5];
        Code.C.Code(array, 32, 0, 0, 32, a);
        final int n2 = array[array.length - 1];
        int max = 0;
        for (int i = (a << 5) - 1; i >= 0; --i) {
            if (array[i] != n2) {
                max = Math.max(i & 0x1F, max);
                i &= 0xFFFFFFE0;
            }
        }
        return Code.I[n][c] = (byte)(max + 2);
    }
    
    private static void j(final int n, final int n2) {
        Code.bV = ((Code.bV <<= n2) | (n & (1 << n2) - 1));
        Code.bU += n2;
        while (Code.bU >= 8) {
            Code.bU -= 8;
            Code.Code.write(Code.bV >> Code.bU);
        }
    }
    
    private static int a(String s) {
        final byte[] array = new byte[(s = s).length() * 3 / 4];
        int n = 0;
        int n2 = 0;
        int n3 = 0;
        for (int i = 0; i < s.length(); ++i) {
            final char char1;
            int n4;
            if ((char1 = s.charAt(i)) >= 'A' && char1 <= 'Z') {
                n4 = char1 - 'A';
            }
            else if (char1 >= 'a' && char1 <= 'z') {
                n4 = char1 - 'a' + 26;
            }
            else if (char1 >= '0' && char1 <= '9') {
                n4 = char1 - '0' + 52;
            }
            else if (char1 == '+') {
                n4 = 62;
            }
            else if (char1 == '/') {
                n4 = 63;
            }
            else {
                if (char1 != '=') {
                    final byte[] array2 = null;
                    return Code(array2);
                }
                break;
            }
            n = (n << 6 | n4);
            n2 += 6;
            if (n2 >= 8) {
                array[n3] = (byte)(n >> n2 - 8);
                n ^= array[n3++] << n2 - 8;
                n2 -= 8;
            }
        }
        if (n3 == array.length) {
            final byte[] array2 = array;
            return Code(array2);
        }
        final byte[] array3 = new byte[n3];
        System.arraycopy(array, 0, array3, 0, n3);
        final byte[] array2 = array3;
        return Code(array2);
    }
    
    private static int b(final String s) {
        try {
            if (B(s)) {
                return 1;
            }
            return 0;
        }
        catch (IOException ex) {
            return 2;
        }
    }
    
    private static I Code(final String s) {
        final Code i = Code.I;
        final boolean b = true;
        final int n = 3;
        try {
            final Code code;
            if ((code = i.Code(s, b, n)).s()) {
                return I.Code(code.Code(0L));
            }
        }
        finally {
            return null;
        }
    }
    
    private static a Code(final String s) {
        final Code i = Code.I;
        try {
            final Code code;
            if ((code = (i.Z(s) ? Code.I.Code(s, false, 3) : null)) != null) {
                return a.Code(code.Code(), (int)code.Z());
            }
        }
        finally {
            return null;
        }
    }
    
    private static int Code(String code, int i) {
        final String j = I(i);
        code = Code(i, code);
        final Code k = Code.J;
        final String s = j;
        final String s2 = code;
        try {
            final byte[] code2;
            if ((code2 = k.Code(s, s2)) != null) {
                i = I(code2);
                return Z(code2, 0, i);
            }
        }
        finally {
            return 0;
        }
    }
    
    private static boolean Code(String code, final int n) {
        final String i = I(n);
        code = Code(n, code);
        final Code j = Code.J;
        final String s = i;
        final String s2 = code;
        try {
            if (j.Code(s, s2)) {
                return true;
            }
        }
        finally {
            return false;
        }
    }
    
    private static int D() {
        if (Code.az) {
            final Code i = Code.I;
            try {
                final int[] code;
                if ((code = i.Code()) != null) {
                    final int length = code.length;
                    Z(length, length);
                    int code2 = Code.Code;
                    for (int j = 0; j < code.length; ++j) {
                        if (code[j] != 0) {
                            Code.Code[code2++] = code[j];
                        }
                    }
                    return m();
                }
            }
            finally {}
        }
        return 0;
    }
    
    private Code(final int n, final short n2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.aF = true;
    }
    
    private Code(final String s, final String requestMethod, final boolean b) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.aG = true;
        (this.Code = (HttpConnection)Connector.open(s, 3, b)).setRequestMethod(requestMethod);
    }
    
    public final void Code(final String s, final String s2) {
        this.Code.setRequestProperty(s, s2);
    }
    
    public final String Code(final String s) {
        return this.Code.getHeaderField(s);
    }
    
    public Code(final String b, final byte b2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aI = true;
        this.aH = true;
        this.b = b;
    }
    
    public final int I(final String s) {
        if (this.aY) {
            return this.Code.stringWidth(s);
        }
        final int length = s.length();
        int n = 0;
        for (int min = Math.min(length, s.length()), i = 0; i < min; ++i) {
            n += this.f[Code(s.charAt(i))];
        }
        return n;
    }
    
    private static boolean B(int n) {
        final String b;
        if ((b = B(n)) != null) {
            RecordStore openRecordStore = null;
            final String s = b;
            final boolean b2 = false;
            try {
                RecordStore recordStore;
                if ((openRecordStore = RecordStore.openRecordStore(s, b2)).getNumRecords() > 0) {
                    n = 1;
                    recordStore = openRecordStore;
                }
                else {
                    n = 0;
                    recordStore = openRecordStore;
                }
                try {
                    recordStore.closeRecordStore();
                }
                finally {
                    return n != 0;
                }
            }
            finally {
                final RecordStore recordStore2 = openRecordStore;
                try {
                    recordStore2.closeRecordStore();
                }
                finally {}
            }
        }
        return false;
    }
    
    private static void c(final byte[] array, final int n, int n2) {
        while (n2-- > 0) {
            array[n + n2] = 0;
        }
    }
    
    private static String Code(final byte[] array, int n) {
        final int b = B(array, n);
        n += 2;
        return Code(array, n, n + b);
    }
    
    private int Code(final boolean b) {
        return this.I().length() - this.I(b);
    }
    
    private int I(final boolean b) {
        if (this.J()) {
            if (b) {
                return 1;
            }
            return 0;
        }
        else {
            if (b) {
                return this.I().length() - 1;
            }
            return this.I().length();
        }
    }
    
    private void Code(final int[] array, final int n, final int n2, final int[] array2) {
        final int[][] array3 = this.O.Code.elementAt(this.K.az);
        for (int i = 0; i < array3.length; ++i) {
            final int[] array4 = array3[i];
            if (i == 0) {
                array2[0] = array4[3] + array4[7];
                array2[2] = array4[5];
            }
            else {
                array2[0] = Math.min(array2[0], array4[3] + array4[7]);
                final int n3 = 2;
                array2[n3] += array4[5];
            }
            array2[1] = this.I(array, n, n2, array4[4] + array4[8]);
            array2[3] = array4[6];
        }
    }
    
    private synchronized boolean Code(final Code code, int h, final Code code2) {
        if (h == 0) {
            return false;
        }
        h = H(h);
        final int[] code3 = Code.Code;
        final int n = Code.Code + 2;
        final int i;
        if ((i = this.I(code3, n, h, code2.B.J())) < 0) {
            return false;
        }
        code.B.Code(this.Code(code3, n, h, code2.B.Z(), i), code2.B.Z(), i);
        return true;
    }
    
    private boolean w() {
        if (this.L != null) {
            synchronized (this) {
                this.aw();
                return true;
            }
        }
        return false;
    }
    
    public final int Code(final char[] array, int i, final int n) {
        if (this.aY) {
            i = i;
            return this.Code.charsWidth(array, i, n);
        }
        i = i;
        int n2 = 0;
        while (i < i + n) {
            n2 += this.f[Code(array[i])];
            ++i;
        }
        return n2;
    }
    
    public final int b() {
        if (this.aY) {
            return this.a() + this.I + this.Code;
        }
        return Code.a;
    }
    
    public final int c() {
        if (this.aY) {
            return this.Code.getBaselinePosition();
        }
        return Code.a;
    }
    
    private void ah() {
        switch (this.bo) {
            case 1: {
                this.Q(2);
            }
            case 2:
            case 3: {
                this.Q(4);
            }
            case 4: {
                if (this.bh == this.bn) {
                    this.Q(3);
                    return;
                }
                this.Q(1);
                break;
            }
        }
    }
    
    private Code(final boolean b, Code f) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aK = true;
        this.F = f;
        if (Code.r == null) {
            f = null;
            final int n = 0;
            try {
                if (Code.aJ = (((DataInputStream)(f = (Code)Code(n))).readByte() > 0)) {
                    Code.cf = 299;
                    Code.cg = 14;
                }
                else {
                    Code.cf = 225;
                    Code.cg = 10;
                }
                final byte[] r = new byte[Code.cf];
                final byte[] s = new byte[Code.cf];
                byte b2 = 0;
                Code.b = ((DataInputStream)f).readByte();
                Code.cg = ((DataInputStream)f).readByte();
                for (int i = 0; i < Code.cf; ++i) {
                    r[i] = (b2 += ((DataInputStream)f).readByte());
                }
                Code.c = ((DataInputStream)f).readByte();
                Code.cg = ((DataInputStream)f).readByte();
                for (int j = 0; j < Code.cf; ++j) {
                    s[j] = (byte)(r[j] + ((DataInputStream)f).readByte());
                }
                Code.r = r;
                Code.s = s;
            }
            finally {
                final Code code = f;
                try {
                    ((InputStream)code).close();
                }
                finally {}
            }
        }
        f = null;
        if (b) {
            final int n2 = 2;
            final boolean b3 = false;
            try {
                f = (Code)Code(n2, b3);
            }
            finally {}
            this.f = Code.s;
            Code.a = Code.c;
            this.br = 4;
        }
        else {
            final int n3 = 3;
            final boolean b4 = false;
            try {
                f = (Code)Code(n3, b4);
            }
            finally {}
            this.f = Code.r;
            Code.a = Code.b;
            this.br = 7;
        }
        if (f == null) {
            return;
        }
        this.bm = ((B)f).Code.getWidth();
        this.a = ((B)f).Code.getHeight();
        this.Z = new Code[this.br];
        for (int k = 0; k < this.br; ++k) {
            this.Z[k] = new Code(false, false);
        }
        this.bp = 0;
        final int[] array = new int[this.bm * this.a];
        ((B)f).Code(array, this.bm, 0, 0, this.bm, this.a);
        this.g = new byte[this.bm * this.a];
        this.h = new int[8];
        for (int length = array.length, l = 0; l < length; ++l) {
            this.g[l] = (byte)(7 - ((array[l] & 0xFF) >> 5));
            this.h[this.g[l]] = 255 - (array[l] & 0xFF);
        }
        this.h[0] = 0;
        if (!Code.V) {
            for (int n4 = 0; n4 < this.h.length; ++n4) {
                this.h[n4] = ((n4 < 3) ? 0 : 255);
            }
        }
        this.h = new byte[Code.cf];
        this.Code = new byte[Code.cf];
        byte b5 = 0;
        byte b6 = 0;
        for (int n5 = 0; n5 < Code.cf; ++n5) {
            if (b5 + this.f[n5] >= this.bm) {
                b5 = 0;
                ++b6;
            }
            this.h[n5] = b5;
            this.Code[n5] = b6;
            b5 += this.f[n5];
        }
        final byte[] f2 = this.f;
        final int n6 = 0;
        f2[n6] = f2[n6];
    }
    
    private boolean s() {
        return this.Code.canWrite();
    }
    
    public final char[] Code() {
        if (this.Code == null) {
            this.Code = this.I().toCharArray();
        }
        return this.Code;
    }
    
    public final String Code() {
        if (!this.Z()) {
            return null;
        }
        int n;
        if ((n = this.b.indexOf(59)) < 0) {
            n = this.b.indexOf(10);
        }
        if (n >= 0) {
            final String substring = this.b.substring(0, n);
            this.b = this.b.substring(n + 1);
            return substring;
        }
        final String b = this.b;
        this.b = null;
        return b;
    }
    
    private static synchronized void ap() {
        if (Code.I == null) {
            DataInputStream code = null;
            final int n = 1;
            try {
                code = Code(n);
                Code.I = new short[768];
                Code.Z = new short[256];
                Code.J = new short[256];
                Code.r = new int[64];
                Code.s = new int[64];
                short n2 = 0;
                for (int i = 0; i < 768; ++i) {
                    n2 = (Code.I[i] = (short)(n2 + code.readShort()));
                }
                short n3 = 0;
                for (int j = 0; j < 256; ++j) {
                    n3 = (Code.Z[j] = (short)(n3 + code.readShort()));
                }
                short n4 = 0;
                for (int k = 0; k < 256; ++k) {
                    n4 = (Code.J[k] = (short)(n4 + code.readShort()));
                }
                int n5 = 0;
                for (int l = 0; l < 64; ++l) {
                    n5 = (Code.r[l] = (short)(n5 + code.readShort()));
                }
                int n6 = 0;
                for (int n7 = 0; n7 < 64; ++n7) {
                    n6 = (Code.s[n7] = (short)(n6 + code.readShort()));
                }
            }
            finally {
                code.close();
            }
        }
    }
    
    private Code d() {
        final Code j;
        if ((j = this.J()) != null && ((j.Z(this) && j.a(this)) || j.C(this))) {
            return j;
        }
        final Code c;
        if ((c = this.C()) != null && ((c.Z(this) && c.a(this)) || c.C(this))) {
            return c;
        }
        return null;
    }
    
    private long Z() {
        return this.Code.fileSize();
    }
    
    private Code(final String s, final boolean b) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aX = true;
        this.Code = (SocketConnection)Connector.open(s, 3, b);
        if (Code.Y) {
            this.Code.setSocketOption((byte)1, 0);
        }
    }
    
    private static int I(final int n, final int n2, final int n3, final int n4) {
        int n5 = n3;
        if (n == n2 - 1) {
            n5 = n3 - n4;
        }
        return Math.max(0, n5);
    }
    
    private static String B(final int n) {
        if (n == 1) {
            return "b1";
        }
        if (n == 2) {
            return "sp";
        }
        return null;
    }
    
    private static boolean C(final int n) {
        return n > 0 && n <= 1114111 && (n < 55296 || n > 57343) && (n < 64976 || n > 65007) && (n & 0xFFFE) != 0xFFFE;
    }
    
    private static char[] Code(final byte[] array, int i, final int n) {
        int j = i;
        int n2 = 0;
        while (j < n) {
            final int y = y((int)array[j]);
            j += y;
            if (y == 4) {
                ++n2;
            }
            ++n2;
        }
        final char[] array2 = new char[n2];
        int n3 = 0;
        while (i < n) {
            final int c;
            if ((c = C(array, i)) <= 65535) {
                array2[n3++] = (char)c;
            }
            else {
                array2[n3++] = (char)(0xD800 | c - 65536 >> 10);
                array2[n3++] = (char)(0xDC00 | (c & 0x3FF));
            }
            i += y((int)array[i]);
        }
        return array2;
    }
    
    private static int C(final byte[] array, final int n) {
        switch (y((int)array[n])) {
            case 1: {
                return array[n];
            }
            case 2: {
                return (array[n] & 0x1F) << 6 | (array[n + 1] & 0x3F);
            }
            case 3: {
                return (array[n] & 0xF) << 12 | (array[n + 1] & 0x3F) << 6 | (array[n + 2] & 0x3F);
            }
            default: {
                return (array[n] & 0x7) << 18 | (array[n + 1] & 0x3F) << 12 | (array[n + 2] & 0x3F) << 6 | (array[n + 3] & 0x3F);
            }
        }
    }
    
    private static boolean I(final byte[] array, int i, int n) {
        n += i;
        while (i < n) {
            switch ((array[i] & 0xFF) >> 4) {
                case 8:
                case 9:
                case 10:
                case 11: {
                    return false;
                }
                case 12:
                case 13: {
                    if (i + 2 > n || (array[i + 1] & 0xC0) != 0x80) {
                        return false;
                    }
                    if ((array[i++] & 0x1F) < 2) {
                        return false;
                    }
                    ++i;
                    continue;
                }
                case 14: {
                    if (i + 3 > n || (array[i + 1] & 0xC0) != 0x80 || (array[i + 2] & 0xC0) != 0x80) {
                        return false;
                    }
                    final int n2;
                    if ((n2 = ((array[i++] & 0xF) << 12 | (array[i++] & 0x3F) << 6 | (array[i++] & 0x3F))) < 2048) {
                        return false;
                    }
                    if (!C(n2)) {
                        return false;
                    }
                    continue;
                }
                case 15: {
                    if (i + 4 > n || (array[i + 1] & 0xC0) != 0x80 || (array[i + 2] & 0xC0) != 0x80 || (array[i + 3] & 0xC0) != 0x80) {
                        return false;
                    }
                    if ((array[i] & 0x8) != 0x0) {
                        return false;
                    }
                    final int n3;
                    if ((n3 = ((array[i++] & 0x7) << 18 | (array[i++] & 0x3F) << 12 | (array[i++] & 0x3F) << 6 | (array[i++] & 0x3F))) < 65536) {
                        return false;
                    }
                    if (!C(n3)) {
                        return false;
                    }
                    continue;
                }
                default: {
                    if (array[i++] == 0) {
                        return false;
                    }
                    continue;
                }
            }
        }
        return true;
    }
    
    private static int c(final String s) {
        int n = 0;
        for (int i = 0; i < s.length(); ++i) {
            final char char1;
            if ((char1 = s.charAt(i)) >= '\ud800' && char1 <= '\udbff') {
                n += 4;
                ++i;
            }
            else {
                n += x((int)char1);
            }
        }
        return n;
    }
    
    private int Code(final Code code, final char c, final int n, final int n2) {
        final char code2;
        if ((code2 = Code(c)) != '\0') {
            final byte b = this.Code[code2];
            if (this.G.I[b] == null) {
                final int n3 = Code.a * this.bm;
                final int n4 = b * n3;
                for (byte b2 = 0; b2 < n3; ++b2) {
                    Code.o[b2] = this.G.x[this.g[b2 + n4]];
                }
                this.G.I[b] = this.F.Code(Code.o, this.bm, Code.a, true, false);
            }
            code.Code(this.G.I[b], this.h[code2], 0, this.f[code2], Code.a, n, n2);
        }
        return this.f[code2];
    }
    
    private static int y(final int n) {
        switch ((n & 0xFF) >> 4) {
            case 12:
            case 13: {
                return 2;
            }
            case 14: {
                return 3;
            }
            case 15: {
                return 4;
            }
            default: {
                return 1;
            }
        }
    }
    
    private static int x(final int n) {
        if (n <= 127) {
            return 1;
        }
        if (n <= 2047) {
            return 2;
        }
        if (n <= 65535) {
            return 3;
        }
        return 4;
    }
    
    private void C(int bn, final int co, final int b, final int cp) {
        if (this.I(bn, co, b, cp)) {
            if (this.b > 0) {
                final int n = this.bn + this.b;
                this.bn = Math.min(this.bn, bn);
                this.b = Math.max(bn + b, n) - this.bn;
                bn = this.co + this.cp;
                this.co = Math.min(this.co, co);
                this.cp = Math.max(co + cp, bn) - this.co;
                return;
            }
            this.bn = bn;
            this.co = co;
            this.b = b;
            this.cp = cp;
        }
    }
    
    private void Q(final int n) {
        final int bp = this.bp;
        final Code code = Code.Code;
        try {
            code.I();
            I(bp);
            I(n);
            Code.Code.v(28);
            V();
        }
        finally {}
    }
    
    private static int Code(final int n, final byte[] array, int n2) {
        if (n <= 127) {
            array[n2] = (byte)n;
            return 1;
        }
        if (n <= 2047) {
            array[n2++] = (byte)(0xC0 | n >> 6);
            array[n2] = (byte)(0x80 | (n & 0x3F));
            return 2;
        }
        if (n <= 65535) {
            array[n2++] = (byte)(0xE0 | n >> 12);
            array[n2++] = (byte)(0x80 | (n >> 6 & 0x3F));
            array[n2] = (byte)(0x80 | (n & 0x3F));
            return 3;
        }
        array[n2++] = (byte)(0xF0 | n >> 18);
        array[n2++] = (byte)(0x80 | (n >> 12 & 0x3F));
        array[n2++] = (byte)(0x80 | (n >> 6 & 0x3F));
        array[n2] = (byte)(0x80 | (n & 0x3F));
        return 4;
    }
    
    private static void Code(final char[] array, final int n, final int n2, final int n3, final J n4, final Code code) {
        int i = 0;
        final int length = array.length;
        int n5 = 0;
        int n6 = 0;
        int n7 = 0;
        int n8 = 0;
        while (i < length) {
            final char c = array[i];
            char c2 = '\0';
            if (i + 1 < length) {
                c2 = array[i + 1];
            }
            final char c3 = c;
            final char c4 = c2;
            final char c5 = c3;
            if (((I(c3) & 0x8) == 0x0 && (I(c4) & 0x4) == 0x0 && (I(c5) != 0 || I(c4) != 0)) || c(c) || i == length - 1) {
                int n9 = 0;
                int n10 = c(c) ? c : '\0';
                if (c == '\r' && c2 == '\n') {
                    ++i;
                    n9 = 2;
                    n10 = -1;
                }
                else if (c == ' ' || c(c)) {
                    n9 = 1;
                }
                int n11 = i - n5 + 1;
                final int n12 = i - n7 + 1;
                final int code3;
                int code2 = code3 = n4.Code(array, n7, n12);
                if (n9 != 0) {
                    code2 = n4.Code(array, n7, n12 - n9);
                }
                if (n6 + code2 > I(n8, n2, n, n3)) {
                    if (n5 != n7) {
                        n11 = n7 - n5;
                    }
                    else if (n12 - n9 != 1 && (!a(c) || n12 - n9 != 2)) {
                        final int n13 = I(n8, n2, n, n3) - n6;
                        int n14;
                        int j;
                        for (n14 = n7 + ((Code(array, n7) ? 1 : 0) + 1), j = i - n9; j > n14; --j) {
                            if (Code(array, j - 1)) {
                                --j;
                            }
                            if (n4.Code(array, n7, j - n7) <= n13 || j <= n14) {
                                break;
                            }
                        }
                        n11 = Math.max(j, n14) - n5;
                    }
                    if (Code(code, array, n5, n11, n8, n2, n3, 0)) {
                        break;
                    }
                    ++n8;
                    n7 = (i = (n5 += n11));
                    n6 = 0;
                }
                else if (c(c) || i == length - 1) {
                    final boolean b = c(c) && n5 + n11 == length;
                    if (Code(code, array, n5, n11 - ((n3 == 0 && code == null) ? 0 : n9), n8, n2, (i == length - 1 && !b) ? 0 : n3, n10)) {
                        break;
                    }
                    ++n8;
                    n7 = (i = (n5 += n11));
                    n6 = 0;
                    if (b) {
                        Code(code, array, 0, 0, n8, n2, 0, 0);
                        return;
                    }
                    continue;
                }
                else {
                    n6 += code3;
                    n7 += n12;
                    ++i;
                }
            }
            else {
                ++i;
            }
        }
    }
    
    private static int Code(char[] array, int n, final int n2, final int n3) {
        int n4 = 0;
        for (int i = 0; i < n; ++i) {
            if (array[i] == '\n') {
                n4 = 0;
            }
            else if (n4 == 0 || array[i] == ' ') {
                int n5;
                for (n5 = 1; i + n5 < n && array[i + n5] != ' ' && array[i + n5] != '\n'; ++n5) {}
                final int code = Code(n2, array, i, n5);
                if ((n4 += code) > n3) {
                    if (code <= n3) {
                        array[i] = '\n';
                        n4 = code;
                    }
                    else {
                        if (array[i] == ' ') {
                            array[i] = '\n';
                        }
                        final char[] array2 = array;
                        final int n6 = i;
                        final int n7 = n5;
                        final int n8 = n6;
                        final char[] array3 = array2;
                        int n10;
                        int n9;
                        if (n3 <= 0) {
                            n9 = (n10 = 0);
                        }
                        else {
                            int n11 = n8;
                            if (n7 > 0) {
                                int j = n8;
                                int n12 = n11 + n7;
                                if (Code(n2, array3, n8, n7) <= n3) {
                                    n11 = n12;
                                }
                                else {
                                    if (b(array3[--n12])) {
                                        --n12;
                                    }
                                    int code2 = 0;
                                    while (j < n12) {
                                        n11 = (j + n12) / 2;
                                        if (b(array3[n11])) {
                                            --n11;
                                        }
                                        if ((code2 = Code(n2, array3, n8, n11 - n8)) < n3) {
                                            final int n13 = n11;
                                            if (a(array3[n11])) {
                                                j = n13 + 2;
                                            }
                                            else {
                                                j = n13 + 1;
                                            }
                                        }
                                        else {
                                            if (code2 == n3) {
                                                break;
                                            }
                                            n12 = n11;
                                        }
                                    }
                                    if (code2 > n3 && b(array3[--n11])) {
                                        --n11;
                                    }
                                }
                            }
                            n9 = (n10 = n11 - n8);
                        }
                        final int n14 = n10;
                        if (n9 != 0) {
                            if (n == array.length) {
                                final char[] array4 = new char[array.length + 10];
                                System.arraycopy(array, 0, array4, 0, n);
                                array = array4;
                            }
                            i += n14;
                            System.arraycopy(array, i, array, i + 1, n - i);
                            array[i] = '\n';
                            ++n;
                            n4 = 0;
                            continue;
                        }
                        n4 = 0;
                    }
                }
                i += n5 - 1;
            }
        }
        return n;
    }
    
    private void Code(final Code code, final int n, final int n2, int j, final int n3, final int[] array, final int n4, final int n5) {
        if (j >= array[n4 - 2]) {
            return;
        }
        if ((j = this.J(array, n4, n5, j)) == n5) {
            return;
        }
        int i = 0;
    Label_0185:
        for (i = j; i != n5; ++i) {
            this.w[i * 5 + 3] = this.w[i * 5 + 2];
            if ((array[n4 + i] & Integer.MIN_VALUE) == 0x0) {
                this.Code(code, n, n2, j, i - 1, array, n4);
                while (++j != n5) {
                    if ((array[n4 + j] & Integer.MIN_VALUE) != 0x0) {
                        i = j - 1;
                        continue Label_0185;
                    }
                }
                return;
            }
            if ((array[n4 + i] & 0xFFFFFF) > n3) {
                this.Code(code, n, n2, j, i - 1, array, n4);
                return;
            }
        }
        this.Code(code, n, n2, j, i - 1, array, n4);
    }
    
    private synchronized boolean C(final int n, int n2) {
        if (!this.y()) {
            return false;
        }
        n2 = H(n2);
        final int[] code = Code.Code;
        final int n3 = Code.Code + 2;
        int n4 = this.I(code, n3, n2, this.co);
        n2 = this.I(code, n3, n2, this.co + this.cp);
        if (n4 == n2) {
            this.b = 0;
            return false;
        }
        if (n4 < 0) {
            n4 = Math.max(n2 - this.cp, 0);
        }
        else if (n2 < 0) {
            n2 = Math.min(n4 + this.cp, code[n3 - 2]);
        }
        J(n, 0);
        Code.Code[Code.Code] = this.bn;
        Code.Code[Code.Code + 1] = n4;
        Code.Code[Code.Code + 2] = this.b;
        Code.Code[Code.Code + 3] = n2 - n4;
        this.b = 0;
        return true;
    }
    
    private static int B(final byte[] array, final int n) {
        return ((array[n] & 0xFF) << 8) + (array[n + 1] & 0xFF);
    }
    
    public static int I(final byte[] array, final int n) {
        return ((array[n] & 0xFF) << 16) + ((array[n + 1] & 0xFF) << 8) + (array[n + 2] & 0xFF);
    }
    
    public static int Code(final byte[] array, final int n) {
        return (array[n] << 24) + ((array[n + 1] & 0xFF) << 16) + ((array[n + 2] & 0xFF) << 8) + (array[n + 3] & 0xFF);
    }
    
    private static int H(final int n) {
        final int l = l(n);
        J(n, 0);
        return l - 2;
    }
    
    private synchronized void S(int h) {
        int n = 0;
        h = H(h);
        final int[] code = Code.Code;
        final int n2 = Code.Code + 2;
        code[n2 - 1] = 0;
        for (int i = 0; i < h; ++i) {
            code[n2 + i] = ((code[n2 + i] & 0xFF000000) | n);
            if ((code[n2 + i] & Integer.MIN_VALUE) != 0x0) {
                n += this.w[i * 5 + 1];
                if ((code[n2 + i] & 0x40000000) == 0x0) {
                    final int[] array = code;
                    final int n3 = n2 - 1;
                    array[n3] += this.w[i * 5 + 1];
                }
            }
        }
        code[n2 - 2] = n;
    }
    
    private static boolean a(final int n) {
        return n < 0 && (n & 0xFFFF) == 0x0;
    }
    
    private int Code(final DataInputStream dataInputStream) {
        final byte[] array = new byte[4];
        for (int n = 4; dataInputStream != null && !this.aM && n > 0; n -= dataInputStream.read(array, 4 - n, n)) {}
        return Code(array, 0);
    }
    
    private int a(final int n, final int n2, final int n3) {
        this.w[n] = n2;
        this.w[n + 1] = n3;
        this.w[n + 2] = this.cB;
        this.w[n + 3] = this.cC;
        return n;
    }
    
    private static void Z(final int n, final byte[] array, final int n2) {
        array[n2] = (byte)(n >> 24);
        array[n2 + 1] = (byte)(n >> 16);
        array[n2 + 2] = (byte)(n >> 8);
        array[n2 + 3] = (byte)n;
    }
    
    private static void J(final int n, final byte[] array, final int n2) {
        array[n2] = (byte)(n >> 16);
        array[n2 + 1] = (byte)(n >> 8);
        array[n2 + 2] = (byte)n;
    }
    
    private OutputStream Code(final long n) {
        return this.Code.openOutputStream(n);
    }
    
    public Code(final Graphics code) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aP = true;
        this.Code = code;
    }
    
    private void Code(final Code code, final char[] array, int i, int n, int n2, final int n3, final int n4) {
        n += i;
        this.P(n4);
        while (i < n) {
            n2 += this.Code(code, array[i], n2, n3);
            ++i;
        }
    }
    
    public final void Code(final Graphics code) {
        this.Code = code;
    }
    
    private void Code(final B b, final int n, final int n2) {
        if (Code(n, n2, b.Code.getWidth(), b.Code.getHeight(), this.Code.getClipX(), this.Code.getClipY(), this.Code.getClipWidth(), this.Code.getClipHeight())) {
            this.Code.drawImage(b.Code, n, n2, 20);
        }
    }
    
    private void Code(final Image image, int n, int i, int min, int min2, int j, final int n2) {
        final int width = image.getWidth();
        final int height = image.getHeight();
        if (j == 0 && n2 == 0 && min == width && min2 == height) {
            this.Code.drawImage(image, n, i, 20);
            return;
        }
        final int clipX = this.Code.getClipX();
        final int clipY = this.Code.getClipY();
        final int clipWidth = this.Code.getClipWidth();
        final int clipHeight = this.Code.getClipHeight();
        final int max = Math.max(clipX, n);
        final int max2 = Math.max(clipY, i);
        final int n3 = Math.min(clipX + clipWidth, n + min) - max;
        final int n4 = Math.min(clipY + clipHeight, i + min2) - max2;
        this.J(max, max2, n3, n4);
        n -= j;
        i -= n2;
        min += j;
        min2 += n2;
        min = Math.min(n + min, max + n3);
        min2 = Math.min(i + min2, max2 + n4);
        n = max - (max - n) % width;
        for (i = max2 - (max2 - i) % height; i < min2; i += height) {
            for (j = n; j < min; j += width) {
                this.Code.drawImage(image, j, i, 20);
            }
        }
        this.J(clipX, clipY, clipWidth, clipHeight);
    }
    
    private void P(final int cu) {
        if (this.G != null && this.G.I != null && this.G.cu == cu) {
            return;
        }
        for (int i = 0; i < this.br; ++i) {
            if (cu == this.Z[i].cu && this.Z[i].I != null) {
                this.G = this.Z[i];
                return;
            }
        }
        this.bp = (this.bp + 1) % this.br;
        this.G = this.Z[this.bp];
        this.G.I = new B[Code.cg];
        if (Code.o == null || Code.o.length < this.bm * Code.a) {
            Code.o = new int[this.bm * Code.a];
        }
        this.G.cu = cu;
        this.G.x = new int[8];
        for (int j = 0; j < 8; ++j) {
            this.G.x[j] = (this.h[j] << 24 | (cu & 0xFFFFFF));
        }
    }
    
    public Code(final FileConnection code) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aO = true;
        this.Code = code;
    }
    
    private Code(final Code h, final boolean b) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aM = true;
        this.H = h;
    }
    
    private Code(final int bp, final String c) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aN = true;
        this.bn = -1;
        this.L = true;
        this.Code = new Thread[2];
        Code.b.put(new Integer(bp), this);
        this.bp = bp;
        this.c = c;
    }
    
    private static Code J(final int n) {
        return Code.b.get(new Integer(n));
    }
    
    private void Code(String code, final String b, final boolean b2, final int bl) {
        this.d = code;
        this.b = b;
        this.L = (b2 ^ true);
        this.bl = bl;
        this.w = false;
        this.bm = 0;
        monitorenter(code = (String)(Object)this.Code);
        final Thread[] code2 = this.Code;
        final int n = 0;
        try {
            if (code2[n] == null) {
                (this.Code[0] = new Thread(this)).start();
            }
            else if (this.Code[1] == null) {
                (this.Code[1] = new Thread(this)).start();
            }
        }
        finally {
            monitorexit(code);
        }
    }
    
    private void ae() {
        final Thread[] code;
        monitorenter(code = this.Code);
        final Thread[] code2 = this.Code;
        final int n = 0;
        final Thread[] code3 = this.Code;
        final int n2 = 1;
        try {
            code2[n] = code3[n2];
            this.Code[1] = null;
        }
        finally {
            monitorexit(code);
        }
    }
    
    private void ag() {
        Code((Runnable)new Code(this, 0));
    }
    
    private void I(final B b, final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        this.Code(b.Code, n, n2, n3, n4, n5, n6);
    }
    
    private void aj() {
        this.w = true;
        this.aM = true;
        this.ak();
    }
    
    private synchronized void d(final Code code) {
        this.J[0] = code;
        for (int i = 1; i < this.bp; ++i) {
            this.J[i] = null;
        }
        this.bp = 1;
        this.w = true;
        this.aE = true;
        if (this.bo == 0) {
            this.notify();
        }
    }
    
    public final String I() {
        if (this.c == null) {
            int n = this.cp + 17;
            for (int i = this.C.F(n++); i > 0; --i) {
                if (this.C.F(n++) == 114) {
                    this.aE = true;
                    n += 2;
                }
                else {
                    n += this.C.E(n) + 2;
                }
            }
            this.c = this.C.a(n);
        }
        return this.c;
    }
    
    private synchronized void ao() {
        --this.bo;
        if (this.bo == 0 && this.aE) {
            this.notify();
        }
    }
    
    private static int d(final int n, final int n2) {
        if (n2 < 1 << n - 1) {
            return n2 + (-1 << n) + 1;
        }
        return n2;
    }
    
    private void J(final int n, final int n2, final int n3, final int n4, final int color) {
        if (n3 > 0 && n4 > 0 && Code(n, n2, n3, n4, this.Code.getClipX(), this.Code.getClipY(), this.Code.getClipWidth(), this.Code.getClipHeight())) {
            this.Code.setColor(color);
            if (Code.aw) {
                this.Code.fillRect(n, n2, n3 / 2, n4);
                this.Code.fillRect(n + n3 / 2, n2, n3 - n3 / 2, n4);
                return;
            }
            this.Code.fillRect(n, n2, n3, n4);
        }
    }
    
    private synchronized void b(final Code code) {
        int i = 0;
        while (i < this.bp) {
            if (this.J[i] == code) {
                final Code[] j = this.J;
                final int n = i;
                final Code[] k = this.J;
                final int bp = this.bp - 1;
                this.bp = bp;
                j[n] = k[bp];
                this.J[this.bp] = null;
                if (i == 0) {
                    this.w = false;
                    return;
                }
                break;
            }
            else {
                ++i;
            }
        }
    }
    
    private void al() {
        this.aE = false;
        Code.I.Code(this.c);
    }
    
    private void B(final int n, final int n2, final int n3, final int n4) {
        final int clipX = this.Code.getClipX();
        final int clipY = this.Code.getClipY();
        final int clipWidth = this.Code.getClipWidth();
        final int clipHeight = this.Code.getClipHeight();
        if (Code(n, n2, n3, n4, clipX, clipY, clipWidth, clipHeight)) {
            this.Code.setClip(Math.max(n, clipX), Math.max(n2, clipY), (n < clipX) ? ((n + n3 > clipX + clipWidth) ? clipWidth : (n + n3 - clipX)) : ((clipX + clipWidth > n + n3) ? n3 : (clipX + clipWidth - n)), (n2 < clipY) ? ((n2 + n4 > clipY + clipHeight) ? clipHeight : (n2 + n4 - clipY)) : ((clipY + clipHeight > n2 + n4) ? n4 : (clipY + clipHeight - n2)));
            return;
        }
        this.Code.setClip(0, 0, 0, 0);
    }
    
    private static boolean I(final int n, final int n2, final int n3, final int n4, final int n5, final int n6, final int n7, final int n8) {
        if (!Code(n2, n4, n6, n8)) {
            return true;
        }
        if (n < n5) {
            return n + n3 != n5;
        }
        return n != n5 + n7;
    }
    
    private InputStream Code() {
        return this.Code.openInputStream();
    }
    
    private void Code(final B b, final int n, final int n2, final int n3, final int n4, final int n5, final int n6) {
        if (n3 > 0 && n4 > 0 && Code(n5, n6, n3, n4, this.Code.getClipX(), this.Code.getClipY(), this.Code.getClipWidth(), this.Code.getClipHeight())) {
            this.Code.drawRegion(b.Code, n, n2, n3, n4, 0, n5, n6, 20);
        }
    }
    
    private synchronized void c(final Code code) {
        if (!this.w) {
            int n;
            for (n = 0; n < this.bp && this.J[n] != code; ++n) {}
            if (n == this.bp) {
                if (this.bp == this.J.length) {
                    this.J[this.bp - 1] = code;
                }
                else {
                    this.J[this.bp++] = code;
                }
            }
        }
        this.aE = true;
        if (this.bo == 0) {
            this.notify();
        }
    }
    
    private synchronized void am() {
        while (this.bo > 0 || (this.bp == 0 && this.C == null)) {
            this.wait();
        }
        this.aE = false;
        if (this.bp > 0 && (this.w || this.C == null)) {
            this.C = this.J[0];
            final Code[] j = this.J;
            final int n = 0;
            final Code[] i = this.J;
            final int bp = this.bp - 1;
            this.bp = bp;
            j[n] = i[bp];
            this.J[this.bp] = null;
            this.w = false;
        }
    }
    
    private synchronized void an() {
        ++this.bo;
    }
    
    private void I(final B b, final int n, final int n2, final int n3, final int n4, int n5, int i, int min, int min2) {
        final Image code = b.Code;
        if (min == n3 && min2 == n4) {
            this.Code.drawRegion(code, n, n2, n3, n4, 0, n5, i, 20);
            return;
        }
        final int clipX = this.Code.getClipX();
        final int clipY = this.Code.getClipY();
        final int clipWidth = this.Code.getClipWidth();
        final int clipHeight = this.Code.getClipHeight();
        final int max = Math.max(clipX, n5);
        final int max2 = Math.max(clipY, i);
        final int n6 = Math.min(clipX + clipWidth, n5 + min) - max;
        final int n7 = Math.min(clipY + clipHeight, i + min2) - max2;
        this.J(max, max2, n6, n7);
        min = Math.min(n5 + min, max + n6);
        min2 = Math.min(i + min2, max2 + n7);
        n5 = max - (max - n5) % n3;
        int j;
        for (i = max2 - (max2 - i) % n4; i < min2; i += n4) {
            for (j = n5; j < min; j += n3) {
                this.Code.drawRegion(code, n, n2, n3, n4, 0, j, i, 20);
            }
        }
        this.J(clipX, clipY, clipWidth, clipHeight);
    }
    
    private void Code(final int[] array, int n, final int n2, final int n3, final int n4, int n5, int n6) {
        final int clipX = this.Code.getClipX();
        final int clipY = this.Code.getClipY();
        final int clipWidth = this.Code.getClipWidth();
        final int clipHeight = this.Code.getClipHeight();
        final int max = Math.max(clipX, n3);
        final int max2 = Math.max(clipY, n4);
        n5 = Math.min(clipX + clipWidth, n3 + n5) - max;
        n6 = Math.min(clipY + clipHeight, n4 + n6) - max2;
        if (n5 > 0 && n6 > 0) {
            n += max - n3 + (max2 - n4) * n2;
            this.Code.drawRGB(array, n, n2, max, max2, n5, n6, true);
        }
    }
    
    private void Z(final int n, final int n2, final int n3, final int n4, final int color) {
        this.Code.setColor(color);
        this.Code.drawLine(n, n2, n3, n4);
    }
    
    private void B(final int n, final int n2, final int n3, final int n4, int i) {
        final int n5;
        if ((n5 = i >>> 24) == 0) {
            return;
        }
        if (n5 >= 254) {
            this.J(n, n2, n3, n4, i);
            return;
        }
        if (!Code.V) {
            return;
        }
        if (n3 > 0 && n4 > 0 && Code(n, n2, n3, n4, this.Code.getClipX(), this.Code.getClipY(), this.Code.getClipWidth(), this.Code.getClipHeight())) {
            if (Code.ci != i) {
                Code.ci = i;
                for (int j = 0; j < Code.p.length; ++j) {
                    Code.p[j] = i;
                }
                if (Code.av) {
                    if (Code.q == null) {
                        Code.q = new int[256];
                        for (i = 0; i < Code.q.length; ++i) {
                            Code.q[i] = -1;
                        }
                    }
                    Code.Z.Code(Code.q, 16, 16, false, false);
                }
                if (!Code.ar) {
                    Code.Code = Image.createRGBImage(Code.p, 16, 16, true);
                }
            }
            if (Code.ar) {
                i = this.Code.getClipX();
                final int clipY = this.Code.getClipY();
                final int clipWidth = this.Code.getClipWidth();
                final int clipHeight = this.Code.getClipHeight();
                this.B(n, n2, n3, n4);
                for (int k = n2; k < n2 + n4; k += 16) {
                    for (int l = n; l < n + n3; l += 16) {
                        this.Code(Code.p, 0, 16, l, k, 16, 16);
                    }
                }
                this.J(i, clipY, clipWidth, clipHeight);
                return;
            }
            this.Code(Code.Code, n, n2, n3, n4, 0, 0);
        }
    }
    
    private void d(final byte[] array, final int n, final int n2) {
        for (int i = 0; i < n2; ++i) {
            this.cp = (this.cp + 1 & 0xFF);
            this.cj = (this.f[this.cp] + this.cj & 0xFF);
            final byte b = this.f[this.cp];
            this.f[this.cp] = this.f[this.cj];
            this.f[this.cj] = b;
            array[n + i] ^= this.f[this.f[this.cp] + this.f[this.cj] & 0xFF];
        }
    }
    
    private Code(final byte[] array) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aT = true;
        this.f = new byte[256];
        for (int i = 0; i < 256; ++i) {
            this.f[i] = (byte)i;
        }
        int n = 0;
        int n2 = 0;
        for (int j = 0; j < 256; ++j) {
            n2 = (array[n] + this.f[j] + n2 & 0xFF);
            final byte b = this.f[j];
            this.f[j] = this.f[n2];
            this.f[n2] = b;
            n = (n + 1) % 32;
        }
    }
    
    public static boolean Code(final int n, final int n2, final int n3, final int n4) {
        return n < n3 + n4 && n + n2 > n3;
    }
    
    private void Code(final String s, int n, int n2, final J n3, final int color) {
        boolean b;
        boolean b3;
        boolean b2;
        if ((b = (n3 instanceof Code)) && (b = ((Code)n3).bi) && (b2 = (b3 = (b = ((Code)n3).bh)))) {
            if (((Code)n3).bg) {
                b3 = (b2 = (b = false));
            }
            if (b2) {
                if (((Code)n3).bf) {
                    b = (b3 = false);
                }
                if (b3) {
                    boolean b8;
                    boolean b7;
                    boolean b6;
                    boolean b5;
                    final boolean b4 = b5 = (b6 = (b7 = (b8 = (b = ((Code)n3).be))));
                    boolean b9;
                    if ((b9 = b4) && b4) {
                        if (((Code)n3).bd) {
                            b5 = (b9 = (b6 = (b7 = (b8 = (b = false)))));
                        }
                        if (b9 && b5) {
                            if (((Code)n3).bc) {
                                b7 = (b6 = (b8 = (b = false)));
                            }
                            if (b6) {
                                if (((Code)n3).bb) {
                                    b8 = (b7 = (b = false));
                                }
                                if (b7) {
                                    if (((Code)n3).ba) {
                                        b = (b8 = false);
                                    }
                                    boolean b24;
                                    boolean b23;
                                    boolean b22;
                                    boolean b21;
                                    boolean b20;
                                    boolean b19;
                                    boolean b18;
                                    boolean b17;
                                    boolean b16;
                                    boolean b15;
                                    boolean b14;
                                    boolean b13;
                                    boolean b12;
                                    boolean b11;
                                    boolean b10;
                                    if (b8 && (b10 = (b11 = (b12 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = ((Code)n3).aZ))))))))))))))))) {
                                        if (((Code)n3).aY) {
                                            b11 = (b10 = (b12 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))))))))));
                                        }
                                        if (b10) {
                                            if (((Code)n3).aX) {
                                                b12 = (b11 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))))))));
                                            }
                                            if (b11 && b12) {
                                                if (((Code)n3).aW) {
                                                    b14 = (b13 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))))));
                                                }
                                                if (b13) {
                                                    if (((Code)n3).aV) {
                                                        b15 = (b14 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))))));
                                                    }
                                                    if (b14) {
                                                        if (((Code)n3).aU) {
                                                            b16 = (b15 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))));
                                                        }
                                                        if (b15) {
                                                            if (((Code)n3).aT) {
                                                                b17 = (b16 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))));
                                                            }
                                                            if (b16) {
                                                                if (((Code)n3).aS) {
                                                                    b18 = (b17 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))));
                                                                }
                                                                if (b17) {
                                                                    if (((Code)n3).aR) {
                                                                        b19 = (b18 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))));
                                                                    }
                                                                    if (b18) {
                                                                        if (((Code)n3).aQ) {
                                                                            b20 = (b19 = (b21 = (b22 = (b23 = (b24 = (b = false))))));
                                                                        }
                                                                        if (b19) {
                                                                            if (((Code)n3).aP) {
                                                                                b21 = (b20 = (b22 = (b23 = (b24 = (b = false)))));
                                                                            }
                                                                            if (b20) {
                                                                                if (((Code)n3).aO) {
                                                                                    b22 = (b21 = (b23 = (b24 = (b = false))));
                                                                                }
                                                                                if (b21) {
                                                                                    if (((Code)n3).aN) {
                                                                                        b23 = (b22 = (b24 = (b = false)));
                                                                                    }
                                                                                    if (b22) {
                                                                                        if (((Code)n3).aM) {
                                                                                            b24 = (b23 = (b = false));
                                                                                        }
                                                                                        if (b23) {
                                                                                            if (((Code)n3).aL) {
                                                                                                b = (b24 = false);
                                                                                            }
                                                                                            if (b24) {
                                                                                                b = ((Code)n3).aK;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (b) {
            final Code code = (Code)n3;
            final int n4 = n;
            n = n2;
            n2 = n4;
            final Code code2 = code;
            final int length;
            if ((length = s.length()) != 0) {
                final int clipX = this.Code.getClipX();
                final int clipY = this.Code.getClipY();
                final int clipWidth = this.Code.getClipWidth();
                final int clipHeight = this.Code.getClipHeight();
                code2.P(color);
                for (int i = 0; i < length; ++i) {
                    final int code3 = code2.Code(this, s.charAt(i), n2, n);
                    if (n2 + code3 > Integer.MAX_VALUE) {
                        final int max = Math.max(Integer.MAX_VALUE, clipX);
                        this.J(max, clipY, clipWidth + clipX - max, clipHeight);
                        --i;
                    }
                    else {
                        n2 += code3;
                    }
                }
                this.J(clipX, clipY, clipWidth, clipHeight);
            }
            return;
        }
        this.Code.setColor(color);
        this.Code.setFont(((Code)n3).Code);
        this.Code.drawString(s, n, n2, 20);
    }
    
    private void Code(final char[] array, final int n, final int n2, final int n3, final int n4, final J n5, final int color) {
        boolean b;
        boolean b3;
        boolean b2;
        if ((b = (n5 instanceof Code)) && (b = ((Code)n5).bi) && (b2 = (b3 = (b = ((Code)n5).bh)))) {
            if (((Code)n5).bg) {
                b3 = (b2 = (b = false));
            }
            if (b2) {
                if (((Code)n5).bf) {
                    b = (b3 = false);
                }
                if (b3) {
                    boolean b8;
                    boolean b7;
                    boolean b6;
                    boolean b5;
                    final boolean b4 = b5 = (b6 = (b7 = (b8 = (b = ((Code)n5).be))));
                    boolean b9;
                    if ((b9 = b4) && b4) {
                        if (((Code)n5).bd) {
                            b5 = (b9 = (b6 = (b7 = (b8 = (b = false)))));
                        }
                        if (b9 && b5) {
                            if (((Code)n5).bc) {
                                b7 = (b6 = (b8 = (b = false)));
                            }
                            if (b6) {
                                if (((Code)n5).bb) {
                                    b8 = (b7 = (b = false));
                                }
                                if (b7) {
                                    if (((Code)n5).ba) {
                                        b = (b8 = false);
                                    }
                                    boolean b24;
                                    boolean b23;
                                    boolean b22;
                                    boolean b21;
                                    boolean b20;
                                    boolean b19;
                                    boolean b18;
                                    boolean b17;
                                    boolean b16;
                                    boolean b15;
                                    boolean b14;
                                    boolean b13;
                                    boolean b12;
                                    boolean b11;
                                    boolean b10;
                                    if (b8 && (b10 = (b11 = (b12 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = ((Code)n5).aZ))))))))))))))))) {
                                        if (((Code)n5).aY) {
                                            b11 = (b10 = (b12 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))))))))));
                                        }
                                        if (b10) {
                                            if (((Code)n5).aX) {
                                                b12 = (b11 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))))))));
                                            }
                                            if (b11 && b12) {
                                                if (((Code)n5).aW) {
                                                    b14 = (b13 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))))));
                                                }
                                                if (b13) {
                                                    if (((Code)n5).aV) {
                                                        b15 = (b14 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))))));
                                                    }
                                                    if (b14) {
                                                        if (((Code)n5).aU) {
                                                            b16 = (b15 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))));
                                                        }
                                                        if (b15) {
                                                            if (((Code)n5).aT) {
                                                                b17 = (b16 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))));
                                                            }
                                                            if (b16) {
                                                                if (((Code)n5).aS) {
                                                                    b18 = (b17 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))));
                                                                }
                                                                if (b17) {
                                                                    if (((Code)n5).aR) {
                                                                        b19 = (b18 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))));
                                                                    }
                                                                    if (b18) {
                                                                        if (((Code)n5).aQ) {
                                                                            b20 = (b19 = (b21 = (b22 = (b23 = (b24 = (b = false))))));
                                                                        }
                                                                        if (b19) {
                                                                            if (((Code)n5).aP) {
                                                                                b21 = (b20 = (b22 = (b23 = (b24 = (b = false)))));
                                                                            }
                                                                            if (b20) {
                                                                                if (((Code)n5).aO) {
                                                                                    b22 = (b21 = (b23 = (b24 = (b = false))));
                                                                                }
                                                                                if (b21) {
                                                                                    if (((Code)n5).aN) {
                                                                                        b23 = (b22 = (b24 = (b = false)));
                                                                                    }
                                                                                    if (b22) {
                                                                                        if (((Code)n5).aM) {
                                                                                            b24 = (b23 = (b = false));
                                                                                        }
                                                                                        if (b23) {
                                                                                            if (((Code)n5).aL) {
                                                                                                b = (b24 = false);
                                                                                            }
                                                                                            if (b24) {
                                                                                                b = ((Code)n5).aK;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (b) {
            ((Code)n5).Code(this, array, n, n2, n3, n4, color);
            return;
        }
        this.Code.setColor(color);
        this.Code.setFont(((Code)n5).Code);
        this.Code.drawChars(array, n, n2, n3, n4, 20);
    }
    
    private void Code(final char c, final J n) {
        boolean b;
        boolean b3;
        boolean b2;
        if ((b = (n instanceof Code)) && (b = ((Code)n).bi) && (b2 = (b3 = (b = ((Code)n).bh)))) {
            if (((Code)n).bg) {
                b3 = (b2 = (b = false));
            }
            if (b2) {
                if (((Code)n).bf) {
                    b = (b3 = false);
                }
                if (b3) {
                    boolean b8;
                    boolean b7;
                    boolean b6;
                    boolean b5;
                    final boolean b4 = b5 = (b6 = (b7 = (b8 = (b = ((Code)n).be))));
                    boolean b9;
                    if ((b9 = b4) && b4) {
                        if (((Code)n).bd) {
                            b5 = (b9 = (b6 = (b7 = (b8 = (b = false)))));
                        }
                        if (b9 && b5) {
                            if (((Code)n).bc) {
                                b7 = (b6 = (b8 = (b = false)));
                            }
                            if (b6) {
                                if (((Code)n).bb) {
                                    b8 = (b7 = (b = false));
                                }
                                if (b7) {
                                    if (((Code)n).ba) {
                                        b = (b8 = false);
                                    }
                                    boolean b24;
                                    boolean b23;
                                    boolean b22;
                                    boolean b21;
                                    boolean b20;
                                    boolean b19;
                                    boolean b18;
                                    boolean b17;
                                    boolean b16;
                                    boolean b15;
                                    boolean b14;
                                    boolean b13;
                                    boolean b12;
                                    boolean b11;
                                    boolean b10;
                                    if (b8 && (b10 = (b11 = (b12 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = ((Code)n).aZ))))))))))))))))) {
                                        if (((Code)n).aY) {
                                            b11 = (b10 = (b12 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))))))))));
                                        }
                                        if (b10) {
                                            if (((Code)n).aX) {
                                                b12 = (b11 = (b13 = (b14 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))))))));
                                            }
                                            if (b11 && b12) {
                                                if (((Code)n).aW) {
                                                    b14 = (b13 = (b15 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))))));
                                                }
                                                if (b13) {
                                                    if (((Code)n).aV) {
                                                        b15 = (b14 = (b16 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))))));
                                                    }
                                                    if (b14) {
                                                        if (((Code)n).aU) {
                                                            b16 = (b15 = (b17 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))))));
                                                        }
                                                        if (b15) {
                                                            if (((Code)n).aT) {
                                                                b17 = (b16 = (b18 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))))));
                                                            }
                                                            if (b16) {
                                                                if (((Code)n).aS) {
                                                                    b18 = (b17 = (b19 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false))))))));
                                                                }
                                                                if (b17) {
                                                                    if (((Code)n).aR) {
                                                                        b19 = (b18 = (b20 = (b21 = (b22 = (b23 = (b24 = (b = false)))))));
                                                                    }
                                                                    if (b18) {
                                                                        if (((Code)n).aQ) {
                                                                            b20 = (b19 = (b21 = (b22 = (b23 = (b24 = (b = false))))));
                                                                        }
                                                                        if (b19) {
                                                                            if (((Code)n).aP) {
                                                                                b21 = (b20 = (b22 = (b23 = (b24 = (b = false)))));
                                                                            }
                                                                            if (b20) {
                                                                                if (((Code)n).aO) {
                                                                                    b22 = (b21 = (b23 = (b24 = (b = false))));
                                                                                }
                                                                                if (b21) {
                                                                                    if (((Code)n).aN) {
                                                                                        b23 = (b22 = (b24 = (b = false)));
                                                                                    }
                                                                                    if (b22) {
                                                                                        if (((Code)n).aM) {
                                                                                            b24 = (b23 = (b = false));
                                                                                        }
                                                                                        if (b23) {
                                                                                            if (((Code)n).aL) {
                                                                                                b = (b24 = false);
                                                                                            }
                                                                                            if (b24) {
                                                                                                b = ((Code)n).aK;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (b) {
            final Code code;
            (code = (Code)n).P(0);
            code.Code(this, c, 0, 0);
            return;
        }
        this.Code.setColor(0);
        this.Code.setFont(((Code)n).Code);
        this.Code.drawChar(c, 0, 0, 20);
    }
    
    private void Code(final Code code, final int n, int i, final int n2) {
        final int o = this.O();
        final int o2 = this.O();
        final String j = this.j();
        final String k = this.j();
        final int l = this.L();
        this.N();
        if (!this.Code.contains(j) && !this.K.J.containsKey(j)) {
            String s = null;
            if (j.equals(this.q)) {
                s = Integer.toString(0);
            }
            else if (j.equals(this.r)) {
                s = Integer.toString(1);
            }
            else if (this.B.containsKey(j)) {
                s = j;
            }
            if (s != null) {
                final String s2 = s;
                final String s3 = j;
                final String s4 = this.B.containsKey(s) ? null : k;
                final String s5 = s3;
                final String s6 = s2;
                String s7 = null;
                if (s5 != null && !this.Code.contains(s5) && !this.K.J.containsKey(s5) && (s4 == null || s4.length() == 0 || this.K.e() == null || this.K.e().indexOf(s5 + "=") == -1)) {
                    s7 = this.B.remove(s6);
                }
                else if (s4 != null && s4.length() > 0) {
                    s7 = s4;
                }
                if (s7 != null) {
                    this.K.Code(s7, o, s5);
                }
            }
        }
        final String s9;
        String s8;
        if ((s8 = (s9 = (String)this.K.J.get(j))) == null) {
            s8 = k;
        }
        char[] array = null;
        int n3 = 0;
        switch (o) {
            case 112: {
                for (array = new char[n3 = s8.length()], i = 0; i < array.length; ++i) {
                    array[i] = Code.Code;
                }
                break;
            }
            case 97: {
                i = this.K.b;
                if ((n3 = s8.length()) <= Code.I.length) {
                    array = Code.I;
                    s8.getChars(0, n3, array, 0);
                    n3 = Code(array, n3, i, this.Q(this.cz));
                    break;
                }
                final Integer n4 = new Integer(s8.hashCode());
                if (this.J == null) {
                    this.J = new Hashtable();
                }
                boolean b = false;
                if (this.J.containsKey(n4)) {
                    array = (char[])this.J.get(n4);
                    if (this.cn != this.bp && (this.cn == this.cv || this.cn == v())) {
                        b = true;
                    }
                }
                else {
                    array = new char[n3];
                    b = true;
                }
                if (b) {
                    s8.getChars(0, n3, array, 0);
                    n3 = Code(array, n3, i, this.Q(this.cz));
                    this.J.put(n4, array);
                    break;
                }
                break;
            }
            case 83:
            case 85:
            case 120: {
                n3 = (array = s8.toCharArray()).length;
                break;
            }
            case 99: {
                final boolean b2 = s9 != null;
                final int n5 = o2 & 0x2;
                if (((b2 ? 1 : 0) ^ (n5 | -n5) >>> 31) != 0x0) {
                    code.Code(this.Code(this.aL ? 256 : this.H(), i, n2), this.cx, this.cy);
                    break;
                }
                break;
            }
            case 114: {
                if (s9 != null) {
                    if (!s9.equals(k)) {
                        break;
                    }
                }
                else if ((o2 & 0x2) == 0x0) {
                    break;
                }
                final int n6 = this.cx + 1;
                final int n7 = this.cy + 1;
                final int n8 = this.cz - 3;
                i = this.cA - 3;
                final int n9 = n8;
                final int n10 = n7;
                final int n11 = n6;
                code.Code.setColor(4210752);
                code.Code.fillArc(n11, n10, n9, i, -90, 360);
                break;
            }
            case 115: {
                i = this.cD;
                this.cD = l;
                int m = this.L();
                final String string = "\u0000" + s8 + "\u0000";
                final StringBuffer sb = new StringBuffer();
                while (m > 0) {
                    final String j2 = this.j();
                    final String j3 = this.j();
                    final boolean b3 = string.indexOf("\u0000" + j2 + "\u0000") >= 0;
                    if ((o2 & 0x4) == 0x0) {
                        if (b3) {
                            sb.append(j3).append("\n");
                            break;
                        }
                    }
                    else {
                        if (b3) {
                            sb.append("*");
                        }
                        sb.append(j3).append("\n");
                    }
                    --m;
                }
                this.cD = i;
                n3 = (array = sb.toString().toCharArray()).length;
                break;
            }
            case 102: {
                if (this.K.B != null && this.K.B.containsKey(j)) {
                    String substring;
                    final int lastIndex;
                    if ((lastIndex = (substring = (String)((Object[])this.K.B.get(j))[0]).lastIndexOf(47)) >= 0 && lastIndex < substring.length()) {
                        substring = substring.substring(lastIndex + 1);
                    }
                    n3 = (array = substring.toCharArray()).length;
                    break;
                }
                break;
            }
        }
        if (array != null) {
            i = code.Code.getClipX();
            final int clipY = code.Code.getClipY();
            final int clipWidth = code.Code.getClipWidth();
            final int clipHeight = code.Code.getClipHeight();
            code.B(this.cx, this.cy, this.cz, this.cA);
            this.Code(code, array, n3, n, this.K.b, n2, true);
            code.J(i, clipY, clipWidth, clipHeight);
        }
    }
    
    private synchronized Object Z(final int n) {
        this.T(n);
        this.cD += 15;
        this.O();
        final int o = this.O();
        final String j = this.j();
        String i = this.j();
        this.cD = this.L();
        final int l;
        final int[] array = new int[l = this.L()];
        for (int k = 0; k < l; ++k) {
            array[k] = this.cD;
            this.aA();
            this.aA();
        }
        if (this.K.J.containsKey(j)) {
            i = this.K.J.get(j);
        }
        final Hashtable hashtable = new Hashtable();
        final Integer n2 = new Integer(Code(hashtable, i));
        final Object[] array2 = { this, new Integer(n), array, hashtable, null, null };
        final int n3 = 4;
        final int n4 = o & 0x4;
        array2[n3] = new Boolean((boolean)((n4 | -n4) >>> 31 != 0));
        array2[5] = n2;
        return array2;
    }
    
    private synchronized String c(int o) {
        this.T(o);
        this.cD += 15;
        o = this.O();
        final int o2 = this.O();
        String j = this.K.J.get(this.j());
        switch (o) {
            case 83:
            case 85:
            case 97:
            case 112:
            case 115:
            case 120: {
                if (j == null) {
                    j = this.j();
                }
                return j;
            }
            case 99: {
                final boolean b = j != null;
                final int n = o2 & 0x2;
                if (((b ? 1 : 0) ^ (n | -n) >>> 31) != 0x0) {
                    return "1";
                }
                return "0";
            }
            default: {
                return "";
            }
        }
    }
    
    private static int a(final byte[] array, final int n) {
        return ((array[n] & 0xFF) << 16) + ((array[n + 1] & 0xFF) << 8) + (array[n + 2] & 0xFF);
    }
    
    private int M(int n) {
        n = this.N(n);
        if (this.x()) {
            this.f(true);
        }
        return n;
    }
    
    private void T(final int n) {
        switch (n) {
            case 84: {
                this.cD += 6;
                this.aD();
                this.cD += this.N();
            }
            case 73: {
                this.cD += 7;
                this.aD();
            }
            case 66: {
                this.cD += 4;
            }
            case 70: {
                this.cD += 6;
                this.cD += this.N();
                this.cD = this.N() + this.cD + 5;
            }
            case 83: {
                this.cD += this.L();
            }
            case 76: {
                this.cD += 9;
            }
            case 77: {
                ++this.cD;
                this.cD += this.L();
                break;
            }
        }
    }
    
    private void c(boolean b) {
        if (b) {
            this.K.w();
        }
        if (this.K.u() == 0) {
            Code.Code.Z();
            return;
        }
        b = true;
        final int cv = this.cv;
        try {
            I(cv);
            I(this.bo);
            Code(this.K(this.cl));
            Code(Code(this.o));
            Code(Code(this.h));
            final int ce = this.cE;
            I((ce | -ce) >>> 31);
            I((int)(this.ba ? 1 : 0));
            I(this.bl);
            if (this.x()) {
                Code(this.K.u());
                final Code c = Code.c;
                final int n = 15;
                try {
                    c.b(n);
                }
                finally {}
                b = false;
                this.f(false);
                return;
            }
            b = false;
            Code.Code.Code(this.K.u(), 15);
        }
        finally {
            if (b) {
                Code.Code.Z();
            }
        }
    }
    
    private synchronized int Z(int i, final char c) {
        this.cD = i + 1;
        this.cD += 10 * this.O();
        this.cD += this.N();
        for (i = this.O(); i > 0; --i) {
            if (this.O() == c) {
                return this.cD;
            }
            this.cD += this.N();
        }
        return 0;
    }
    
    private int O(final int n) {
        return n * this.cn / this.cv;
    }
    
    private int H() {
        return 256 * v() / this.cv;
    }
    
    private boolean d(int n) {
        n += 17;
        for (int i = this.F(n++); i > 0; --i) {
            if (this.F(n++) == 116 && this.a(n).equals("s")) {
                return true;
            }
            n += this.E(n) + 2;
        }
        return false;
    }
    
    private int O() {
        return this.F(this.cD++);
    }
    
    public final int Code(final char c) {
        if (this.aY) {
            return this.Code.charWidth(c);
        }
        return this.f[Code(c)];
    }
    
    public final DataOutputStream Code() {
        if (this.aX) {
            return ((OutputConnection)this.Code).openDataOutputStream();
        }
        return ((OutputConnection)this.Code).openDataOutputStream();
    }
    
    public final int C() {
        return this.C.E(this.cp + 15);
    }
    
    private void J(final int n, final int n2, final int n3, final int n4) {
        this.Code.setClip(n, n2, n3, n4);
    }
    
    private Code(final boolean b, final char c) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.aZ = true;
        this.aR = true;
        this.g = new int[3];
        this.I = new int[3];
        this.t = new int[3];
        this.u = new int[3];
        this.v = new int[3];
        this.w = new int[3];
        this.Z = new byte[3][];
        this.y = new int[6];
        this.I = new int[16][];
        this.Z = new int[16][];
        this.Code = new short[16][];
        this.J = new byte[16][];
        this.B = new byte[16][];
        this.B = new short[3];
        this.z = new int[3];
        this.J = new int[4][];
        this.cv = -1;
        ap();
        this.bh = 0;
        this.br = 0;
        this.bl = 0;
        this.cn = 0;
        for (int i = 0; i < 3; ++i) {
            this.Z[i] = null;
            this.I[i] = null;
            this.Z[i] = null;
            this.Code[i] = null;
            this.J[i] = null;
            this.B[i] = null;
        }
    }
    
    private void ar() {
        for (int i = 0; i < 3; ++i) {
            this.B[i] = 0;
        }
        this.ct = 0;
        this.cu = 0;
    }
    
    private int z(final int n) {
        if (n == 0) {
            return 0;
        }
        if (this.cu < n) {
            this.as();
            if (this.cu < n) {
                return -2;
            }
        }
        final int n2 = this.ct >>> 32 - n;
        this.ct <<= n;
        this.cu -= n;
        return n2;
    }
    
    private String j() {
        final String a = this.a(this.cD);
        this.aA();
        return a;
    }
    
    private int A(final int n) {
        if (this.cu < 8) {
            this.as();
            if (this.cu < 8) {
                return this.e(n, 1);
            }
        }
        final int n2 = this.ct >>> 24;
        final byte b;
        if ((b = this.B[n][n2]) <= 8) {
            this.ct <<= b;
            this.cu -= b;
            return this.B[n][n2 + 256] & 0xFF;
        }
        return this.e(n, 9);
    }
    
    private int e(final int n, int z) {
        int n2 = z - 1;
        if ((z = this.z(z)) < 0) {
            return z;
        }
        while (n2 < 16 && z > this.I[n][n2]) {
            ++n2;
            final int z2;
            if ((z2 = this.z(1)) < 0) {
                return z2;
            }
            z = (z << 1 | z2);
        }
        z = this.Code[n][n2] + (z - this.Z[n][n2]);
        return this.J[n][z] & 0xFF;
    }
    
    private Code C() {
        return this.C.B(this.cp);
    }
    
    public final Code J() {
        return this.C.I(this.cp, this.bm, this.cs);
    }
    
    public final int Z() {
        return this.cp;
    }
    
    public final boolean Code(final int n, final int n2) {
        return Code(n, n2, 1, 1, this.bm, this.cs, this.F(), this.G());
    }
    
    public final int J() {
        return this.bm;
    }
    
    public final boolean I(final Code code) {
        return Code(this.bm, this.cs, this.F(), this.G(), code.bm, code.cs, code.F(), code.G());
    }
    
    public final int B() {
        return this.cs;
    }
    
    private boolean Z(final Code code) {
        return Code(this.cs, this.G(), code.cs, code.G());
    }
    
    private int F() {
        return this.C.E(this.cp + 6);
    }
    
    private int G() {
        return this.C.D(this.cp + 8);
    }
    
    public final boolean J() {
        return !I(this.I().charAt(0));
    }
    
    private boolean t() {
        if (this.c == null) {
            this.I();
        }
        return !this.aE;
    }
    
    public final boolean Code(final Code code) {
        return I(this.bm, this.cs, this.F(), this.G(), code.bm, code.cs, code.F(), code.G());
    }
    
    private boolean a(final Code code) {
        return this.bm > code.bm;
    }
    
    private boolean J(final Code code) {
        return this.bm < code.bm;
    }
    
    private boolean B(final Code code) {
        return this.cs > code.cs;
    }
    
    private boolean C(final Code code) {
        return this.cs < code.cs;
    }
    
    private Code a() {
        final Code j;
        if ((j = this.J()) != null && ((j.Z(this) && j.a(this)) || j.B(this))) {
            return j;
        }
        final Code c;
        if ((c = this.C()) != null && ((c.Z(this) && c.a(this)) || c.B(this))) {
            return c;
        }
        return null;
    }
    
    private Code b() {
        final Code j;
        if ((j = this.J()) != null && ((j.Z(this) && j.J(this)) || j.B(this))) {
            return j;
        }
        final Code c;
        if ((c = this.C()) != null && ((c.Z(this) && c.J(this)) || c.B(this))) {
            return c;
        }
        return null;
    }
    
    private Code c() {
        final Code j;
        if ((j = this.J()) != null && ((j.Z(this) && j.J(this)) || j.C(this))) {
            return j;
        }
        final Code c;
        if ((c = this.C()) != null && ((c.Z(this) && c.J(this)) || c.C(this))) {
            return c;
        }
        return null;
    }
    
    private static int e(final String s) {
        if (s != null) {
            return Code(s);
        }
        return 0;
    }
    
    private static String C(final int n) {
        if (n != 0) {
            return Code(n);
        }
        return null;
    }
    
    public final DataInputStream Code() {
        if (this.aX) {
            return ((InputConnection)this.Code).openDataInputStream();
        }
        return ((InputConnection)this.Code).openDataInputStream();
    }
    
    private boolean x() {
        return this.c && this.K.C == this;
    }
    
    private static int Code(final int n, final Object o) {
        if (o != null) {
            return Code(n, 1, o);
        }
        return 0;
    }
    
    private static Object I(final int n) {
        if (n != 0) {
            return Code(n);
        }
        return null;
    }
    
    public final void close() {
        if (this.aX) {
            ((Connection)this.Code).close();
            return;
        }
        if (this.aG) {
            ((Connection)this.Code).close();
            return;
        }
        this.Code = null;
    }
    
    private boolean u() {
        int n = 8;
        for (int i = 0; i < 4; ++i) {
            if (n + 2 >= this.cr) {
                return false;
            }
            n += this.E(n) + 2;
        }
        n += 6;
        return this.cr >= n;
    }
    
    private void R(final int n) {
        this.C(this.N.h[n + 2] & 0x3FFFFFFF, this.N.h[n + 3], this.N.h[n + 4] >>> 16, this.N.h[n + 4] & 0xFFFF);
    }
    
    private Code(final boolean b, final int n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.ba = true;
    }
    
    private Code(final boolean b, final boolean b2) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.ba = true;
        this(false, 0);
    }
    
    private static int Code(final DataInput dataInput) {
        return dataInput.readUnsignedByte() << 16 | dataInput.readUnsignedShort();
    }
    
    private Code(final Code k, final Code c, final boolean b, final boolean n) {
        this.bi = true;
        this.bh = true;
        this.be = true;
        this.bb = true;
        this.ck = 1;
        this.y = new int[5];
        this.B = new Hashtable();
        this.Code = new Vector();
        this.N = new Code((byte)0, false);
        this.aR = true;
        this.J = null;
        if (c != null) {
            this.C = c;
            this.L = c.N;
        }
        this.K = k;
        this.b = b;
        this.N = n;
        this.cu = k.I[80];
        if (c != null && this.cu != c.cu) {
            c.d(true);
        }
    }
    
    private static int G(final int n) {
        final int n2 = l(n) - 2;
        J(n, 2);
        return n2;
    }
    
    private synchronized void ax() {
        if (Code.U) {
            final B[] array = this.aE ? this.N.Code : this.N.I;
            for (int n = 0, i = 0; i < this.N.az; ++i, n += 6) {
                final int n2 = this.N.h[n + 1];
                if (array[i] == null && this.b(n2)) {
                    this.R(n);
                }
            }
        }
        else if (this.N.az > 0) {
            if (this.N) {
                Code.M.c(this);
                return;
            }
            Code.M.d(this);
        }
    }
    
    private void av() {
        for (int n = 0, i = 0; i < this.N.az; ++i, n += 6) {
            if (this.N.Code[i] != null || this.N.I[i] != null) {
                final int[] h = this.N.h;
                final int n2 = n + 2;
                h[n2] |= Integer.MIN_VALUE;
                this.N.Code(i, true, true);
            }
        }
    }
    
    private void e(final boolean b) {
        for (int n = 0, i = 0; i < this.N.az; ++i, n += 6) {
            if (this.aE) {
                if (this.N.Code[i] != null && !this.c(n)) {
                    this.N.Code(i, true, true);
                }
                else {
                    this.N.Code(i, true, false);
                }
            }
            else if (this.N.I[i] != null && !this.c(n)) {
                this.N.Code(i, true, true);
            }
            else if (!b && this.N.Code[i] != null) {
                this.N.Code(i, false, true);
            }
        }
    }
    
    private synchronized B Code(int t, final int n, final int n2, final int n3, int n4, int n5, final int n6, final int n7, final int n8) {
        final int t2 = this.N.t(t);
        final B[] array = (n6 == 256) ? this.N.Code : this.N.I;
        if (this.N.J(t2, t)) {
            if (array[t2] != null) {
                return array[t2];
            }
        }
        else {
            final Code n9;
            if ((n9 = this.N).az == n9.Code.length) {
                n9.h = I(n9.h, (n9.az << 1) * 6);
                n9.Code = Code(n9.Code, n9.az << 1);
                n9.I = Code(n9.I, n9.az << 1);
            }
            final int n10 = t2 * 6;
            System.arraycopy(n9.h, n10, n9.h, n10 + 6, 6 * n9.az - n10);
            System.arraycopy(n9.Code, t2, n9.Code, t2 + 1, n9.az - t2);
            System.arraycopy(n9.I, t2, n9.I, t2 + 1, n9.az - t2);
            final Code code = n9;
            ++code.az;
            n9.h[n10] = t;
            n9.h[n10 + 1] = n;
            n9.h[n10 + 4] = 0;
            n9.Code[t2] = (n9.I[t2] = null);
        }
        if (this.L != null) {
            final Code l = this.L;
            final int n11 = t;
            final Code n12 = this.N;
            final int n13 = n11;
            final Code code2 = l;
            t = l.t(t);
            if (code2.J(t, n13)) {
                final B b;
                if ((b = code2.Code[t]) != null) {
                    final int code3 = b.Code();
                    n12.Code[t2] = b;
                    final Code code4 = n12;
                    code4.bh += code3;
                    if (n12.C > 0) {
                        final Code code5 = n12;
                        code5.C += code3;
                        final Code code6 = n12;
                        code6.b -= code3;
                    }
                }
                final B b2;
                if (n6 == code2.a && (b2 = code2.I[t]) != null) {
                    final int code7 = b2.Code();
                    n12.I[t2] = b2;
                    final Code code8 = n12;
                    code8.bh += code7;
                    if (n12.C > 0) {
                        final Code code9 = n12;
                        code9.C += code7;
                        final Code code10 = n12;
                        code10.b -= code7;
                    }
                }
                if (n12.b < 0) {
                    n12.b = 0;
                }
                final int[] h = n12.h;
                final int n14 = t2 * 6 + 2;
                h[n14] |= (code2.h[t * 6 + 2] & Integer.MIN_VALUE);
                if (array[t2] != null) {
                    return array[t2];
                }
            }
        }
        final Code n15 = this.N;
        final int n16 = n4;
        final int n17 = n5;
        final int n18 = (n7 < 0) ? 0 : n7;
        t = ((n8 < 0) ? 0 : n8);
        n4 = n18;
        n5 = n17;
        final int n19 = n16;
        final Code code11 = n15;
        final int n20 = t2 * 6;
        if (code11.h[n20 + 4] == 0) {
            code11.h[n20 + 2] = n2;
            code11.h[n20 + 3] = n3;
            code11.h[n20 + 4] = (n19 << 16 | n5);
        }
        else {
            final int n21 = code11.h[n20 + 2] & 0x3FFFFFFF;
            final int n22 = code11.h[n20 + 3];
            final int min = Math.min(n2, n21);
            final int min2 = Math.min(n3, n22);
            code11.h[n20 + 4] = (Math.max(n2 + n19, n21 + (code11.h[n20 + 4] >>> 16)) - min << 16 | Math.max(n3 + n5, n22 + (code11.h[n20 + 4] & 0xFFFF)) - min2);
            code11.h[n20 + 2] = (min | (code11.h[n20 + 2] & 0xC0000000));
            code11.h[n20 + 3] = min2;
        }
        code11.h[n20 + 5] = (n4 << 16 | t);
        if ((Code.U || (this.N.h[n20 + 2] & Integer.MIN_VALUE) != 0x0) && this.b(n)) {
            return this.Code(t2, n, n6, n7, n8, n2, n3);
        }
        return null;
    }
    
    private boolean b(final int n) {
        return n + 2 <= this.cr && n + B(this.f, n) <= this.cr;
    }
    
    private boolean I(final int n, final int n2, final int n3, final int n4) {
        for (int i = 1; i < this.y[0]; i += 4) {
            if (Code(n, n2, n3, n4, this.y[i], this.y[i + 1], this.y[i + 2], this.y[i + 3])) {
                return true;
            }
        }
        return false;
    }
    
    private boolean c(final int n) {
        return this.I(this.N.h[n + 2] & 0x3FFFFFFF, this.N.h[n + 3], this.N.h[n + 4] >>> 16, this.N.h[n + 4] & 0xFFFF);
    }
    
    private int M() {
        return this.L() << 8 >> 8;
    }
    
    private void aw() {
        if (this.N.C > 0 && this.N.b > 0) {
            this.N.d(this.N.C + this.N.b, 0);
        }
        this.L = null;
    }
    
    private int K() {
        this.cD += 4;
        final int n = this.cD - 4;
        return (this.f[n] << 24) + ((this.f[n + 1] & 0xFF) << 16) + ((this.f[n + 2] & 0xFF) << 8) + (this.f[n + 3] & 0xFF);
    }
    
    private int N() {
        this.cD += 2;
        return this.E(this.cD - 2);
    }
    
    private int L() {
        this.cD += 3;
        return this.D(this.cD - 3);
    }
    
    private int K(final int n) {
        return Code(this.f, n + 2, B(this.f, n));
    }
    
    private int D(final int n) {
        return a(this.f, n);
    }
    
    private String a(final int n) {
        return Code(this.f, n);
    }
    
    private int E(final int n) {
        return ((this.f[n] & 0xFF) << 8) + (this.f[n + 1] & 0xFF);
    }
    
    private int F(final int n) {
        return this.f[n] & 0xFF;
    }
    
    private void aA() {
        this.cD += this.N();
    }
    
    private void ay() {
        this.cx = this.N();
        this.cy = this.L();
        this.cz = this.N();
        this.cA = this.L();
    }
    
    private void az() {
        this.cx = (short)this.N();
        this.cy = this.M();
        this.cz = this.N();
        this.cA = this.L();
    }
    
    private int I(int cd, final int[] array) {
        this.cD = cd;
        while (this.cD < this.cr) {
            cd = this.cD;
            final int o;
            switch (o = this.O()) {
                case 66:
                case 70:
                case 73:
                case 84: {
                    this.az();
                    this.cx += array[0];
                    this.cy += array[1];
                    array[0] = this.cx;
                    array[1] = this.cy;
                    break;
                }
            }
            if (o == 84) {
                return cd;
            }
            this.T(o);
        }
        return -1;
    }
    
    private synchronized Code B(final int n) {
        Code code = null;
        final int cd = this.cD;
        final int cx = this.cx;
        final int cy = this.cy;
        int n2 = -1;
        int n3 = 0;
        int n4 = 0;
        int n5 = 0;
        int n6 = 0;
        this.cD = this.bq;
        while (this.cD < n) {
            final int cd2 = this.cD;
            final int o;
            switch (o = this.O()) {
                case 66:
                case 70:
                case 73:
                case 84: {
                    this.az();
                    n5 += this.cx;
                    n6 += this.cy;
                    if (o == 84 && !this.d(cd2)) {
                        n2 = cd2;
                        n3 = n5;
                        n4 = n6;
                        break;
                    }
                    break;
                }
            }
            this.T(o);
        }
        if (n2 > 0) {
            code = new Code(this, n2, n3, n4);
        }
        this.cx = cx;
        this.cy = cy;
        this.cD = cd;
        return code;
    }
    
    private synchronized Code I(int i, final int n, final int n2) {
        final int cd = this.cD;
        final int cx = this.cx;
        final int cy = this.cy;
        int[] array;
        Code code;
        for (array = new int[] { n, n2, 0, 0 }, code = null; code == null && i != -1; code = new Code(this, i, array[0], array[1])) {
            this.cD = i + 1 + 10;
            this.T(84);
            if ((i = this.I(this.cD, array)) != -1 && !this.d(i)) {}
        }
        this.cx = cx;
        this.cy = cy;
        this.cD = cd;
        return code;
    }
    
    private synchronized boolean I(final Code code, int h, final Code code2) {
        if (h == 0) {
            return false;
        }
        h = H(h);
        final int[] code3 = Code.Code;
        final int n = Code.Code + 2;
        final int i;
        if ((i = this.I(code3, n, h, code2.B.J())) < 0) {
            return false;
        }
        final int j;
        if ((j = this.I(code3, n, h, code2.a.J())) < 0) {
            return false;
        }
        code.B.Code(this.Code(code3, n, h, code2.B.Z(), i), code2.B.Z(), i);
        code.a.Code(this.Code(code3, n, h, code2.a.Z(), j), code2.a.Z(), j);
        return true;
    }
    
    public final synchronized Code Code(int h, final int n, final int n2) {
        h = H(h);
        return this.Code(Code.Code, Code.Code + 2, h, n, n2);
    }
    
    private Code Code(final int[] array, final int n, final int n2, final int n3, final int n4) {
        Code code = null;
        final int cd = this.cD;
        final int cx = this.cx;
        final int cy = this.cy;
        int n5 = -1;
        int n6 = 0;
        int n7 = 0;
        int n8 = Integer.MAX_VALUE;
        int n9 = Integer.MAX_VALUE;
        boolean b = false;
        int n10 = 0;
        Label_0240: {
            if (this.z == null) {
                n10 = -1;
            }
            else {
                int n11 = Integer.MAX_VALUE;
                int n12 = -1;
                for (int i = 0; i < this.z.length; i += 5) {
                    final int n13 = this.z[i];
                    final int j = this.I(array, n, n2, this.z[i + 1]);
                    final int n14 = this.z[i + 2];
                    final int n15 = this.z[i + 3];
                    if (Code(n3, n4, 1, 1, n13, j, n14, n15)) {
                        n10 = i;
                        break Label_0240;
                    }
                    final int c = C(n3, n13, n13 + n14 - 1);
                    final int c2 = C(n4, j, j + n15 - 1);
                    final int n16 = n3 - c;
                    final int n17 = n4 - c2;
                    final int n18;
                    if ((n18 = n16 * n16 + n17 * n17) < n11) {
                        n11 = n18;
                        n12 = i;
                    }
                }
                n10 = n12;
            }
        }
        final int n19 = n10;
        int n20 = 0;
        int k = 0;
        int cv = this.cv;
        int n21 = array[n - 2];
        if (n19 >= 0) {
            n20 = this.z[n19];
            k = this.I(array, n, n2, this.z[n19 + 1]);
            cv = this.z[n19 + 2];
            n21 = this.z[n19 + 3];
        }
        int n22 = 0;
        int n23 = 0;
        this.cD = this.bq;
        while (this.cD < this.f.length) {
            final int cd2 = this.cD;
            final int o;
            switch (o = this.O()) {
                case 66:
                case 70:
                case 73:
                case 84: {
                    this.az();
                    n22 += this.cx;
                    n23 += this.cy;
                    break;
                }
            }
            if (o == 84 && !this.d(cd2)) {
                final int n24 = n22;
                final int l = this.I(array, n, n2, n23);
                final int cz = this.cz;
                final int ca = this.cA;
                if (l < 0) {
                    this.T(o);
                    continue;
                }
                int n25;
                if (n3 < n24) {
                    n25 = n24 - n3;
                }
                else if (n3 >= n24 + cz) {
                    n25 = n3 - n24 - cz + 1;
                }
                else {
                    n25 = 0;
                }
                int n26;
                if (n4 < l) {
                    n26 = l - n4;
                }
                else if (n4 >= l + ca) {
                    n26 = n4 - l - ca + 1;
                }
                else {
                    n26 = 0;
                }
                if (n25 == 0 && n26 == 0) {
                    n5 = cd2;
                    n6 = n22;
                    n7 = n23;
                    break;
                }
                final boolean code2 = Code(n20, k, cv, n21, n24, l, cz, ca);
                final boolean b2 = n26 < n9 || (n26 == n9 && n25 < n8);
                if ((!b && (code2 || b2)) || (b && code2 && b2)) {
                    n5 = cd2;
                    n6 = n22;
                    n7 = n23;
                    n8 = n25;
                    n9 = n26;
                    b = code2;
                }
            }
            this.T(o);
        }
        this.cx = cx;
        this.cy = cy;
        this.cD = cd;
        if (n5 > 0) {
            code = new Code(this, n5, n6, n7);
        }
        return code;
    }
    
    private int I(final int[] array, final int n, int g, final int n2) {
        if (g == 0) {
            return -1;
        }
        g = this.g(n2, g);
        if ((array[n + g] & Integer.MIN_VALUE) == 0x0) {
            return -1;
        }
        return n2 - this.w[g * 5] + (array[n + g] & 0xFFFFFF);
    }
    
    private int L(final int n) {
        final int b;
        if ((b = B(this.f, n)) > 0 && this.f[n + 2] == 0) {
            return Code(this.f, this.cw + 2, B(this.f, this.cw), this.f, n + 3, b - 1);
        }
        return Code(this.f, n + 2, b);
    }
    
    private int P() {
        while (this.cE == 0 || this.f == null) {
            if (this.C == null) {
                return 0;
            }
            this = this.C;
        }
        return Z(this.f, this.cE + 3, a(this.f, this.cE));
    }
    
    private int P(final int n) {
        return n * v() / this.cv;
    }
    
    private void f(final boolean b) {
        if (b) {
            this.K.w();
        }
        if (this.K.u() == 0) {
            Code.Code.Z();
            return;
        }
        this.c = false;
        final Code code = Code.Code;
        final int n = 2 + this.br;
        final Code code2 = code;
        final int n2 = n;
        final int n3 = n;
        try {
            Z(n2, n3);
        }
        catch (RuntimeException ex) {
            code2.Z();
            throw ex;
        }
        catch (Error error) {
            code2.Z();
            throw error;
        }
        int n4 = Code.Code + 2;
        for (int i = 0; i < this.br; ++i) {
            final int n5 = this.w[i * 5 + 4];
            final int[] code3 = Code.Code;
            final int n6 = n4++;
            final int n7 = (n5 & 0x1) * Integer.MIN_VALUE;
            final int n8 = n5 & 0x2;
            code3[n6] = (n7 | ((n8 | -n8) >>> 31) * 1073741824);
        }
        Code(Code.Code.p());
        Code.Code.Code(this.K.u(), 20);
    }
    
    private synchronized int N(int i) {
        this.cD = i;
    Label_0883:
        while ((this.cD < this.f.length && this.cr == this.f.length) || this.cD < this.cr - 16) {
            final int cd = this.cD;
            Label_0875: {
                final int o;
                switch (o = this.O()) {
                    case 83: {
                        this.cD += this.L();
                        break;
                    }
                    case 76: {
                        this.L();
                        this.cs = this.L();
                        this.a = this.L();
                        break;
                    }
                    case 77: {
                        final int o2 = this.O();
                        int l = this.L();
                        if (this.cD + l > this.cr) {
                            break Label_0883;
                        }
                        switch (o2) {
                            case 116: {
                                this.cE = this.cD - 3;
                                this.cD += l;
                                break Label_0875;
                            }
                            case 67: {
                                l -= 8;
                                this.br = l / 6;
                                this.w = new int[(this.N() << 2) + this.br * 6];
                                this.az = this.O();
                                this.C = this.N();
                                this.bm = this.L();
                                this.aS = true;
                                i = this.br * 5;
                                int n = 0;
                                for (int n2 = 0; n2 / 5 < this.br; n2 += 5) {
                                    final int j = this.L();
                                    this.w[n2] = n;
                                    this.w[n2 + 1] = j;
                                    this.w[n2 + 2] = i;
                                    this.w[n2 + 4] = this.O();
                                    i += 4 * this.N() + 1;
                                    n += j;
                                }
                                this.c = true;
                                break Label_0875;
                            }
                            case 84: {
                                i = l / 12;
                                this.z = new int[i * 5];
                                for (i = 0; i < this.z.length; i += 5) {
                                    this.z[i] = this.L();
                                    this.z[i + 1] = this.L();
                                    this.z[i + 2] = this.L() - this.z[i];
                                    this.z[i + 3] = this.L() - this.z[i + 1];
                                }
                                break Label_0875;
                            }
                            case 73: {
                                i = l / 11;
                                this.t = new int[i * 5];
                                for (i = 0; i < this.t.length; i += 5) {
                                    this.t[i] = this.O();
                                    this.t[i + 1] = this.L();
                                    this.t[i + 2] = this.L();
                                    this.t[i + 3] = this.N();
                                    this.t[i + 4] = this.N();
                                }
                                break Label_0875;
                            }
                            case 117: {
                                i = this.K();
                                if (!this.aK && !this.o.startsWith("odp:component")) {
                                    final Code k = this.K;
                                    k.bq += i;
                                    break Label_0875;
                                }
                                break Label_0875;
                            }
                            case 80: {
                                i = this.O();
                                this.K.a = i;
                                break Label_0875;
                            }
                            default: {
                                this.cD += l;
                                break Label_0875;
                            }
                        }
                        break;
                    }
                    default: {
                        this.az();
                        this.T(o);
                        if (this.cD <= this.cr) {
                            this.cx += this.cB;
                            this.cy += this.cC;
                            final int n3 = cd;
                            i = this.cD;
                            final int n4 = n3;
                            int g = this.g(this.cy, this.br);
                            do {
                                int n5;
                                for (n5 = this.w[g * 5 + 2]; this.w[n5 + 4] != 0; n5 += 4) {}
                                if (this.w[n5] == 0) {
                                    this.a(n5, n4, i);
                                }
                                else if (this.w[n5 + 1] + this.az >= n4) {
                                    this.w[n5 + 1] = i;
                                }
                                else {
                                    this.a(n5 + 4, n4, i);
                                }
                            } while (++g < this.br && this.cy + this.cA > this.w[g * 5]);
                            this.cB = this.cx;
                            this.cC = this.cy;
                            this.C(this.cx, this.cy, this.cz, this.cA);
                            break;
                        }
                        break Label_0883;
                    }
                }
            }
            i = this.cD;
        }
        return i;
    }
    
    private int Q(final int n) {
        return n * this.cv / this.cn;
    }
    
    private int f(final int n, final int n2) {
        return n * this.cv / n2;
    }
    
    private int b(final int n, final int n2, final int n3) {
        if (n <= n3) {
            return n;
        }
        return (n - n3) * this.cv / n2 + n3;
    }
    
    private int Z(final int[] array, final int n, final int n2, final int n3) {
        final int j;
        if ((j = this.J(array, n, n2, n3)) >= n2) {
            return this.bo;
        }
        return n3 + this.w[j * 5] - (array[n + j] & 0xFFFFFF);
    }
    
    private synchronized int J(final int[] array, final int n, final int n2, final int n3) {
        int code;
        for (code = Code(array, n, n2, 1, 16777215, n3); code > 0 && (code == n2 || (array[n + code] & 0xFFFFFF) == (array[n + code - 1] & 0xFFFFFF) || (array[n + code] & 0xFFFFFF) > n3); --code) {}
        while (code < n2 && (array[n + code] & Integer.MIN_VALUE) == 0x0) {
            ++code;
        }
        return code;
    }
    
    private synchronized int g(final int n, final int n2) {
        int code;
        for (code = Code(this.w, n2, 5, n); code > 0 && (code == n2 || this.w[code * 5] == this.w[(code - 1) * 5] || this.w[code * 5] > n); --code) {}
        return code;
    }
    
    private int R(final int n) {
        if (n == 0) {
            final int n2 = this.y[0];
            Z(n2, n2);
        }
        else {
            Code(n, this.y[0], false);
        }
        System.arraycopy(this.y, 1, Code.Code, Code.Code, this.y[0]);
        return m();
    }
    
    private synchronized void a(int i, int h, int n, final int n2) {
        this.N.z(this.H());
        this.y[0] = h << 2;
        if (this.y[0] > this.y.length) {
            (this.y = new int[1 + this.y[0]])[0] = this.y.length - 1;
        }
        J(i, 0);
        System.arraycopy(Code.Code, Code.Code, this.y, 1, this.y[0]);
        final int[] y = this.y;
        i = n;
        h = n2;
        int[] y2 = y;
        int[] code;
        int n3;
        int n4;
        if (this.w != null) {
            h = H(h);
            code = Code.Code;
            n3 = Code.Code + 2;
            n4 = code[n3 - 1];
        }
        else {
            h = 0;
            code = null;
            n3 = 0;
            n4 = 0;
        }
        if (i == 0) {
            y2[0] = 0;
        }
        else {
            for (int j = 1; j < y2[0]; j += 4) {
                if (y2[j + 3] == 0) {
                    final int[] array = y2;
                    final int n5 = 0;
                    array[n5] -= 4;
                    System.arraycopy(y2, j + 4, y2, j, y2[0] + 1 - j);
                }
                else {
                    final int n6 = y2[j];
                    final int n7 = y2[j + 1];
                    y2[j] = this.f(n6, i);
                    y2[j + 1] = this.b(n7, i, n4);
                    y2[j + 2] = this.f(n6 + y2[j + 2], i) - y2[j];
                    y2[j + 3] = this.b(n7 + y2[j + 3], i, n4) - y2[j + 1];
                }
            }
            if (this.w != null) {
                int n8;
                int k;
                int[] array2;
                int n9;
                int n10;
                int n11;
                int n12;
                int[] array3;
                int n13;
                int n14;
                int n15;
                int n16;
                int n17;
                int n18;
                int n19;
                int n20;
                int[] array4;
                int[] array5;
                int[] array6;
                int n21;
                int[] array7;
                int n22;
                int[] array8;
                int n23;
                for (i = 1; i < y2[0]; i += 4) {
                    n8 = y2[i + 1];
                    if ((k = this.J(code, n3, h, n8)) >= h) {
                        array2 = y2;
                        n9 = 0;
                        array2[n9] -= 4;
                        System.arraycopy(y2, i + 4, y2, i, y2[0] + 1 - i);
                        i -= 4;
                    }
                    else {
                        y2[i + 1] = n8 + this.w[k * 5] - (code[n3 + k] & 0xFFFFFF);
                        n10 = 1;
                        n11 = (code[n3 + k] & 0xFFFFFF) + this.w[k * 5 + 1];
                        while (++k < h && n11 < n8 + y2[i + 3]) {
                            if ((code[n3 + k] & Integer.MIN_VALUE) == 0x0) {
                                if (n10 == 0) {
                                    continue;
                                }
                                n12 = n11 - n8;
                                array3 = y2;
                                n13 = i;
                                n14 = y2[i];
                                n15 = y2[i + 1];
                                n16 = y2[i + 2];
                                n = n12;
                                n17 = n16;
                                n18 = n15;
                                n19 = n14;
                                n20 = n13;
                                array4 = array3;
                                if (array3[0] + 4 >= array4.length) {
                                    array5 = new int[array4.length + 8];
                                    System.arraycopy(array4, 0, array5, 0, array4.length);
                                    array4 = array5;
                                }
                                System.arraycopy(array4, n20, array4, n20 + 4, array4[0] + 1 - n20);
                                array6 = array4;
                                n21 = 0;
                                array6[n21] += 4;
                                array4[n20] = n19;
                                array4[n20 + 1] = n18;
                                array4[n20 + 2] = n17;
                                array4[n20 + 3] = n;
                                y2 = array4;
                                n8 = n11;
                                i += 4;
                                array7 = y2;
                                n22 = i + 3;
                                array7[n22] -= n12;
                                n10 = 0;
                            }
                            else {
                                if (n10 == 0) {
                                    y2[i + 1] = this.w[k * 5];
                                    n10 = 1;
                                }
                                n11 += this.w[k * 5 + 1];
                            }
                        }
                        if (n10 == 0) {
                            array8 = y2;
                            n23 = 0;
                            array8[n23] -= 4;
                            System.arraycopy(y2, i + 4, y2, i, y2[0] + 1 - i);
                            i -= 4;
                        }
                    }
                }
            }
        }
        this.y = y2;
        if (!Code.U && this.y[0] > 0) {
            if (this.N) {
                Code.M.c(this);
                return;
            }
            Code.M.d(this);
        }
    }
    
    private synchronized boolean Code(final Code code, final int n, int n2, int min, int h) {
        Code.M.an();
        final Graphics code2 = code.Code;
        try {
            final int clipX = code2.getClipX();
            final int clipY = code.Code.getClipY();
            final int clipWidth = code.Code.getClipWidth();
            final int clipHeight = code.Code.getClipHeight();
            code.J(clipX, clipY, clipWidth, clipHeight, 16777215);
            if (this.w == null || this.f == null || h == 0) {
                this.cn = min;
                return this.cv != 0;
            }
            h = H(h);
            final int[] code3 = Code.Code;
            final int n3 = Code.Code + 2;
            this.bp = this.cn;
            code.B(n, n2, this.cn = min, this.O(code3[n3 - 2]));
            if (code.Code.getClipWidth() > 0 && code.Code.getClipHeight() > 0) {
                this.aE = (min > this.cv / 2);
                if (code3[n3 - 1] > 0) {
                    this.cn = this.cv;
                    this.aL = true;
                    final int min2 = Math.min(code.Code.getClipY() - n2, code3[n3 - 2] - 1);
                    this.Code(code, n, n2, min2, Math.min(min2 + code.Code.getClipHeight() - 1, code3[n3 - 1] - 1), code3, n3, h);
                    this.cn = min;
                    n2 += code3[n3 - 1] - this.O(code3[n3 - 1]);
                }
                this.aL = this.aE;
                this.Code(code, n, n2, min, Math.min((min = Math.min(Math.max(code3[n3 - 1], this.Q(code.Code.getClipY() - n2)), code3[n3 - 2] - 1)) + this.Q(code.Code.getClipHeight()), code3[n3 - 2] - 1), code3, n3, h);
            }
            code.J(clipX, clipY, clipWidth, clipHeight);
            if (!Code.U) {
                if (this.N) {
                    Code.M.c(this);
                }
                else {
                    Code.M.d(this);
                }
            }
        }
        finally {
            Code.M.ao();
            if (this.bp != this.cn && this.cn == this.cv && this.J != null) {
                this.J.clear();
                this.J = null;
            }
        }
        return true;
    }
    
    private void Code(final Code code, final char[] array, int n, final int bn, final int n2, final int n3, final boolean b) {
        int n4;
        int max;
        int i;
        int n5;
        int n6;
        for (n4 = 1, max = Math.max(n3 / a(n2), 1), i = 0; i < n && n4 <= max; n4 = n5 + ((n6 | -n6) >>> 31 ^ 0x1), ++i) {
            n5 = n4;
            n6 = array[i] - '\n';
        }
        n = n4;
        while (i > 0) {
            final int n7 = this.cy + this.O(b ? (a(n2) * --n) : (n3 * --n / n4));
            int n8 = 0;
            if (n == 0) {
                n8 = i;
                i = 0;
            }
            else {
                while (array[i - 1] != '\n') {
                    ++n8;
                    if (--i == 0) {
                        break;
                    }
                }
            }
            if (n8 > 0 && array[i + n8 - 1] == '\r') {
                --n8;
            }
            v();
            final int n9 = i;
            final int n10 = n8;
            final int cx = this.cx;
            final int n11 = n7;
            final boolean al = this.aL;
            final int cn = this.cn;
            final int cv = this.cv;
            final int n12 = cn;
            final boolean b2 = al;
            final int n13 = n11;
            final int n14 = cx;
            final int n15 = n10;
            final int n16 = n9;
            if (b2) {
                Code(code, n2, array, n16, n15, n14, n13, bn);
            }
            else {
                final int n17 = n16;
                final int n18 = n15;
                final int n19 = n14;
                final int n20 = n13;
                final int n21 = n19;
                final int n22 = n18;
                final int n23 = n17;
                M(code.Code.getClipWidth());
                final int bo;
                if ((bo = (J(n2) ? 1 : 0) << 6) != Code.bO || bn != Code.bN) {
                    for (int j = 0; j < Code.n.length; ++j) {
                        Code.n[j] = (bo + Code.l[j] << 24 | (bn & 0xFFFFFF));
                    }
                    Code.bO = bo;
                    Code.bN = bn;
                }
                final int min;
                if ((min = Math.min((Code.m.length >> 1) - 1, ((Code(n2, array, n23, n22) + 1) * n12 - 1) / cv)) > 0 && n20 >= 0) {
                    final int max2 = Math.max(min / n22, 1);
                    if (Code.T || !Code.V || Code.as) {
                        code.Z(n21, n20, n21 + min, n20, bn);
                    }
                    else {
                        final int n24 = (n23 << 1 | (n22 << 2 ^ min)) % (Code.m.length / 2 - min) & 0xFFFFFFFE;
                        for (int k = 0; k < min; ++k) {
                            Code.m[k] = Code.n[n24 + k];
                            Code.m[min + k] = Code.n[(Code.n.length >> 1) + n24 + k];
                        }
                        for (int l = n23; l < n23 + n22; ++l) {
                            if (array[l] == ' ') {
                                final int n25 = (l - n23) * max2;
                                final int min2 = Math.min(max2, (Code.m.length >> 1) - n25);
                                Z(Code.m, n25, min2);
                                Z(Code.m, n25 + min, min2);
                            }
                        }
                        final int max3 = Math.max(0, -n21);
                        if (min > max3) {
                            code.Code(Code.m, max3, min - max3, n21 + max3, n20, min - max3, 2);
                        }
                    }
                }
            }
            --i;
        }
    }
    
    private synchronized void aC() {
        if (this.N) {
            Code.M.b(this);
        }
        this.cF = 0;
    }
    
    private void aD() {
        for (int i = this.O(); i > 0; --i) {
            ++this.cD;
            this.cD += this.N();
        }
    }
    
    private int Q() {
        int n = 0;
        for (int i = this.O(); i > 0; --i) {
            switch (this.O()) {
                case 70: {
                    ++n;
                    break;
                }
                case 66: {
                    n += 2;
                    break;
                }
                case 108: {
                    n += 4;
                    break;
                }
                case 114: {
                    n += 8;
                    break;
                }
            }
            this.cD += this.N();
        }
        return n;
    }
    
    private void Code(final Code code, final int n, int n2, final int n3, final int n4, final int[] array, int clipY) {
        if (n4 < 0) {
            return;
        }
        n2 += this.O(array[clipY + n3] & 0xFFFFFF);
        final int clipX = code.Code.getClipX();
        clipY = code.Code.getClipY();
        final int clipWidth = code.Code.getClipWidth();
        final int clipHeight = code.Code.getClipHeight();
        code.B(n, n2, this.cn, this.O(this.w[n4 * 5] + this.w[n4 * 5 + 1]));
        n2 -= this.O(this.w[n3 * 5]);
        int n5 = 0;
        int n6 = 0;
        this.cD = 0;
        while (true) {
            int c = Integer.MAX_VALUE;
            for (int i = n3; i <= n4; ++i) {
                int n7 = this.w[i * 5 + 3];
                while (this.w[n7] != 0) {
                    this.w[i * 5 + 3] = n7;
                    if (this.w[n7 + 1] > this.cD) {
                        c = C(c, this.cD, this.w[n7]);
                        if (this.w[n7] == c) {
                            n5 = this.w[n7 + 2];
                            n6 = this.w[n7 + 3];
                            break;
                        }
                        break;
                    }
                    else {
                        n7 += 4;
                    }
                }
            }
            if (c == Integer.MAX_VALUE) {
                break;
            }
            int max = c;
            int j;
            do {
                j = max;
                for (int k = n3; k <= n4; ++k) {
                    for (int n8 = this.w[k * 5 + 3]; this.w[n8] != 0 && this.w[n8] <= max + this.az; max = Math.max(max, this.w[n8 + 1]), n8 += 4) {
                        this.w[k * 5 + 3] = n8;
                    }
                }
            } while (j != max);
            final int cd = c;
            final int n9 = max;
            final int n10 = n5;
            int cy = n6;
            int cx = n10;
            final int n11 = n9;
            this.cD = cd;
            while (this.cD < n11) {
                final int cd2 = this.cD;
                final int o;
                if ((o = this.O()) == 83 || o == 76 || o == 77) {
                    this.T(o);
                }
                else {
                    this.az();
                    this.cx += cx;
                    this.cy += cy;
                    cx = this.cx;
                    cy = this.cy;
                    final int cz = this.cz;
                    final int ca = this.cA;
                    this.cz = this.O(this.cx + this.cz);
                    this.cA = this.O(this.cy + this.cA);
                    this.cx = this.O(this.cx);
                    this.cy = this.O(this.cy);
                    this.cz -= this.cx;
                    this.cA -= this.cy;
                    this.cx += n;
                    this.cy += n2;
                    if (Code(this.cx, this.cy, this.cz, this.cA, code.Code.getClipX(), code.Code.getClipY(), code.Code.getClipWidth(), code.Code.getClipHeight())) {
                        final int l = this.K();
                        switch (o) {
                            case 70: {
                                this.Code(code, l, cz, ca);
                                continue;
                            }
                            case 66: {
                                code.B(this.cx, this.cy, this.cz, this.cA, l);
                            }
                            default: {
                                continue;
                            }
                            case 84: {
                                final int n12 = this.N();
                                for (int o2 = this.O(); o2 > 0; --o2) {
                                    if (this.O() == 114) {
                                        this.N();
                                    }
                                    else {
                                        this.cD += this.N();
                                    }
                                }
                                final int n13 = this.N();
                                char[] m = Code.I;
                                if (n13 > Code.I.length) {
                                    m = new char[n13];
                                }
                                final byte[] f = this.f;
                                final int cd3 = this.cD;
                                final char[] array2 = m;
                                final int n14 = 0;
                                int n15 = n13;
                                int n16 = n14;
                                final char[] array3 = array2;
                                int n17 = cd3;
                                final byte[] array4 = f;
                                while (n15 > 0) {
                                    final int c2 = C(array4, n17);
                                    final int y = y((int)array4[n17]);
                                    n15 -= y;
                                    n17 += y;
                                    if (c2 <= 65535) {
                                        array3[n16++] = (char)c2;
                                    }
                                    else {
                                        array3[n16++] = (char)(0xD800 | c2 - 65536 >> 10);
                                        array3[n16++] = (char)(0xDC00 | (c2 & 0x3FF));
                                    }
                                }
                                final int n18 = n16;
                                this.cD += n13;
                                final int n19 = cx;
                                final int n20 = cy;
                                final int n21 = cd2;
                                final int n22 = n12;
                                final int n23 = l;
                                final int n24 = ca;
                                final char[] array5 = m;
                                final int n25 = n18;
                                final char[] array6 = array5;
                                final int n26 = n24;
                                final int n27 = n23;
                                final int n28 = n22;
                                final int n29 = n21;
                                final int n30 = n20;
                                final int n31 = n19;
                                if (this.aL) {
                                    if (this.K.n.aE) {
                                        final Code n32 = this.K.n;
                                        final int n33 = n29;
                                        final Code code2 = n32;
                                        final B b = n32.B;
                                        final B a = code2.a;
                                        final B b2 = b;
                                        if (!b.Code() && !a.Code()) {
                                            final B code3;
                                            final B b3 = ((code3 = B.Code(b2, a)) != b2) ? b2 : a;
                                            if (code3.Code.cp <= n33 && b3.Code.cp >= n33 && !this.d(n29)) {
                                                final Code n34 = this.K.n;
                                                final int cx2 = this.cx;
                                                final int cy2 = this.cy;
                                                final int cz2 = this.cz;
                                                final int n35 = n31;
                                                final int n36 = n30;
                                                final int n37 = n29;
                                                final char[] array7 = array6;
                                                final int n38 = n25;
                                                final int n39 = n28;
                                                final int n40 = n26;
                                                final boolean b4 = I(array6[0]) ^ true;
                                                final int n41 = n40;
                                                final int n42 = n39;
                                                final int n43 = n38;
                                                final char[] array8 = array7;
                                                final int n44 = n37;
                                                final int n45 = n36;
                                                final int n46 = n35;
                                                final int n47 = cz2;
                                                final int n48 = cy2;
                                                final int n49 = cx2;
                                                final Code code4 = n34;
                                                if (n34.aE && !code4.B.Code() && !code4.a.Code()) {
                                                    final int a2 = a(n42);
                                                    final char[] array9 = array8;
                                                    final int n50 = n41 / a2;
                                                    final char[] array10 = array9;
                                                    int n51 = 1;
                                                    for (int n52 = 0; n52 < n43 && n51 <= n50; ++n52) {
                                                        if (array10[n52] == '\n') {
                                                            ++n51;
                                                        }
                                                    }
                                                    final int n53 = n51;
                                                    int n54 = 0;
                                                    for (int n55 = 0; n55 < n53; ++n55) {
                                                        final char[] array11 = array8;
                                                        int n56 = n54;
                                                        final char[] array12 = array11;
                                                        int n57 = 0;
                                                        while (n56 < n43 && array12[n56] != '\n') {
                                                            ++n57;
                                                            ++n56;
                                                        }
                                                        final int n58 = n57;
                                                        final B b5 = code4.B;
                                                        final B a3 = code4.a;
                                                        final int n59 = n54;
                                                        final int n60 = n58;
                                                        final int n61 = n59;
                                                        final B b6 = a3;
                                                        final B b7 = b5;
                                                        final B code5;
                                                        final B b8 = ((code5 = B.Code(b5, b6)) != b7) ? b7 : b6;
                                                        final int n62 = n61 + n60;
                                                        final int n63 = (code5.Code.cp == n44) ? code5.Code : 0;
                                                        final int n64 = (b8.Code.cp == n44) ? b8.Code : n62;
                                                        if (n63 <= n62 && n64 >= n61) {
                                                            final int n65 = n48 + code4.C.O(n41 * n55 / n53);
                                                            final B b9 = code4.B;
                                                            final B a4 = code4.a;
                                                            final int n66 = n54;
                                                            final B code6;
                                                            final int n67 = ((code6 = B.Code(b9, a4)).Code.cp != n44) ? 0 : Math.max(0, code6.Code - n66);
                                                            final int code7 = Code(n42, array8, n54, n67);
                                                            final int n68 = n42;
                                                            final char[] array13 = array8;
                                                            final int n69 = n54 + n67;
                                                            final B b10 = code4.B;
                                                            final B a5 = code4.a;
                                                            final int n70 = n54;
                                                            final int n71 = n58;
                                                            final int n72 = n70;
                                                            final B b11 = a5;
                                                            final B b12 = b10;
                                                            final B b13;
                                                            final int code8 = Code(n68, array13, n69, (((b13 = ((B.Code(b10, b11) == b12) ? b11 : b12)).Code.cp != n44) ? n71 : Math.min(b13.Code - n72, n71)) - n67);
                                                            final int n73 = b4 ? (n49 + code7) : (n49 + n47 - code7 - code8);
                                                            code.J(n73, n65, code8, a2, -5189377);
                                                            if (n55 + 1 == n53) {
                                                                final B b14 = code4.B;
                                                                final B a6 = code4.a;
                                                                final B b15 = b14;
                                                                final B b16;
                                                                if (!b14.Code() && !a6.Code() && n44 < ((B.Code(b16 = b15, a6) != b16) ? b16 : a6).Code.cp) {
                                                                    final Code i2 = code4.C.I(n44, n46, n45);
                                                                    if (Code(n45 + n41 * n55 / n53, a(n42), i2.cs, i2.G())) {
                                                                        final Code code9 = code4;
                                                                        final int n74 = b4 ? (n73 + code8) : n73;
                                                                        final int n75 = n65;
                                                                        final int n76 = n41;
                                                                        final int n77 = a2;
                                                                        final Code code10 = i2;
                                                                        int n78 = n77;
                                                                        final int n79 = n76;
                                                                        int n80 = n75;
                                                                        final int n81 = n74;
                                                                        final Code code11 = code9;
                                                                        final int cs = code10.cs;
                                                                        final int g = code10.G();
                                                                        if (n79 < g) {
                                                                            final int o3 = code11.C.O(cs + g);
                                                                            final int o4 = code11.C.O(cs);
                                                                            n78 = o3 - o4;
                                                                            n80 = o4 + n2;
                                                                        }
                                                                        final int n82 = n + code11.C.O(code10.bm);
                                                                        if (n81 < n82) {
                                                                            code.J(n81, n80, n82 - n81 + 1, n78, -5189377);
                                                                        }
                                                                        else {
                                                                            final int f2 = code10.F();
                                                                            code.J(n82 + f2, n80, n81 - (n82 + f2) + 1, n78, -5189377);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        n54 += n58 + 1;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    final Code m2 = this.K.m;
                                    final int n83 = n29;
                                    final B b17;
                                    if (!(b17 = m2.B).Code() && b17.Code.cp == n83 && !this.d(n29)) {
                                        final Code m3 = this.K.m;
                                        final int n84 = n27;
                                        final Code code12 = m3;
                                        if (m3.b) {
                                            final int z = code12.B.Z();
                                            final int j2 = code12.B.J();
                                            final int b18 = code12.B.B();
                                            final int n85 = code12.C.O(z) + n;
                                            final int n86 = code12.C.O(j2) + n2;
                                            code.J(n85 - 1, n86, 3, 1, n84);
                                            code.J(n85, n86, 1, b18, n84);
                                            code.J(n85 - 1, n86 + b18 - 1, 3, 1, n84);
                                        }
                                    }
                                }
                                this.Code(code, array6, n25, n27, n28, n26, false);
                                if (this.O == null) {
                                    continue;
                                }
                                final int n87 = n29;
                                final char[] array14 = array6;
                                final int n88 = n28;
                                final char[] array15 = array14;
                                final Vector vector;
                                if ((vector = this.O.J.get(new Integer(n87))) != null) {
                                    for (int n89 = 0; n89 < vector.size(); ++n89) {
                                        final int[] array16;
                                        final int n90 = (array16 = (int[])vector.elementAt(n89))[9] - this.K.az;
                                        final int n92;
                                        final int n91 = (n92 = ((n90 | -n90) >>> 31 ^ 0x1)) * -16711680 + 16772710;
                                        final int n93 = n92 * 16777215;
                                        final int n94 = this.cx + this.O(array16[3]);
                                        final int n95 = this.cy + this.O(array16[4]);
                                        code.J(n94, n95, this.O(array16[5]), this.O(array16[6]), n91);
                                        Code(code, n88, array15, array16[1], array16[2], n94, n95, n93);
                                    }
                                    continue;
                                }
                                continue;
                            }
                            case 73: {
                                int n96 = 0;
                                int n97 = 0;
                                final int m4 = this.M();
                                int k2 = 0;
                                int n98 = -1;
                                int n99 = -1;
                                int o5 = this.O();
                                while (o5 > 0) {
                                    switch (this.O()) {
                                        case 99: {
                                            final int n100 = this.N();
                                            k2 = this.K();
                                            this.cD += n100 - 4;
                                            --o5;
                                            continue;
                                        }
                                        case 111: {
                                            this.cD += 2;
                                            n96 = this.N();
                                            n97 = this.N();
                                            --o5;
                                            continue;
                                        }
                                        case 122: {
                                            this.N();
                                            n98 = this.N();
                                            n99 = this.N();
                                            --o5;
                                            continue;
                                        }
                                        default: {
                                            this.cD += this.N();
                                            --o5;
                                            continue;
                                        }
                                    }
                                }
                                if (this.cz <= 0 || this.cA <= 0) {
                                    continue;
                                }
                                final int n101 = cx;
                                final int n102 = cy;
                                final int n103 = n96;
                                final int n104 = n97;
                                final int n105 = cz;
                                final int n106 = ca;
                                final int n107 = k2;
                                final int n108 = m4;
                                final int n109 = l;
                                final int n110 = n98;
                                final int n111 = n99;
                                final int n112 = n110;
                                final int n113 = n109;
                                final int n114 = n108;
                                final int n115 = n107;
                                final int n116 = n106;
                                final int n117 = n105;
                                final int n118 = n104;
                                final int n119 = n103;
                                final int n120 = n102;
                                final int n121 = n101;
                                final int n122 = n115 + (n111 << 10) + n112;
                                B b19;
                                if (n112 != -1 && n111 != -1) {
                                    if (this.aL) {
                                        b19 = this.Code(n122, this.bk + n114, n121, n120, n117, n116, 256, n112, n111);
                                    }
                                    else {
                                        b19 = this.Code(n122, this.bk + n114, n121, n120, n117, n116, this.H(), n112, n111);
                                    }
                                }
                                else if (this.aL) {
                                    b19 = this.Code(n122, this.bk + n114, n121, n120, n117, n116, 256, -1, -1);
                                }
                                else {
                                    b19 = this.Code(n122, this.bk + n114, n121, n120, n117, n116, this.H(), n117, n116);
                                }
                                if (b19 != null) {
                                    code.I(b19, this.cx, this.cy, this.cz, this.cA, n119, n118);
                                    continue;
                                }
                                code.J(this.cx, this.cy, this.cz, this.cA, n113);
                                continue;
                            }
                        }
                    }
                    else {
                        this.T(o);
                    }
                }
            }
        }
        code.J(clipX, clipY, clipWidth, clipHeight);
    }
    
    private int I(int code, int i, final int n, final int n2, final int n3, int g) {
        if (this.z == null) {
            return 0;
        }
        int n4 = 0;
        g = G(g);
        final int[] code2 = Code.Code;
        final int code3 = Code.Code;
        for (int j = 0; j < this.z.length; j += 5) {
            this.z[j + 4] = this.I(code2, code3, g, this.z[j + 1]);
            if (this.z[j + 4] >= 0 && Code(n3, n2, n, i, this.z[j], this.z[j + 4], this.z[j + 2], this.z[j + 3])) {
                ++n4;
            }
            else {
                this.z[j + 4] = -1;
            }
        }
        if (code == 0) {
            final int n5 = n4 << 2;
            Z(n5, n5);
        }
        else {
            Code(code, n4 << 2, false);
        }
        code = Code.Code;
        for (i = 0; i < this.z.length; i += 5) {
            if (this.z[i + 4] >= 0) {
                Code.Code[code++] = this.z[i];
                Code.Code[code++] = this.z[i + 4];
                Code.Code[code++] = this.z[i + 2];
                Code.Code[code++] = this.z[i + 3];
            }
        }
        return m();
    }
    
    private synchronized int c(int o, int cd, final int cd2) {
        this.cD = cd2;
        this.O();
        int o2 = this.O();
        Code.O = o;
        Code.P = cd;
        final int n = o2 << 2;
        Z(n, n);
        o = Code.Code;
        cd = this.cD;
        for (int i = 0; i < o2; ++i) {
            this.ay();
            Code.Code[o++] = this.cx;
            Code.Code[o++] = this.cy;
            Code.Code[o++] = this.cz;
            Code.Code[o++] = this.cA;
        }
        o = m();
        final int o3 = Code.O;
        final int p3 = Code.P;
        Code.O = 0;
        Code.P = 0;
        final int g = G(p3);
        final int[] code = Code.Code;
        final int code2 = Code.Code;
        this.cD = cd;
        cd = 1;
        while (o2-- > 0) {
            this.ay();
            this.cy = this.I(code, code2, g, this.cy);
            final int n2 = o;
            Code(n2)[(n2 & 0x7FFF) + 1 + cd] = this.cy;
            cd += 4;
        }
        this.cD += this.N();
        this.aD();
        final int n3 = o3;
        cd = cd2;
        a(n3 + 1, cd);
        a(o3, o);
        return o3;
    }
    
    private synchronized boolean B(final int n, final int n2) {
        if (this.cG == -1) {
            return false;
        }
        final int g = G(n2);
        final int[] code = Code.Code;
        final int code2 = Code.Code;
        this.cD = this.cG;
        while (this.cD <= this.a) {
            this.cG = this.cD;
            ++this.cD;
            for (int i = this.O(); i > 0; --i) {
                this.ay();
                this.cy = this.I(code, code2, g, this.cy);
                if (this.cy < 0) {
                    this.cD += (i - 1) * 10;
                    break;
                }
                if (Code(this.cH, this.cI, this.cJ, this.cK, this.cx, this.cy, this.cz, this.cA)) {
                    this.c(n, n2, this.cG);
                    this.cG = this.cD;
                    return true;
                }
            }
            this.cD += this.N();
            this.aD();
        }
        return false;
    }
    
    private synchronized Code Z(final int n, final int n2, int g) {
        if (this.cs == 0) {
            return new Code(this, n, n2, null, null, null, 0);
        }
        String s = null;
        String k = null;
        String j = null;
        int n3 = 0;
        int n4 = 0;
        this.cD = this.cs;
        g = G(g);
        final int[] code = Code.Code;
        final int code2 = Code.Code;
        while (this.cD <= this.a) {
            final int cd = this.cD;
            final int o = this.O();
            for (int i = this.O(); i > 0; --i) {
                this.ay();
                this.cy = this.I(code, code2, g, this.cy);
                if (this.cy >= 0 && Code(n, n2, 1, 1, this.cx, this.cy, this.cz, this.cA)) {
                    this.cD += (i - 1) * 10;
                    final int cd2 = this.cD;
                    switch (o) {
                        case 76: {
                            if (s == null) {
                                s = this.k();
                                break;
                            }
                            break;
                        }
                        case 78: {
                            if (s == null) {
                                this.cD += 7;
                                s = this.o + "#" + this.j();
                                break;
                            }
                            break;
                        }
                        case 105: {
                            if (k == null) {
                                k = this.k();
                            }
                            for (int o2 = this.O(); o2 > 0 && j == null; --o2) {
                                if (this.O() == 116) {
                                    j = this.j();
                                }
                                else {
                                    this.cD += this.N();
                                }
                            }
                            break;
                        }
                        case 73: {
                            if (n3 == 0) {
                                n3 = cd;
                                break;
                            }
                            break;
                        }
                        case 83: {
                            if (n4 == 0) {
                                n4 = cd;
                                break;
                            }
                            break;
                        }
                    }
                    this.cD = cd2;
                    break;
                }
            }
            this.cD += this.N();
            this.aD();
        }
        if (n3 != 0 || n4 != 0) {
            s = null;
            k = null;
        }
        return new Code(this, n, n2, s, k, j, n3);
    }
    
    private int T(final int n) {
        this.cD = n + 1 + 1 + 10 * this.f[n + 1];
        this.cD += 2;
        return this.cD = this.L();
    }
    
    private synchronized int Code(final Object o, final J n, final int n2) {
        this.cD = ((int[])((Object[])o)[2])[n2];
        this.aA();
        return n.I(this.j());
    }
    
    private synchronized boolean Code(final Object o, final int n) {
        return ((Hashtable)((Object[])o)[3]).containsKey(new Integer(n));
    }
    
    private synchronized int j(int i, final int n) {
        if (this.t == null) {
            return 0;
        }
        final int n2;
        i = (n2 = this.t[i * 5 + 1]) + this.t[i * 5 + 2];
        int g;
        final int n3 = g = this.g(n2, this.br);
        while (true) {
            final int n5;
            final int n4 = (n5 = this.w[g * 5]) + this.w[g * 5 + 1];
            if (n5 < n2 || n4 > i) {
                break;
            }
            ++g;
        }
        if (n == 0) {
            final int n6 = g - n3;
            Z(n6, n6);
            i = n3;
        }
        else {
            Code(n, g - n3, false);
            i = n3;
        }
        while (i < g) {
            Code.Code[Code.Code + (i - n3)] = i;
            ++i;
        }
        return m();
    }
    
    private synchronized int h(int a, int o) {
        if (a == 0) {
            return 0;
        }
        final int l;
        if ((l = l(a)) == 0) {
            return 0;
        }
        J(a, 0);
        a = l + Code.Code;
        this.cD = this.cs;
        while (this.cD <= this.a) {
            final int n = this.cD++;
            boolean b = false;
        Label_0147:
            for (int i = this.O(); i > 0; --i) {
                this.ay();
                final int g = this.g(this.cy, this.br);
                for (int j = Code.Code; j < a; ++j) {
                    if (Code.Code[j] == g) {
                        b = true;
                        this.cD += (i - 1) * 10;
                        break Label_0147;
                    }
                }
            }
            this.cD += this.N();
            if (b) {
                for (int k = this.O(); k > 0; --k) {
                    if (this.O() == 102) {
                        Code.O = o;
                        a = a(2, 64);
                        o = Code.O;
                        Code.O = 0;
                        return this.c(a, o, n);
                    }
                    this.cD += this.N();
                }
            }
            else {
                this.aD();
            }
        }
        return 0;
    }
    
    private synchronized int Code(int i, final char c, int f) {
        int n = 0;
        i += 2 + 10 * this.f[i + 1];
        if (c == '\0') {
            final int e = this.E(i);
            i += 2;
            n = e + i;
        }
        else {
            i += this.E(i) + 2 + 1;
            for (int j = this.f[i - 1]; j > 0; --j) {
                if (this.F(i++) == c) {
                    final int e2 = this.E(i);
                    i += 2;
                    n = e2 + i;
                    break;
                }
                i += this.E(i) + 2;
            }
            if (n < i) {
                return 0;
            }
        }
        if (f == 0) {
            final int n2 = (n - i) / 3;
            Z(n2, n2);
        }
        else {
            Code(f, (n - i) / 3, false);
        }
        int e3;
        for (int code = Code.Code; i < n; f = this.F(i++), e3 = this.E(i), i += 2, Code.Code[code++] = (f << 16 | e3)) {}
        return m();
    }
    
    private static int J(final byte[] array, final int n, final int n2) {
        if (n2 < 2) {
            return -1;
        }
        final int b;
        if ((b = B(array, n)) + 2 > n2) {
            return -1;
        }
        if (!Code(array, n + 2, b)) {
            return -1;
        }
        return b + 2;
    }
    
    private synchronized int S(final int n) {
        this.T(n);
        this.cD += 15;
        return this.f[this.cD];
    }
    
    private synchronized int i(int n, final int n2) {
        n = this.T(n);
        ++this.cD;
        this.az();
        this.cD += 4;
        final int o = this.O();
        final int o2;
        int n3 = (o2 = this.O()) & 0x8;
        final String j = this.j();
        this.j();
        if (this.K.J.get(j) != null) {
            n3 = 0;
        }
        final int n4 = o2 & 0x1;
        switch (o) {
            case 83:
            case 85:
            case 97:
            case 112:
            case 120: {
                Z(3, 3);
                n = Code.Code;
                Code.Code[n++] = n4;
                Code.Code[n++] = n3;
                Code.Code[n] = -1;
                return m();
            }
            case 115: {
                this.cD = this.L();
                final int l = this.L();
                final int n5 = n;
                final int cx = this.cx;
                n = this.cy;
                final int n6 = cx;
                final int n7 = n5;
                final int cd = this.cD;
                final int cz = this.cz;
                final int ca = this.cA;
                int n8 = 0;
                int n9 = 0;
                this.cD = this.bq;
                while (this.cD < n7) {
                    final int o3;
                    switch (o3 = this.O()) {
                        case 66:
                        case 70:
                        case 73:
                        case 84: {
                            this.az();
                            n8 += this.cx;
                            n9 += this.cy;
                            break;
                        }
                    }
                    this.T(o3);
                }
                this.cx = n6 + n8;
                this.cy = n + n9;
                this.cz = cz;
                this.cA = ca;
                this.cD = cd;
                n = G(n2);
                this.cy = this.I(Code.Code, Code.Code, n, this.cy);
                Z(8, 8);
                n = Code.Code;
                Code.Code[n++] = n4;
                Code.Code[n++] = n3;
                Code.Code[n++] = l;
                final int[] code = Code.Code;
                final int n10 = n++;
                final int n11 = o2 & 0x4;
                code[n10] = (n11 | -n11) >>> 31;
                Code.Code[n++] = this.cx;
                Code.Code[n++] = this.cy;
                Code.Code[n++] = this.cz;
                Code.Code[n] = this.cA;
                return m();
            }
            case 99:
            case 114: {
                Z(1, 1);
                Code.Code[Code.Code] = n4;
                return m();
            }
            default: {
                return 0;
            }
        }
    }
    
    private synchronized void I(final B b, final int n, int n2) {
        final int j = b.J();
        n2 = G(n2);
        n2 = this.I(Code.Code, Code.Code, n2, j);
        J(n, 0);
        Code.Code[Code.Code] = b.Z();
        Code.Code[Code.Code + 1] = n2;
        Code.Code[Code.Code + 2] = b.B();
    }
    
    private synchronized int Code(final Object o, int b) {
        final int n = ((int[])((Object[])o)[2])[b];
        b = B(this.f, n);
        return this.K(n + b + 2);
    }
    
    private synchronized int d(int z, final int n, int g) {
        g = G(g);
        z = this.Z(Code.Code, Code.Code, g, z);
        d(2 * this.K.J.size() + 4);
        e(Code("x"));
        e(Code(String.valueOf(n)));
        e(Code("y"));
        e(Code(String.valueOf(z)));
        final Enumeration keys = this.K.J.keys();
        while (keys.hasMoreElements()) {
            final String s;
            if (!(s = (String)keys.nextElement()).startsWith("o:")) {
                e(Code(e(s)));
                e(Code(e(this.K.J.get(s).toString())));
            }
        }
        return l();
    }
    
    private synchronized int Code(int n, int i, int g, final int n2) {
        g = G(g);
        n = this.Z(Code.Code, Code.Code, g, n);
        d(2 * this.K.J.size() + 6);
        e(Code("x"));
        e(Code(String.valueOf(i)));
        e(Code("y"));
        e(Code(String.valueOf(n)));
        if (this.F(n2) == 83) {
            this.cD = n2 + 2 + 10 * this.f[n2 + 1];
            e(Code(e(this.j())));
            n = Code.ad;
            for (i = this.O(); i > 0; --i) {
                if (this.O() == 116) {
                    n = Code(e(this.j()));
                    break;
                }
                this.cD += this.N();
            }
            e(n);
        }
        final Enumeration keys = this.K.J.keys();
        while (keys.hasMoreElements()) {
            final String s;
            if (!(s = (String)keys.nextElement()).startsWith("o:")) {
                e(Code(e(s)));
                e(Code(e(this.K.J.get(s).toString())));
            }
        }
        return l();
    }
    
    private int R() {
        int n = 0;
        if (Code.Q && this.f != null) {
            n = 0 + this.f.length;
            if (this.w != null) {
                n += this.w.length << 2;
            }
        }
        if (this.L != null) {
            return n + this.N.bh + this.N.b;
        }
        return n + this.N.bh;
    }
    
    private int U(int max) {
        int n = 0;
        if (Code.Q && max > 0 && this.f != null) {
            n = 0 + this.f.length;
            if (this.w != null) {
                n += this.w.length << 2;
            }
            max = Math.max(1, max - n);
        }
        if (this.L != null) {
            this.N.d(max, this.L.bh);
            return n + this.N.bh + this.N.b;
        }
        this.N.d(max, 0);
        return n + this.N.bh;
    }
    
    private synchronized void I(int o, final String s) {
        this.T(o);
        this.cD += 15;
        o = this.O();
        ++this.cD;
        this.K.Code(s, o, this.j());
    }
    
    private synchronized String b(final int n) {
        this.T(n);
        this.cD += 17;
        this.aA();
        return this.j();
    }
    
    private synchronized String d(final int n) {
        this.T(n);
        this.cD += 17;
        return this.j();
    }
    
    private synchronized int Code(String h, final int[] array, int bq) {
        int[] code = null;
        int code2 = 0;
        int g = 0;
        if (array != null) {
            g = G(bq);
            code = Code.Code;
            code2 = Code.Code;
        }
        if (h.equals(this.K.b) && this.O != null) {
            final int[] array2 = code;
            final int n = code2;
            final int n2 = g;
            bq = n;
            final int[] array3 = array2;
            if (!this.O.q()) {
                return 0;
            }
            this.K.az = ((this.K.az < this.O.Code.size() - 1) ? (this.K.az + 1) : 0);
            if (array != null) {
                this.Code(array3, bq, n2, array);
            }
            if (this.K.az != 0) {
                return 1;
            }
            return 2;
        }
        else {
            if (this.O != null) {
                this.aE();
            }
            this.K.b = h;
            this.O = new Code(0, '\0');
            final Code o = this.O;
            bq = this.bq;
            final Code code3 = o;
            o.C = this;
            int n3 = 0;
            for (int i = 0; i < h.length(); ++i) {
                if (J(h.charAt(i))) {
                    n3 = 1;
                    break;
                }
            }
            final int[] array4 = { code3.bo, code3.a, 0, 0 };
            code3.bl = code3.C.I(bq, array4);
            while (code3.bl != -1) {
                code3.bo = array4[0];
                code3.a = array4[1];
                bq = 0;
                int n4 = code3.bl + 17;
                for (int j = code3.C.F(n4++); j > 0; --j) {
                    if (code3.C.F(n4++) == 116 && code3.C.a(n4).equals("s")) {
                        bq = 1;
                    }
                    n4 += code3.C.E(n4) + 2;
                }
                String s = code3.C.a(n4);
                if (n3 != 0) {
                    h = h(h);
                    s = h(s);
                }
                final int v = code3.v(n4);
                code3.br = 0;
            Label_1412_Outer:
                while (bq == 0 && code3.br < s.length()) {
                    final Code code4 = code3;
                    final String s2 = h;
                    final int bl = code3.bl;
                    final int br = code3.br;
                    final String s3 = s;
                    final int bo = code3.bo;
                    final int a = code3.a;
                    final int n5 = v;
                    final int size = code3.Code.size();
                    final int n6 = 1;
                    final int n7 = n3;
                    int n8 = n6;
                    int n9 = size;
                    int n10 = n5;
                    int n11 = a;
                    int n12 = bo;
                    String s4 = s3;
                    int n13 = br;
                    int n14 = bl;
                    String s5 = s2;
                    Code code5 = code4;
                    while (true) {
                        while (s5.length() > s4.length() - n13) {
                            int[][] array6;
                            int[][] array5;
                            if (n10 == -1 || !s4.regionMatches(true, n13, s5, 0, s4.length() - n13)) {
                                array5 = (array6 = null);
                            }
                            else {
                                final int e = code5.C.E(n14 + 6);
                                final int d = code5.C.D(n14 + 8);
                                final int n15 = n12 + code5.C.E(n10 + 1);
                                final int n16 = n11 + code5.C.D(n10 + 3);
                                final int e2 = code5.C.E(n10 + 6);
                                final int d2 = code5.C.D(n10 + 8);
                                int n17 = n10 + 17;
                                for (int k = code5.C.F(n17++); k > 0; --k) {
                                    n17 = ++n17 + (code5.C.E(n17) + 2);
                                }
                                String s6 = code5.C.a(n17);
                                if (n7 != 0) {
                                    s6 = h(s6);
                                }
                                final int v2 = code5.v(n17);
                                if (!I(n12, n11, e, d, n15, n16, e2, d2)) {
                                    final Code code6 = code5;
                                    final String substring = s5.substring(s4.length() - n13);
                                    final int n18 = n10;
                                    final int n19 = 0;
                                    final String s7 = s6;
                                    final int n20 = n15;
                                    final int n21 = n16;
                                    final int n22 = v2;
                                    final int n23 = n9;
                                    ++n8;
                                    n9 = n23;
                                    n10 = n22;
                                    n11 = n21;
                                    n12 = n20;
                                    s4 = s7;
                                    n13 = n19;
                                    n14 = n18;
                                    s5 = substring;
                                    code5 = code6;
                                    continue Label_1412_Outer;
                                }
                                if (s5.charAt(s4.length() - n13) == ' ' && s5.length() > s4.length() - n13 + 1) {
                                    final Code code7 = code5;
                                    final String substring2 = s5.substring(s4.length() - n13 + 1);
                                    final int n24 = n10;
                                    final int n25 = 0;
                                    final String s8 = s6;
                                    final int n26 = n15;
                                    final int n27 = n16;
                                    final int n28 = v2;
                                    final int n29 = n9;
                                    ++n8;
                                    n9 = n29;
                                    n10 = n28;
                                    n11 = n27;
                                    n12 = n26;
                                    s4 = s8;
                                    n13 = n25;
                                    n14 = n24;
                                    s5 = substring2;
                                    code5 = code7;
                                    continue Label_1412_Outer;
                                }
                                array5 = (array6 = null);
                            }
                            final int[][] array7 = array6;
                            if (array5 != null) {
                                code3.Code.addElement(array7);
                            }
                            final Code code8 = code3;
                            ++code8.br;
                            continue Label_1412_Outer;
                        }
                        if (s4.regionMatches(true, n13, s5, 0, s5.length())) {
                            final Code code9 = code5;
                            final int bl2 = code5.bl;
                            final int br2 = code5.br;
                            final int bo2 = code5.bo;
                            final int a2 = code5.a;
                            final int n30 = n14;
                            final int n31 = n13 + s5.length();
                            final int n32 = n9;
                            final int n33 = n8;
                            final int n34 = n32;
                            final int n35 = n31;
                            final int n36 = n30;
                            int n37 = a2;
                            int n38 = bo2;
                            int n39 = br2;
                            int n40 = bl2;
                            final Code code10 = code9;
                            final int[][] array8 = new int[n33][10];
                            int n41 = 0;
                            boolean b;
                            String a3;
                            int n43;
                            int e3;
                            int a4;
                            int code11;
                            int n46;
                            while (true) {
                                int n42 = n40 + 17;
                                b = true;
                                for (int l = code10.C.F(n42++); l > 0; --l) {
                                    if (code10.C.F(n42++) == 114) {
                                        b = false;
                                    }
                                    n42 += code10.C.E(n42) + 2;
                                }
                                a3 = code10.C.a(n42);
                                n43 = 0;
                                int n44 = 0;
                                for (int n45 = 0; n45 < n39; ++n45) {
                                    if (a3.charAt(n45) == '\n') {
                                        ++n43;
                                        n44 = n45 + 1;
                                    }
                                }
                                a4 = a(e3 = code10.C.E(n40 + 15));
                                code11 = Code(e3, a3.substring(n44, n39));
                                n46 = n39;
                                if (n40 == n36) {
                                    break;
                                }
                                final int v3 = code10.v(n42);
                                final int n47 = n38 + code10.C.E(v3 + 1);
                                final int n48 = n37 + code10.C.D(v3 + 3);
                                array8[n41] = Code(n40, n46, a3.length() - n46, b ? code11 : 0, a4 * n43, Code(e3, a3.substring(n39, a3.length())), a4, n38, n37, n34);
                                n40 = v3;
                                n39 = 0;
                                n38 = n47;
                                n37 = n48;
                                ++n41;
                            }
                            final int code12 = Code(e3, a3.substring(n39, n35));
                            array8[n41] = Code(n40, n46, n35 - n46, b ? code11 : (code10.C.E(n40 + 6) - code11 - code12), a4 * n43, code12, a4, n38, n37, n34);
                            final int[][] array6;
                            final int[][] array5 = array6 = array8;
                            continue;
                        }
                        int[][] array6;
                        int[][] array5 = array6 = null;
                        continue;
                    }
                }
                code3.bl = code3.C.I(n4 + 2 + code3.C.E(n4), array4);
            }
            final Code code13;
            final Enumeration elements = (code13 = code3).Code.elements();
            while (elements.hasMoreElements()) {
                final int[][] array9 = (int[][])elements.nextElement();
                for (int n49 = 0; n49 < array9.length; ++n49) {
                    final int[] array10 = array9[n49];
                    final Integer n50 = new Integer(array10[0]);
                    if (code13.J.containsKey(n50)) {
                        ((Vector<int[]>)code13.J.get(n50)).addElement(array10);
                    }
                    else {
                        final Vector vector;
                        (vector = new Vector()).addElement(array10);
                        code13.J.put(n50, vector);
                    }
                }
            }
            if (this.O.q()) {
                if (this.K.az == -1) {
                    this.K.az = 0;
                }
                if (array != null) {
                    this.Code(code, code2, g, array);
                }
                return 1;
            }
            return 0;
        }
    }
    
    private static int B(final byte[] array, final int n, final int n2) {
        if (n2 < 2) {
            return -1;
        }
        final int b;
        if ((b = B(array, n)) + 2 > n2) {
            return -1;
        }
        if (!I(array, n + 2, b)) {
            return -1;
        }
        return b + 2;
    }
    
    private synchronized int S() {
        if (this.t == null) {
            return 0;
        }
        final int length = this.t.length;
        Z(length, length);
        System.arraycopy(this.t, 0, Code.Code, Code.Code, this.t.length);
        return m();
    }
    
    private synchronized int T() {
        final int n = this.br * 5;
        Z(n, n);
        System.arraycopy(this.w, 0, Code.Code, Code.Code, this.br * 5);
        return m();
    }
    
    public static void Code(final byte[] array, final int n, final int n2) {
        Code((array != null) ? Code.Code.Z(array, n) : 0);
        I(0);
        I(n2);
    }
    
    private static void Z(final byte[] array, final int n) {
        Code((array != null) ? Code.Code.Z(array, n) : 0);
    }
    
    public static void a() {
        Code(0);
        Code(0);
        I(-1);
    }
    
    public static void Code(final int n, final int n2, final int n3) {
        I(n);
        I(n2);
        I(n3);
    }
    
    public static void I(final int n, final int n2, final int n3) {
        I(n);
        I(n2);
        I(n3);
        I(0);
    }
    
    public static void Code(final int n, final boolean b) {
        Code(Z(n));
        I((int)(b ? 1 : 0));
        I(1);
    }
    
    public static void J(final int n, final int n2, final int n3) {
        I(n);
        I(n2);
        I(n3);
        I(0);
    }
    
    public static void Code(final int n, final int n2, final int n3, final int n4, final int n5) {
        Code(0);
        Code(0);
        I(n);
        I(0);
        I(n2);
        I(n3);
        I(n4);
        I(n5);
    }
    
    public static void Z(final int n, final int n2, final int n3) {
        I(n);
        I(n2);
        I(n3);
        I(0);
    }
    
    public final boolean Code(final String s) {
        return this.b.Code(s);
    }
    
    public final byte[] Code(final String s) {
        return this.b.Code(s);
    }
    
    public final String Z(final int n) {
        return this.b.Z(n);
    }
    
    public final long I(final String s) {
        return this.b.I(s);
    }
    
    public final int Code(final byte[] array, final String s) {
        return this.b.Code(array, s);
    }
    
    public final boolean I(final String s) {
        return this.b.I(s);
    }
    
    public final Code Code(final String s, final boolean b, final int n) {
        return this.b.Code(s, b, n);
    }
    
    public final boolean Z(final String s) {
        return this.b.Z(s);
    }
    
    public final long Code(final String s) {
        return this.b.Code(s);
    }
    
    public final String Code(final Code code, final String s) {
        return this.b.Code(code, s);
    }
    
    public final int Z(final String s) {
        return this.b.Z(s);
    }
    
    public final void Code(final String s) {
        for (int i = 0; i < this.cF; ++i) {
            if (this.B[i].J(s)) {
                while (i < this.cF - 1) {
                    this.B[i] = this.B[i + 1];
                    ++i;
                }
                this.B[--this.cF] = null;
            }
        }
    }
    
    public final Code Code(final String s) {
        for (int i = 0; i < this.cF; ++i) {
            final Code code;
            if ((code = this.B[i]).J(s)) {
                return code;
            }
        }
        return null;
    }
    
    public static int B(final String s) {
        if (J(s) == 0) {
            return 0;
        }
        final String substring = s.substring(0, s.length() - 5 - 2);
        try {
            return Integer.parseInt(substring);
        }
        catch (Exception ex) {
            return 0;
        }
    }
    
    public static int J(final String s) {
        if (s.length() > 7 && s.indexOf(".obml") == s.length() - 5 - 2) {
            final String substring = s.substring(s.length() - 2);
            try {
                final int int1;
                if (e(int1 = Integer.parseInt(substring))) {
                    return int1;
                }
            }
            catch (Exception ex) {}
        }
        return 0;
    }
    
    private void B(final byte[] array, final int n) {
        for (int i = n; i < 64; ++i) {
            this.g[i] = 0;
        }
        System.arraycopy(array, 0, this.g, 0, Math.min(64, n));
        this.t.B(this.g, 0, 64);
        this.t.C(this.Code, 0, 32);
    }
    
    private void C(final byte[] array, final int n) {
        this.t.B(this.Code, 0, 32);
        this.t.B(this.g, 0, 64);
        this.t.C(array, n, 32);
        this.t.B(this.Code, 0, 32);
        this.t.C(this.Code, 0, 32);
    }
}
